use hui
use tsunami.*
use helper.tone.*

const MAX_VOICES = 15

const OSCI_RADIUS = 15.0
const LINK_LENGTH = OSCI_RADIUS * 5.0



enum SynthType
	SINE
	SQUARE
	SAW

class UnisonConfig extends Module.Config
	var amplitude: float
	var initial, peak, sustain: float
	var attack, decay, release: float
	var type: SynthType
	var num_voices: int
	var detune, blend: float
	
	func override reset()
		num_voices = 3
		detune = 0.10
		blend = 0.5
		amplitude = 0.1
		initial = 0.01
		peak = 1
		sustain = 0.6
		attack = 0.01
		decay = 0.4
		release = 0.4
		type = SynthType.SINE

class UnisonPanel extends ConfigPanel
	var fc: UnisonConfig&
	
	var width, height: float
	
	var moving, hover: int
	
	var override c: UnisonSynthesizer&
	func override __init__(_s: Module)
		fc := &c.config
		
		from_source("
Grid ? ''
	DrawingArea area '' expandx expandy
	---|
	Grid ? ''
		Label ? 'Type' right disabled
		ComboBox type 'Sine\\Square\\Saw' expandx
		---|
		Label ? 'Voices' right disabled
		SpinButton voices '' range=1:{{MAX_VOICES}} expandx
		---|
		Label ? 'Detune' right disabled
		SpinButton detune '' range=0:10:0.01 expandx
		---|
		Label ? 'Blend' right disabled
		SpinButton blend '' range=0:1:0.01 expandx
		---|
		Label ? 'Amplitude' right disabled
		SpinButton amplitude '' range=0:100:0.001")
		
		event_x("area", "hui:draw", on_draw)
		event_x("area", "hui:left-button-down", on_left_button_down)
		event_x("area", "hui:left-button-up", on_left_button_up)
		event_x("area", "hui:mouse-move", on_mouse_move)
		event("type", on_spin_button)
		event("voices", on_spin_button)
		event("detune", on_spin_button)
		event("blend", on_spin_button)
		event("amplitude", on_spin_button)
	
	func t2x(t: float) -> float
		return width*0.7 * sqrt(t)
	func v2y(v: float) -> float
		return height - 100*v
	func x2t(x: float) -> float
		return sqr(max(x,0) / width / 0.7)
	func y2v(y: float) -> float
		return max((height - y), 0) / 100
	func draw_curve_exp(p: hui.Painter, t0: float, v0: float, t1: float, v1: float, col: color)
		var e = log(v1/v0)
		var cc: vec2[]
		for a in 0:1.01:0.05
			var t = t0+a*(t1-t0)
			var v = v0 * exp(a * e)
			cc.add(vec2(t2x(t), v2y(v)))
		var col2 = color.interpolate(col, theme.text_soft2, 0.3)
		p.set_color(col2)
		p.set_line_dash([5.0,2.0])
		p.draw_lines(cc)
		p.set_line_dash([2.0,0.0])
		cc.add(vec2(t2x(t1), v2y(0)))
		cc.add(vec2(t2x(t0), v2y(0)))
		col2.a = 0.2
		p.set_color(col2)
		p.draw_polygon(cc)
	func draw_curve_lin(p: hui.Painter, t0: float, v0: float, t1: float, v1: float, col: color)
		var cc: vec2[]
		cc.add(vec2(t2x(t0), v2y(v0)))
		cc.add(vec2(t2x(t1), v2y(v1)))
		var col2 = color.interpolate(col, theme.text_soft2, 0.3)
		p.set_color(col2)
		p.set_line_dash([5.0,2.0])
		p.draw_lines(cc)
		p.set_line_dash([2.0,0.0])
		cc.add(vec2(t2x(t1), v2y(0)))
		cc.add(vec2(t2x(t0), v2y(0)))
		col2.a = 0.2
		p.set_color(col2)
		p.draw_polygon(cc)
	
	func draw_grabber(p: hui.Painter, t0: float, v0: float, t1: float, v1: float, col: color, hover: bool)
		var col2 = color.interpolate(col, theme.text_soft2, 0.3)
		if hover
			col2 = theme.hoverify(col2)
		p.set_color(col2)
		p.set_line_width(2.0)
		p.draw_line([t2x(t0), v2y(v0)], [t2x(t1), v2y(v1)])
		p.set_line_width(1)
	
	func draw_envelope(p: hui.Painter, o: UnisonConfig)
		var t0: float = 0
		var t1 = t0 + o.attack
		var t2 = t1 + o.decay
		var t3 = t2 + o.release
		draw_curve_lin(p, t0, o.initial, t1, o.peak, color.RED)
		draw_curve_lin(p, t1, o.peak, t2, o.sustain, color.ORANGE)
		draw_curve_exp(p, t2, o.sustain, t3, 0.01, color.GREEN)
		
		
		draw_grabber(p, t1, 0, t1, 1, color.RED, hover == -10)
		draw_grabber(p, t2, 0, t2, 1, color.ORANGE, hover == -11)
		draw_grabber(p, t3, 0, t3, 1, color.GREEN, hover == -12)
		draw_grabber(p, t1, o.sustain, t3, o.sustain, color.YELLOW, hover == -13)
		p.set_color(theme.text_soft1)
		p.set_font_size(9)
		if hover == -10
			p.draw_str([width - 100, height - 20], "attack {{o.attack * 1000|.1}} ms")
		else if hover == -11
			p.draw_str([width - 100, height - 20], "decay {{o.decay * 1000|.1}} ms")
		else if hover == -12
			p.draw_str([width - 100, height - 20], "release {{o.release * 1000|.1}} ms")
		else if hover == -13
			p.draw_str([width - 100, height - 20], "sustain {{o.sustain * 100|.0}} %")
		
	func mut on_draw(p: hui.Painter)
		width = p.width
		height = p.height
		p.set_color(theme.background)
		p.draw_rect([0, width, 0, height])
		
		draw_envelope(p, fc)
	
	func get_hover() -> int
		var e = hui.get_event()
		var mx = e.mouse.x
		var my = e.mouse.y
		if my > v2y(1.1)
			var o = fc
			if abs(mx - t2x(o.attack)) < 10
				return -10
			if abs(mx - t2x(o.attack + o.decay)) < 10
				return -11
			if abs(mx - t2x(o.attack + o.decay + o.release)) < 10
				return -12
			if mx > t2x(o.attack) and mx < t2x(o.attack + o.decay + o.release) and abs(my - v2y(o.sustain)) < 10
				return -13
		return -1
	
	func mut on_left_button_down()
		hover = get_hover()
		moving = -1
		if hover < -5
			moving = hover
	func mut on_left_button_up()
		moving = -1
	func mut on_mouse_move()
		var e = hui.get_event()
		var mx = e.mouse.x
		var my = e.mouse.y
		if moving < -5
			var o = fc
			if moving == -10
				o.attack = clamp(x2t(mx), 0.0002, 2)
			if moving == -11
				o.decay = clamp(x2t(mx) - o.attack, 0.001, 2)
			if moving == -12
				o.release = clamp(x2t(mx) - o.attack - o.decay, 0.001, 2)
			if moving == -13
				o.sustain = clamp(y2v(my), 0.001, 1.0)
			update()
			changed()
		else
			hover = get_hover()
		redraw("area")

	func mut on_spin_button()
		var o = fc
		o.type = SynthType.from_int(get_int("type"))
		o.num_voices = get_int("voices")
		o.detune = get_float("detune")
		o.blend = get_float("blend")
		o.amplitude = get_float("amplitude")
		changed()
	
	func override update()
		var o = fc
		set_int("type", int(o.type))
		set_int("voices", o.num_voices)
		set_float("detune", o.detune)
		set_float("blend", o.blend)
		set_float("amplitude", o.amplitude)
		redraw("area")


class OscillatorState
	var volume: float
	var phi: float[MAX_VOICES]
	var env: EnvelopeADSR
	func __init__()
		volume = 0
		for mut p in phi
			p = 0
		env.reset()

class UnisonRenderer extends PitchRenderer
	var osc: OscillatorState
	var override synth: UnisonSynthesizer&

	func override on_end()
		osc.env.end()

	func override on_start(_volume: float)
		osc.env.start(_volume * synth.config.amplitude)
		var c = &synth.config

	func override on_config()
		var c = &synth.config
		osc.env.set(c.attack, c.decay, c.sustain, c.release, synth.sample_rate)
		osc.env.set2(c.initial, c.peak)

	func override render(out buf: AudioBuffer) -> bool
	
		var c = &synth.config
		var vv = [for k in 0:c.num_voices c.blend]
		vv[c.num_voices/2] = 1.0
		
		for i in 0:len(buf)

			osc.volume = osc.env.get()
			if osc.env.just_killed
				return false
			
			var output: float = 0
			for k in 0:c.num_voices
				var v = osc.volume * vv[k]
				var phi = osc.phi[k] + delta_phi * (1 + c.detune * k * 0.001)
				if c.type == SynthType.SINE
					output += sin(phi) * v
				else if c.type == SynthType.SQUARE
					if sin(phi) > 0
						output += v
					else
						output -= v
				else if c.type == SynthType.SAW
					output += (loop(phi, 0, 2*pi) / pi - 1) * v
				if phi > 16*pi
					phi = loop(phi, 0, 2*pi)
				osc.phi[k] = phi
			
			# transport
			buf.c[0][i] += output
		buf.auto_generate_channels()
		return true

class UnisonSynthesizer extends Synthesizer
	var config: UnisonConfig

	func override create_panel() -> xfer[ConfigPanel]
		return new UnisonPanel(self)

	func override create_pitch_renderer(pitch: int) -> xfer[PitchRenderer]
		return new UnisonRenderer(self, pitch)

			
	
