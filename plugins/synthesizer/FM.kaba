use hui
use tsunami.*
use helper.tone.*
use helper.draw.*

let NUM_OSCILLATORS = 6

let OSCI_RADIUS = 15.0
let LINK_LENGTH = OSCI_RADIUS * 5.0



enum OsciType
	SINE as "sine"
	SQUARE as "square"
	SAW as "saw"

struct OscillatorConfig
	factor: float
	amplitude: float
	initial, peak, sustain: float
	attack, decay, release: float
	type: OsciType
	target: bool[NUM_OSCILLATORS]
	target_out: bool
	func __init__()
		reset()
	func mut reset()
		factor = 1
		amplitude = 0.1
		initial = 0.01
		peak = 1
		sustain = 0.6
		attack = 0.01
		decay = 0.4
		release = 0.4
		type = OsciType.SINE
		for mut t in target
			t = false
		target_out = false
	func active() -> bool
		if target_out
			return true
		for t in target
			if t
				return true
		return false

struct OscillatorLink
	source, dest: int

class FMConfig extends Module.Config
	osc: OscillatorConfig[NUM_OSCILLATORS]
	#link: OscillatorLink[]
	func override reset()
		#link.clear()
		for mut o in osc
			o.reset()
		osc[0].factor = 1
		osc[0].amplitude = 0.5
		osc[0].target_out = true
	func mut clear_links()
		for mut o in osc
			for mut t in o.target
				t = false
			o.target_out = false

class FMPanel extends ConfigPanel
	override c: FMSynthesizer&
	fc: FMConfig&
	chosen: int
	menu_top: owned![hui.Menu]
	menu_osci: owned![hui.Menu]
	
	width, height: float
	p_osci: vec2[NUM_OSCILLATORS]
	p_out: vec2
	
	moving, hover: int
	
	func mut add_top(label: string, id: string)
		event("top-{{id}}", on_topology)
		menu_top.add(label, "top-{{id}}")
	
	func override __init__(_s: Module)
		fc := &c.config
		
		from_source("
Grid ? ''
	DrawingArea area '' expandx expandy
	---|
	Grid ? ''
		Label ? 'Freq Multiplier' right disabled
		SpinButton factor '' range=0:32:0.001 expandx
		---|
		Label ? 'Amplitude' right disabled
		SpinButton amplitude '' range=0:100:0.001")
		
		event_x("area", "hui:draw", on_draw)
		event_x("area", "hui:left-button-down", on_left_button_down)
		event_x("area", "hui:left-button-up", on_left_button_up)
		event_x("area", "hui:right-button-down", on_right_button_down)
		event_x("area", "hui:mouse-move", on_mouse_move)
		event("factor", on_spin_button)
		event("amplitude", on_spin_button)
		chosen = 0
		hover = -1
		
		menu_top = new hui.Menu(&self)
		menu_top.add("Topology", "label-top")
		menu_top.enable("label-top", false)
		add_top("o", "x")
		add_top("o-o", "x0")
		add_top("o   o", "xx")
		add_top("o-o-o", "x01")
		add_top("o-(o   o)", "x00")
		add_top("o-o   o", "x0x")
		add_top("o-o   o-o", "x0x2")
		add_top("o-o-o   o", "x01x")
		add_top("o-(o   o)   o", "x00x")
		add_top("o-o-o   o-o-o", "x01x34")
		add_top("o-o-o   o-o   o", "x01x3x")
		add_top("o-(o   o)   o-(o   o)", "x00x33")

		menu_osci = new hui.Menu(&self)
		menu_osci.add("Oscillator", "label")
		menu_osci.enable("label", false)
		menu_osci.add("sine", "type-sine")
		menu_osci.add("square", "type-square")
		menu_osci.add("saw", "type-saw")
		event("type-sine", on_type_sine)
		event("type-square", on_type_square)
		event("type-saw", on_type_saw)
	
	func mut update_osci_pos()
		# initial
		p_out = vec2(40, 60)
		for mut i=>p in p_osci
			var p_parent = vec2(1000, 1000)
			if fc.osc[i].target_out
				p_parent = p_out
			for k=>t in fc.osc[i].target
				if t
					p_parent = p_osci[k]
			p = p_parent + vec2(LINK_LENGTH, i * 10)
		for i in 0:2000
			iterate_osci_pos()
	func _f_link(a: vec2, b: vec2) -> vec2
		let d = len(b - a)
		let dir = (b - a) * (1/d)
		return vec2(0, (b.y-a.y) * 0.05)
	func _f_free(a: vec2, b: vec2) -> vec2
		if abs(a.x - b.x) > 10
			return [0,0]
		let d = len(b - a)
		let dir = (b - a) * (1/d)
		return dir * min(d - OSCI_RADIUS*2.5, 0) * 0.3
	func mut iterate_osci_pos()
		var f: vec2[NUM_OSCILLATORS]
		for i=>o in fc.osc
			f[i] = vec2(0,0)
			for j=>o2 in fc.osc
				if i == j
					continue
				if linked(i,j)
					f[i] += _f_link(p_osci[i], p_osci[j])
				else
					f[i] += _f_free(p_osci[i], p_osci[j])
			if o.target_out
				f[i] += _f_link(p_osci[i], p_out)
		for i=>o in fc.osc
			p_osci[i] += f[i]
	func linked(i: int, j: int) -> bool
		return fc.osc[i].target[j] or fc.osc[j].target[i]
	
	func osci_pos(index: int) -> vec2
		if index < 0
			return p_out
		return p_osci[index]

	func draw_type(p: hui.Painter, z: vec2, type: OsciType, _dx: float, amp: float)
		let dx = _dx / pi
		var v0 = 0.0
		var t0 = -pi
		for t in -pi:pi+0.1:0.1
			var v = sin(t)
			if type == OsciType.SQUARE
				if v > 0
					v = 1
				else
					v = -1
			else if type == OsciType.SAW
				v = -1 + 2*loop(t, 0, pi) / pi
			if t > t0
				p.draw_line([z.x + t0*dx, z.y - v0*amp], [z.x + t*dx, z.y - v*amp])
			t0 = t
			v0 = v
	
	func draw_osci(p: hui.Painter, index: int)
		let z = osci_pos(index)
		var bg = theme.blob_bg
		var col = theme.text_soft1
		if index == chosen
			bg = theme.blob_bg_selected
			col = theme.text
		if index == hover
			bg = theme.hoverify(bg)
		p.set_color(bg)
		p.draw_circle([z.x, z.y], 15)
	
		let o = fc.osc[index]
		p.set_color(col)
		draw_type(p, z - vec2(0,2), o.type, 9, 5.5)
		let f = int(o.factor + 0.5)
		p.set_font_size(7)
		#p.set_color(theme.text_soft1)
		p.draw_str([z.x-4, z.y+6], "x{{f}}")
	
	func draw_link(p: hui.Painter, a: int, b: int)
		p.set_color(theme.text_soft1)
		let z1 = osci_pos(a)
		let z2 = osci_pos(b)
		let p0 = vec2(z2.x + 18, z2.y)
		let p1 = vec2(z1.x - 18, z1.y)
		let v = vec2(50, 0)
		draw_spline(p, p0, v, p1, v)
		let m = spline_pos(p0, v, p1, v, 0.5)
		let dm = - spline_vel(p0, v, p1, v, 0.5).normalized()
		draw_arrow_head(p, m + dm * 8, dm * 16)
	
	func t2x(t: float) -> float
		return width*0.7 * sqrt(t)
	func v2y(v: float) -> float
		return height - 100*v
	func x2t(x: float) -> float
		return sqr(max(x,0) / width / 0.7)
	func y2v(y: float) -> float
		return max((height - y), 0) / 100
	func draw_curve_exp(p: hui.Painter, t0: float, v0: float, t1: float, v1: float, col: color)
		let e = log(v1/v0)
		var cc: vec2[]
		for a in 0:1.01:0.05
			let t = t0+a*(t1-t0)
			let v = v0 * exp(a * e)
			cc.add([t2x(t), v2y(v)])
		p.set_color(col)
		p.set_line_dash([5.0,2.0])
		p.draw_lines(cc)
		p.set_line_dash([2.0,0.0])
		cc.add([t2x(t1), v2y(0)])
		cc.add([t2x(t0), v2y(0)])
		p.set_color(col.with_alpha(0.2))
		p.draw_polygon(cc)
	func draw_curve_lin(p: hui.Painter, t0: float, v0: float, t1: float, v1: float, col: color)
		var cc: vec2[]
		cc.add([t2x(t0), v2y(v0)])
		cc.add([t2x(t1), v2y(v1)])
		p.set_color(col)
		p.set_line_dash([5.0,2.0])
		p.draw_lines(cc)
		p.set_line_dash([2.0,0.0])
		cc.add([t2x(t1), v2y(0)])
		cc.add([t2x(t0), v2y(0)])
		p.set_color(col.with_alpha(0.3))
		p.draw_polygon(cc)
	
	func draw_grabber(p: hui.Painter, t0: float, v0: float, t1: float, v1: float, col: color, hover: bool)
		var col2 = col
		p.set_line_width(2.0)
		if hover
			col2 = theme.hoverify(col2)
			p.set_line_width(3.0)
		p.set_color(col2)
		p.draw_line([t2x(t0), v2y(v0)], [t2x(t1), v2y(v1)])
		p.set_line_width(1)
	
	func draw_envelope(p: hui.Painter, o: OscillatorConfig)
		let t0 = 0.0
		let t1 = t0 + o.attack
		let t2 = t1 + o.decay
		let t3 = t2 + o.release
		draw_curve_lin(p, t0, o.initial, t1, o.peak, theme.neon(0))
		draw_curve_lin(p, t1, o.peak, t2, o.sustain, theme.neon(1))
		draw_curve_exp(p, t2, o.sustain, t3, 0.01, theme.neon(3))
		
		
		draw_grabber(p, t1, 0, t1, 1, theme.neon(0), hover == -10)
		draw_grabber(p, t2, 0, t2, 1, theme.neon(1), hover == -11)
		draw_grabber(p, t3, 0, t3, 1, theme.neon(3), hover == -12)
		draw_grabber(p, t1, o.sustain, t3, o.sustain, theme.neon(2), hover == -13)
		p.set_color(theme.text_soft1)
		p.set_font_size(9)
		if hover == -10
			p.draw_str([width - 100, height - 20], "attack {{o.attack * 1000|.1}} ms")
		else if hover == -11
			p.draw_str([width - 100, height - 20], "decay {{o.decay * 1000|.0}} ms")
		else if hover == -12
			p.draw_str([width - 100, height - 20], "release {{o.release * 1000|.0}} ms")
		else if hover == -13
			p.draw_str([width - 100, height - 20], "sustain {{o.sustain * 100|.0}} %")
		
	func mut on_draw(p: hui.Painter)
		width = p.width
		height = p.height
		p.set_color(theme.background)
		p.draw_rect([0,width, 0,height])
		
		p.set_roundness(5)
		p.set_color(theme.blob_bg_hidden)
		p.draw_rect([0, p_out.x+15, p_out.y-20, p_out.y+20])
		p.set_roundness(0)
		p.set_color(theme.text_soft1)
		p.draw_str([p_out.x-32, p_out.y-10], "out")
		
		for j in 0:NUM_OSCILLATORS
			draw_osci(p, j)
		for j=>o in fc.osc
			for k in 0:NUM_OSCILLATORS
				if o.target[k]
					draw_link(p, j, k)
			if o.target_out
				draw_link(p, j, -1)
		
		draw_envelope(p, fc.osc[chosen])
	
	func get_hover() -> int
		let e = hui.get_event()
		let mx = e.mouse.x
		let my = e.mouse.y
		for i in 0:NUM_OSCILLATORS
			var z = osci_pos(i)
			if abs(mx - z.x) + abs(my - z.y) < 20
				return i
		if my > v2y(1.1) and chosen >= 0
			var o = &fc.osc[chosen]
			if abs(mx - t2x(o.attack)) < 10
				return -10
			if abs(mx - t2x(o.attack + o.decay)) < 10
				return -11
			if abs(mx - t2x(o.attack + o.decay + o.release)) < 10
				return -12
			if mx > t2x(o.attack) and mx < t2x(o.attack + o.decay + o.release) and abs(my - v2y(o.sustain)) < 10
				return -13
		return -1
	
	func mut on_left_button_down()
		hover = get_hover()
		moving = -1
		if hover >= 0
			set_chosen(hover)
		else if hover < -5
			moving = hover
	func mut on_left_button_up()
		moving = -1
	func mut on_mouse_move()
		let e = hui.get_event()
		let mx = e.mouse.x
		let my = e.mouse.y
		if moving < -5 and chosen >= 0
			var o = &fc.osc[chosen]
			if moving == -10
				o.attack = clamp(x2t(mx), 0.0002, 2)
			if moving == -11
				o.decay = clamp(x2t(mx) - o.attack, 0.001, 2)
			if moving == -12
				o.release = clamp(x2t(mx) - o.attack - o.decay, 0.001, 2)
			if moving == -13
				o.sustain = clamp(y2v(my), 0.001, 1.0)
			update()
			changed()
		else
			hover = get_hover()
		redraw("area")
				
		
	func mut on_right_button_down()
		hover = get_hover()
		if hover >= 0
			set_chosen(hover)
			menu_osci.popup(&self)
		else
			menu_top.popup(&self)
	
	func mut set_chosen(i: int)
		chosen = i
		redraw("area")
		update()
	
	func mut on_topology()
		let code = hui.get_event().id[4:]
		fc.clear_links()
		for i in 0:len(code)
			if code[i] == 'x'
				fc.osc[i].target_out = true
			else
				let t = int(code[i:i+1])
				fc.osc[i].target[t] = true
		update_osci_pos()
		redraw("area")
		changed()
	
	func mut on_type_sine()
		fc.osc[chosen].type = OsciType.SINE
		redraw("area")
		changed()
	
	func mut on_type_square()
		fc.osc[chosen].type = OsciType.SQUARE
		redraw("area")
		changed()
		
	func mut on_type_saw()
		fc.osc[chosen].type = OsciType.SAW
		redraw("area")
		changed()

	func mut on_spin_button()
		if chosen < 0
			return
		var o = &fc.osc[chosen]
		o.factor = get_float("factor")
		o.amplitude = get_float("amplitude")
		changed()
	
	func override update()
		if chosen >= 0
			var o = &fc.osc[chosen]
			set_float("factor", o.factor)
			set_float("amplitude", o.amplitude)
		update_osci_pos()
		redraw("area")


struct OscillatorState
	input = 0.
	output = 0.
	volume = 0.
	phi = 0.
	env: EnvelopeADSR
	conf: OscillatorConfig
	func __init__()
		env.reset()

class FMRenderer extends PitchRenderer
	osc: OscillatorState[]
	num_osc_active = 0
	override synth: FMSynthesizer&

	func override on_end()
		for mut oi=>o in osc
			o.env.end()

	func override on_start(_volume: float)
		num_osc_active = len(osc)
		for mut o in osc
			# TODO: volume should only effect "output" oscs
			o.env.start(_volume * o.conf.amplitude)

	func override on_config()
		let n = 0
		for c in synth.config.osc
			if !c.active()
				continue
			if len(osc) <= n
				var o: OscillatorState
				osc.add(o)
			osc[n].conf = c
			osc[n].env.set(c.attack, c.decay, c.sustain, c.release, synth.sample_rate)
			osc[n].env.set2(c.initial, c.peak)
			n ++
		osc.resize(n)

	func override render(out buf: AudioBuffer) -> bool
		for i in 0:len(buf)

			for mut o in osc
				o.volume = o.env.get()
				if o.env.just_killed
					num_osc_active --
					if num_osc_active == 0
						return false
					
				o.phi += delta_phi * (1 + o.input) * o.conf.factor
				if o.conf.type == OsciType.SINE
					o.output = sin(o.phi) * o.volume
				else if o.conf.type == OsciType.SQUARE
					if sin(o.phi) > 0
						o.output = o.volume
					else
						o.output = -o.volume
				else if o.conf.type == OsciType.SAW
					o.output = (loop(o.phi, 0, 2*pi) / pi - 1) * o.volume
				o.input = 0
				if o.phi > 16*pi
					o.phi = loop(o.phi, 0, 2*pi)
			
			# transport
			for o in osc
				if o.conf.target_out
					buf.c[0][i] += o.output
				for j=>t in o.conf.target
					if t
						osc[j].input += o.output
		buf.auto_generate_channels()
		return true

class FMSynthesizer extends Synthesizer
	config: FMConfig

	func override create_panel() -> xfer[ConfigPanel]
		return new FMPanel(self)

	func override create_pitch_renderer(pitch: int) -> xfer[PitchRenderer]
		return new FMRenderer(self, pitch)

			
	
