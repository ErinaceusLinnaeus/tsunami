use tsunami.*
use helper.tone.*

const MIN_DETECT_PITCH = 40
const MAX_DETECT_PITCH = 100
const MAX_SCAN_PITCH = 200

class TestDetector extends PitchDetector
	var pitch_power: float[]
	var pitch_power2: float[]
	func override process(midi: MidiEventBuffer, buf: AudioBuffer)
		#print(len(buf))
		var z: complex[]
		fft.r2c(buf.c[0], z)
		
		let N = len(buf)
		print(N)
		
		pitch_power.resize(MAX_SCAN_PITCH)
		pitch_power = 0
		
		let f_min = pitch_to_freq(MIN_DETECT_PITCH)
		let f_max = pitch_to_freq(MAX_SCAN_PITCH)
		print("{{f_min}} : {{f_max}}")
		let i_min = int((f_min * N) / DEFAULT_SAMPLE_RATE + 1)
		let i_max = int(min((f_max * N) / DEFAULT_SAMPLE_RATE, N/2-2))
		print("{{i_min}} : {{i_max}}")
		
		for i in i_min:i_max
			let p = abs(z[i])
			let f = (float(i) * DEFAULT_SAMPLE_RATE) / N
			let _pitch = int(freq_to_pitch(f)+0.5)
			#print(_pitch)
			pitch_power[_pitch] += p
		
	
		pitch_power2.resize(MAX_DETECT_PITCH)
		for i in MIN_DETECT_PITCH:MAX_DETECT_PITCH
			pitch_power2[i] = pitch_power[i] * pitch_power[i+8]
#		print(pitch_power2[MIN_DETECT_PITCH:MAX_DETECT_PITCH])
		#print(pitch_power[MIN_DETECT_PITCH:MAX_DETECT_PITCH])
		print(pitch_power[:MAX_DETECT_PITCH])
