# Image = hui:properties
# Title[Deutsch] = Equalizer
use hui
use tsunami.*
use helper.grid.*
use helper.tone.*
use helper.filter.*
use helper.curves.*
use helper.draw.*



let MIN_FREQ = 20.0
let MAX_FREQ = 20000.0
let MIN_VOL = -55
let MAX_VOL = 35


struct Peak
	var enabled: bool
	var mode: FilterType
	var pitch: float
	var gain: float
	var q: float
	func __init__(_mode: FilterType, _pitch: float, _gain: float, _q: float)
		enabled = true
		mode = _mode
		pitch = _pitch
		gain = _gain
		q = _q
	
	func z(g0: float) -> vec2
		return [pitch_to_freq(pitch), gain + g0]
	#float q()
		# ~ (f1 - f0) / f0 = f1/f0 - 1
	#	return pow(2, width/12) - 1
	
	func create_filter(out f: BiquadFilter, sample_rate: float)
		let freq = pitch_to_freq(pitch)
		f.create(mode, freq, q, gain, sample_rate)


class EqCurve extends Curve
	var gain: float
	var peaks: Peak[]
	var sample_rate: float
	func mut set(c: Equalizer.Config, _sample_rate: float)
		gain = c.gain
		peaks = c.peaks
		sample_rate = _sample_rate
	func override get(freq: float) -> float
		#float pitch = freq_to_pitch(f)
		var r = gain
		for p in peaks
			if p.enabled
				var f: BiquadFilter
				p.create_filter(f, sample_rate)
				r += f.params.gain(freq, sample_rate)#p.dgain(pitch)
		return r



class Equalizer extends AudioEffect
	class Config extends Module.Config
		var gain: float
		var peaks: Peak[]

		func override reset()
			gain = 0
			peaks.clear()

	# FIXME find a better way!
	var grid: EqualizerGrid* = nil

	var config: Config

	var filter: BiquadFilter[]
	
	func override on_config()
		filter.clear()
		filter.resize(len(config.peaks))
		for stage=>p in config.peaks
			p.create_filter(filter[stage], session.sample_rate())
	
	func override reset_state()
		for f in filter
			f.reset()

	func override process(out buf: AudioBuffer)
		# global gain
		buf.scale(db_to_factor(config.gain))
		
		# eq
		for f in filter
			f.apply(buf)
		
		# visualization
		for g in grid
			g.set_buffer(buf)

	func override create_panel() -> xfer[ConfigPanel]
		return new EqualizerPanel(self)


enum HoverType
	NONE
	PEAK
	PEAK_LABEL
	GAIN

class EqualizerGrid extends Grid
	var c: Equalizer.Config&
	var cp: EqualizerPanel&
	var sample_rate: float
	var hover, selected: (HoverType, int)
	var spectrum: SpectrumCurve
	
	var menu: owned[hui.Menu]
	
	func mut init2()
		panel.event("add-peak", on_add_peak)
		panel.event("add-low-pass", on_add_peak)
		panel.event("add-high-pass", on_add_peak)
		panel.event("add-low-shelf", on_add_peak)
		panel.event("add-high-shelf", on_add_peak)
		panel.event("peak-toggle-enabled", on_peak_toggle_enabled)
		panel.event("peak-delete", on_peak_delete)
		hover = (HoverType.NONE, -1)
		selected = hover

	func override on_draw(p: hui.Painter)
		draw_curve_c(p, spectrum, false)
	
		# curve + area below
		var curve: EqCurve
		curve.set(c, sample_rate)
		draw_curve_c(p, curve, true)
		
		# gain base-line
		let y = y_axis.project(c.gain)
		p.set_line_width(2)
		p.set_color(colors.text_soft2)
		if hover[0] == HoverType.GAIN
			p.set_color(colors.text_soft1)
		p.set_line_dash([8.0,5.0])
		p.draw_line([0,y], [p.width,y])
		p.set_line_dash([8.0,0.0])
	
		# points
		for i=>pk in c.peaks
			let pp = project2(pk.z(c.gain))
			
			p.set_line_width(2)
			let col = point_color(i == selected[1], i == hover[1])
			p.set_color(col.with_alpha(0.6))
			p.draw_line([pp.x, 0], [pp.x, p.height])
			
			#p.set_font_size(12)
			p.set_font("", 12, i == hover[1], false)
			draw_boxed_str(p, [pp.x, 10], str(i+1), col_text, colors.text_soft3, Align.CENTER)
			p.set_font("", 12, false, false)
			
			draw_point2(p, pk.z(c.gain), i == selected[1], i == hover[1])
			if i == hover[1]
				p.set_font_size(8)
				p.set_color(col_hover)
				p.draw_str([pp.x - 20, pp.y - 65], str(pk.mode))
				p.draw_str([pp.x - 20, pp.y - 50], "{{pitch_to_freq(pk.pitch)|.1}} Hz")
				p.draw_str([pp.x - 20, pp.y - 35], "{{pk.gain|.1}} dB")
				p.draw_str([pp.x - 20, pp.y - 20], "Q {{pk.q|.1}}")
		if hover[0] == HoverType.GAIN
			p.set_font_size(8)
			p.set_color(col_hover)
			p.draw_str([m.x - 20, y_axis.project(c.gain) - 20], "Gain {{c.gain|.1}} dB")
			

	# left button down -> select
	func override on_left_button_down()
		selected = hover
		redraw()

	func override on_mouse_wheel()
		let dy = hui.get_event().scroll.y
		if hover.e1 >= 0
			if dy > 0
				c.peaks[hover.e1].q *= 1.04
			else
				c.peaks[hover.e1].q /= 1.04
			cp.changed()
			redraw()
	
	var right_click_mouse_pos: vec3

	# right button down -> new point
	func override on_right_button_down()
		right_click_mouse_pos = get_mouse3(0)
		
		selected = hover
		
		var m = new hui.Menu(cp)
		if selected.e0 == HoverType.PEAK or selected.e0 == HoverType.PEAK_LABEL
			if c.peaks[selected.e1].enabled
				m.add("disable", "peak-toggle-enabled")
			else
				m.add("enable", "peak-toggle-enabled")
			m.add("delete", "peak-delete")
		else
			m.add("add Peak", "add-peak")
			m.add("add Low Pass", "add-low-pass")
			m.add("add High Pass", "add-high-pass")
			m.add("add Low Shelf", "add-low-shelf")
			m.add("add High Shelf", "add-high-shelf")
		m.popup(panel)
		menu = give(m)
	
	# hui events
	func mut on_add_peak()
		let id = hui.get_event().id
		var t = FilterType.PEAK
		if id == "add-low-pass"
			t = FilterType.LOW_PASS
		if id == "add-high-pass"
			t = FilterType.HIGH_PASS
		if id == "add-low-shelf"
			t = FilterType.LOW_SHELF
		if id == "add-high-shelf"
			t = FilterType.HIGH_SHELF
		let m = right_click_mouse_pos
		c.peaks.add(Peak(t, freq_to_pitch(m.x), m.y - c.gain, 2))
		selected = (HoverType.PEAK, len(c.peaks) - 1)
		hover = selected
		cp.changed()
		redraw()
	
	func mut on_peak_toggle_enabled()
		if selected.e1 >= 0
			c.peaks[selected.e1].enabled = not c.peaks[selected.e1].enabled
			cp.changed()
			redraw()
	func mut on_peak_delete()
		if selected.e1 >= 0
			c.peaks.remove(selected.e1)
			cp.changed()
			hover = (HoverType.NONE, -1)
			selected = hover
			redraw()
	
	func get_hover(m: vec2) -> (HoverType, int)
		for i=>p in c.peaks
			if mouse_over_point2(p.z(c.gain))
				return (HoverType.PEAK, i)
		for i=>p in c.peaks
			let pp = project2(p.z(c.gain))
			if abs(pp.x - m.x) < 15 and m.y < 30
				return (HoverType.PEAK_LABEL, i)
		if abs(m.y - y_axis.project(c.gain)) < 10
			return (HoverType.GAIN, -1)
		return (HoverType.NONE, -1)

	func override on_mouse_move()
		if hui.get_event().button_l
			# move
			if selected.e1 >= 0
				c.peaks[selected.e1].pitch = freq_to_pitch(get_mouse2().x)
				if selected.e0 == HoverType.PEAK
					c.peaks[selected.e1].gain = get_mouse2().y - c.gain
				cp.changed()
			else if selected.e0 == HoverType.GAIN
				c.gain = get_mouse2().y
				cp.changed()
		else
			hover = get_hover(m)
		redraw()
	
	func override on_mouse_leave()
		hover = (HoverType.NONE, -1)
		redraw()

	# [Delete] -> remove point
	func override on_key_down()
		if hui.get_event().key == hui.KEY_DELETE
			on_peak_delete()

	func mut set_buffer(buf: AudioBuffer)
		spectrum.set(buf, sample_rate)
		redraw()

class EqualizerPanel extends ConfigPanel
	var grid: EqualizerGrid
	var num_peaks: int
	var override c: Equalizer&
	func override __init__(_eq: Module)
		super.__init__(_eq)
		add_grid("!expandy,expandx", 0, 0, "grid")
		set_target("grid")
		add_drawing_area("!grabfocus,expandx,expandy", 0, 0, "drawing")
	
		grid.init(self, "drawing")
		grid.init2()
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp := &self
		grid.c := &c.config
		grid.sample_rate = c.session.sample_rate()
		num_peaks = 0
		
		c.grid = &grid
	
	func override __delete__()
		c.grid = nil
		
	func override update()
		grid.redraw()


