use hui
use tsunami.*
use helper.grid.*
use helper.tone.*
use helper.filter.*
use helper.curves.*



const MIN_FREQ = 20.0
const MAX_FREQ = 20000.0
const MIN_VOL = -55
const MAX_VOL = 35



class Biquad extends AudioEffect
	class Config extends Module.Config
		var a1, a2: float
		var b0, b1, b2: float

		func override reset()
			a1 = 0
			a2 = 0
			b0 = 1
			b1 = 0
			b2 = 0

		func create_filter() -> BiquadFilter.Parameters
			var p: BiquadFilter.Parameters
			p.a[1] = a1
			p.a[2] = a2
			p.b[0] = b0
			p.b[1] = b1
			p.b[2] = b2
			return p

		func mut from_filter(p: BiquadFilter.Parameters)
			a1 = p.a[1]
			a2 = p.a[2]
			b0 = p.b[0]
			b1 = p.b[1]
			b2 = p.b[2]
		

	var config: Config

	var grid: BiquadGrid* = nil

	var filter: BiquadFilter
	
	func override on_config()
		filter.params = config.create_filter()
	
	func override reset_state()
		filter.reset()

	func override process(out buf: AudioBuffer)
		filter.apply(buf)

	func override create_panel() -> xfer[ConfigPanel]
		return new BiquadPanel(self)


class BiquadGrid extends Grid
	var c: Biquad.Config&
	var cp: BiquadPanel&
	var sample_rate: float
	var spectrum: SpectrumCurve
	
	
	func override __init__()
	func override __delete__()

	func override on_draw(p: hui.Painter)
		draw_curve_c(p, spectrum, false)
	
		# curve + area below
		var gain: BiquadGainCurve
		gain.filter.params = c.create_filter()
		gain.sample_rate = sample_rate
		draw_curve_c(p, gain, true)
	
		# curve + area below
		var phase: BiquadPhaseShiftCurve
		phase.filter.params = c.create_filter()
		phase.sample_rate = sample_rate
		draw_curve_c(p, phase, false)


	func mut set_buffer(buf: AudioBuffer)
		spectrum.set(buf, sample_rate)
		redraw()

	func override on_right_button_down()
		hui.fly(new PresetDialog(cp))#.then(func() print("aaa"))

class BiquadPanel extends ConfigPanel
	var grid: BiquadGrid
	var override c: Biquad&
	func override __init__(_biquad: Module)
		super.__init__(_biquad)
		from_source("
Grid ? '' vertical
	DrawingArea drawing '' grabfocus expandy
	Grid ? ''
		Label ? 'a' right disabled
		.
		SpinButton a1 '' range=-100:100:0.01
		SpinButton a2 '' range=-100:100:0.01
		---|
		Label ? 'b' right disabled
		SpinButton b0 '' range=-100:100:0.01
		SpinButton b1 '' range=-100:100:0.01
		SpinButton b2 '' range=-100:100:0.01")
	
		grid.init(self, "drawing")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp := &self
		grid.c := &c.config
		grid.sample_rate = c.session.sample_rate()
		
		c.grid = &grid
		
		var ids = ["a1", "a2", "b0", "b1", "b2"]
		for id in ids
			event(id, on_change)
	
	func override __delete__()
		c.grid = nil
		
	func override update()
		set_float("a1", c.config.a1)
		set_float("a2", c.config.a2)
		set_float("b0", c.config.b0)
		set_float("b1", c.config.b1)
		set_float("b2", c.config.b2)
		grid.redraw()
	
	func mut on_change()
		c.config.a1 = get_float("a1")
		c.config.a2 = get_float("a2")
		c.config.b0 = get_float("b0")
		c.config.b1 = get_float("b1")
		c.config.b2 = get_float("b2")
		c.changed()

class PresetDialog extends hui.Dialog
	var bp: BiquadPanel&
	func __init__(_p: BiquadPanel)
		super.__init__("preset", 400, 100, _p.win, false)
		bp := &_p
		from_source("
Grid ? '' vertical
	Grid ? ''
		Label ? 'Type'
		ComboBox type 'Low Pass\\Hight Pass\\Low Shelf\\Hight Shelf\\Peak\\All Pass' expandx
		---|
		Label ? 'Frequency'
		SpinButton frequency '440' range=1:10000:0.1
		Label ? Hz
		---|
		Label ? 'Q'
		SpinButton q '10' range=0:100:0.01
		---|
		Label ? 'Gain'
		SpinButton gain '1' range=-30:30:0.1
		Label ? dB
	Grid ? '' buttonbar
		Button apply 'Apply'
")
		event("apply", on_apply)

	func mut on_apply()
		var p: BiquadFilter.Parameters
		var sample_rate: float = bp.c.session.sample_rate()
		var t = get_int("type")
		var freq = get_float("frequency")
		var q = get_float("q")
		var gain = get_float("gain")
		if t == 0
			p.create_low_pass(freq, q, sample_rate)
		else if t == 1
			p.create_high_pass(freq, q, sample_rate)
		else if t == 2
			p.create_low_shelf(freq, q, gain, sample_rate)
		else if t == 3
			p.create_high_shelf(freq, q, gain, sample_rate)
		else if t == 4
			p.create_peak(freq, q, gain, sample_rate)
		else if t == 5
			p.create_all_pass(freq, q, sample_rate)
		bp.c.config.from_filter(p)
		bp.c.changed()
		bp.update()

