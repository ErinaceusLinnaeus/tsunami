use tsunami.*

let AutoConfigSpeed = "range=0.1:2:0.001,scale=100,unit=%"

class Config extends Module.Config
	var speed: float
	func override reset()
		speed = 0.5

class SampleCounter
	var map: (i64,i64,float)[]
	var produced: i64 = 0
	var consumed: i64 = 0
	
	func mut reset(speed: float, hard: bool)
		if hard
			consumed = 0
			produced = 0
			map.clear()
		map.add([consumed, produced, speed])
	func mut produce(s_in: int, s_out: int, speed: float)
		consumed += s_in
		produced += s_out
		map.add([consumed, produced, speed])
		while len(map) > 20
			map.remove(0)
	func map_sample(s: i64) -> i64
		for i in 0:len(map)
			let m = map[len(map) - i - 1]
			if s > m[1]
				let d = i64(int(float(int(s - m[1])) * m[2]))
				return m[0] + d
		return 0

class ChangeSpeed extends AudioEffect
	var config: Config
	var op: BufferPitchShift.Operator
	var ring_buffer: owned![RingBuffer]
	var counter: SampleCounter
	
	func override __init__()
		ring_buffer = new RingBuffer(65536)
	
	func override reset_state()
		op.reset(1.0/config.speed, 0, 1.0)
		counter.reset(config.speed, true)
	
	func override on_config()
		op.reset(1.0/config.speed, 0, 1.0)
		counter.reset(config.speed, false)
	
	func override command(cmd: Module.Command, param: i64) -> i64?
		if cmd == Module.Command.SAMPLE_COUNT_MODE
			return int(Module.SampleCountMode.TRANSLATOR)
		if cmd == Module.Command.GET_SAMPLE_COUNT
			return counter.map_sample(param)
		return nil
	
	func override read(out buf: AudioBuffer) -> int
		for s in source.source
			let CHUNK_SIZE = 2048
			var chunk: AudioBuffer
			chunk.resize(CHUNK_SIZE)
			while ring_buffer.available() < len(buf)
				let r = s.read_audio(chunk)
				if r <= 0
					return r
				let p = op.process(chunk)
				ring_buffer.write(p)
				counter.produce(CHUNK_SIZE, len(p), config.speed)
		
			ring_buffer.read(buf)
			return len(buf)
		return Module.NO_SOURCE
