# Image = hui:copy
# Title[Deutsch] = Flanger

use tsunami.*

let AUTO_CONFIG_DELAY = "range=0:0.02:0.0001,scale=1000,unit=ms"
let AUTO_CONFIG_SPEED = "range=0:2:0.01,unit=Hz"
let AUTO_CONFIG_DEPTH = "range=0:1:0.001,scale=100,unit=%"


class PluginConfig extends Module.Config
	var delay: float
	var speed: float
	var depth: float
	func override reset()
		depth = 0.5
		speed = 0.3
		delay = 0.01


class Flanger extends AudioEffect
	var config: PluginConfig
	
	var buf_temp: AudioBuffer
	var offset: int
	func override reset_state()
		buf_temp.clear()
		offset = 0

	func do_flanger(out b: float[], out temp: float[])
		var p = offset % len(temp)
		let sample_rate = session.sample_rate()
	
		let f_a = (1 - 0.5 * config.depth) * config.delay
		let f_b = 0.5 * config.depth * config.delay
		let f_c = 1.0 / sample_rate * 2 * pi * config.speed
	
		for i=>bb in b
	
			# old value
			temp[p] = bb
		
			# shift
			let dt = f_a - cos((i + offset) * f_c) * f_b
			let dp = int(dt * sample_rate)
			var p2 = p - dp
			if p2 < 0
				p2 += len(temp)
		
			# add echo
			bb += temp[p2]
		
			p ++
			if p >= len(temp)
				p = 0

	
	func override process(out buf: AudioBuffer)
		let delay_samples = int(session.sample_rate() * config.delay + 1)
		buf_temp.set_channels(buf.channels)
		buf_temp.resize(delay_samples)
	
		for i=>c in buf.c
			do_flanger(buf.c[i], buf_temp.c[i])
	
		offset += len(buf)

