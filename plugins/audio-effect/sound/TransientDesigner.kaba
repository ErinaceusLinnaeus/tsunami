use tsunami.*
use special.Envelope.*

let AUTO_CONFIG_ATTACK = "range=-1:10:0.01,scale=100,unit=%"
let AUTO_CONFIG_SUSTAIN = "range=-1:10:0.01,scale=100,unit=%"
let AUTO_CONFIG_MIX = "range=0:1:0.01,scale=100,unit=%"

class Config extends Module.Config
	var attack: float
	var sustain: float
	var mix: float
	func override reset()
		attack = 2
		sustain = 0.2
		mix = 1.0

class TransientDesigner extends AudioEffect
	var config: Config
	
	var buf_fast, buf_att, buf_sus: AudioBuffer
	var env_fast, env_att, env_sus: Envelope
	
	func override on_config()
		env_fast.session := session
		env_fast.config_from_string(Module.VERSION_LEGACY, "(0.2 0 0.0001)")
		env_att.session := session
		env_att.config_from_string(Module.VERSION_LEGACY, "(0.02 0 0.0001)")
		env_sus.session := session
		env_sus.config_from_string(Module.VERSION_LEGACY, "(0.2 0 0.00000002)") # ~100ms release
	
	func override reset_state()
		env_fast.reset_state()
		env_att.reset_state()
		env_sus.reset_state()

	func do(out buf: float[], c: int, h_fast: float[], h_att: float[], h_sus: float[])
		
		for i in 0:len(buf)
			# gain?
			var gain: float = 0
			var hf = h_fast[i]
			var ha = h_att[i]
			var hs = h_sus[i]
			if hf > ha
				# attack
				gain += config.attack * (hf - ha)
			if hf < hs
				# sustain
				gain += config.sustain * (hs - hf)
			
			# apply gain and mix
			buf[i] = (config.mix * gain + 1) * buf[i]
			#buf[i] = gain*2
			#buf[i] = hs
			
	func override process(out buf: AudioBuffer)
		buf_fast = buf
		env_fast.process(buf_fast)
		buf_att = buf
		env_att.process(buf_att)
		buf_sus = buf
		env_sus.process(buf_sus)
		
		for i=>c in buf.c
			do(c, 0, buf_fast.c[i], buf_att.c[i], buf_sus.c[i])
