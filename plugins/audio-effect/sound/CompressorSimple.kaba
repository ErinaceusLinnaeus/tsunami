# Image = hui:properties
# Title[Deutsch] = Kompressor

use tsunami.*

const MIN_DB = -60.0

let AUTO_CONFIG_THRESHOLD = "range=-60:0,unit=db"
let AUTO_CONFIG_RATIO = "range=1:60"
let AUTO_CONFIG_ATTACK = "range=0:1:0.001,scale=1000,unit=ms"
let AUTO_CONFIG_RELEASE = "range=0:1:0.001,scale=1000,unit=ms"
let AUTO_CONFIG_SOFTNESS = "range=0:1:0.001,scale=100,unit=%"
let AUTO_CONFIG_UPWARD = ""

class CompressorConfig extends Module.Config
	var threshold: float
	var ratio: float
	var attack, release: float
	var softness: float
	var upward: bool

	func override reset()
		threshold = -20
		ratio = 4
		attack = 0.01
		release = 0.1
		softness = 0.5
		upward = false


class Compressor extends AudioEffect
	var config: CompressorConfig
	
	
	var gain_r, gain_l: float
	var squares_r: float[]
	var squares_l: float[]
	
	func override reset_state()
		gain_r = 1
		gain_l = 1
		squares_r.clear()
		squares_r.resize(70)
		squares_l.clear()
		squares_l.resize(70)

	var dgain_attack, dgain_release: float

	func compress(out b: float[], out squares: float[], out gain: float)
		var bmin = pow(10, MIN_DB/20)
		for i in 0:len(b)
		
			# in level (filtered)
			squares[i % len(squares)] = b[i]*b[i]
			var rms = sqrt(sum(squares) / len(squares) * 2)
			if config.attack < 0.00005 # = 0
				rms = abs(b[i])
			var in_level = MIN_DB
			if rms > bmin
				in_level = log(rms) / log(10) * 20
		
			# out level
			var out_level = in_level
			if config.upward
				if in_level > config.threshold
					out_level = 1 - (1 - in_level) / config.ratio
				else
					out_level = in_level - config.threshold / (config.ratio - 1)
			else
				if in_level > config.threshold
					out_level = config.threshold + (in_level - config.threshold) / config.ratio
			
			# slow gain changes
			var cur_gain = out_level - in_level
			if cur_gain > gain
				if config.release < 0.00005
					gain = cur_gain
				else
					gain += dgain_release
			else if cur_gain < gain
				if config.attack < 0.00005
					gain = cur_gain
				else
					gain -= dgain_attack
			
			# apply gain
			b[i] *= pow(10, gain / 20)

	func override process(out buf: AudioBuffer)
		dgain_attack = 10 / (config.attack * session.sample_rate())
		dgain_release = 10 / (config.release * session.sample_rate())
		
		compress(buf.c[0], squares_l, gain_l)
		if buf.channels > 1
			compress(buf.c[1], squares_r, gain_r)
		if buf.channels > 2
			session.e("CompressorSimple: channels>2")
