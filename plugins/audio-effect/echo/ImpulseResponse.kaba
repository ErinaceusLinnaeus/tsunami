use tsunami.*

let AUTO_CONFIG_SAMPLE = ""

func fold(x: float[], h: float[], out HH: complex[], out result: float[])
	var N = len(x)
	var K = len(h)
	
	# fft of input
	var xx = x
	xx.resize(N + K)
	var XX: complex[]
	fft.r2c(xx, XX)
	
	# fft of kernel
	if len(HH) != (N+K)/2+1
		#print("recalc HH")
		var hh = h
		hh.resize(N + K)
		fft.r2c(hh, HH)
	
	# convolution
	XX *= HH
	result.resize(N + K)
	fft.c2r_inv(XX, result)
	result /= N + K
	

func test()
	print("--------test")
	var x = [1.0, 1.0, 0.0, 1.0]
	var h = [0.5, 0.5, 0.0, 0.0]
	var result: float[]
	var HH: complex[]
	fold(x, h, HH, result)
	print(result)


class Folding extends AudioEffect
	class Config extends Module.Config
		var sample: shared[SampleRef]
		func override reset()
			sample = nil

	var config: Config

	var h: float[]
	var HH: complex[]
	
	var buf_overlap: AudioBuffer
	
	func override on_config()
		for s in config.sample
			h = s.origin.buf.c[0]
		else
			h = [1.0]
		reset_state()
	
	func override process(out buf: AudioBuffer)
		if not weak(config.sample)
			return
		
		buf_overlap.set_channels(buf.channels)
		
		# apply
		for mut i=>c in buf.c
			do(c, buf_overlap.c[i])
	
	func override reset_state()
		buf_overlap.clear()
		HH.clear()
	
	func mut do(out buf: float[], out overlap: float[])
		var y: float[]
		var N = len(buf)
		var K = len(h)
		
		var ttt: float[]
		fold(buf, h, HH, ttt)
		
		if len(overlap) < N
			overlap.resize(N)
		
		buf = ttt[:N]
		buf += overlap # [:N]
		
		# overlap = overlap[:-N]
		for i in N:len(overlap)
			overlap[i-N] = overlap[i]
		overlap.resize(len(overlap) - N)
		
		overlap.resize(K)
		overlap += ttt[N:]
