# Image = hui:add
# Title[Deutsch] = Metronom

use tsunami.*
use midisource.Metronome.*


func CreateMidiSourceX[T](session: Session, name: string) -> xfer[T]
	return CreateMidiSource(session, name) as xfer[T]


let AUTO_CONFIG_VOLUME = "volume"
let AUTO_CONFIG_BPM = "range=1:1000,sliderrange=10:200,step=0.1,square"
let AUTO_CONFIG_BEATS = "range=1:32"

class Metronome extends AudioSource
	class Config extends Module.Config
		var bpm: float
		var beats: int
		var volume: float
		func override reset()
			bpm = 90
			beats = 4
			volume = 0.3

	var config: Config
	var synth: shared[Synthesizer]
	var source: shared[MetronomeSource]
	
	func mut create_stuff()
		synth = CreateSynthesizer(session, "")
		source = CreateMidiSourceX[MetronomeSource](session, "Metronome") #weak(CreateMidiSource(session, "Metronome")) as MetronomeSource*
		for s in synth
			s.plug_in(0, source, 0)

	func override read(out buf: AudioBuffer) -> int
		for s in synth
			return s.port_out[0].read_audio(buf)
		return 0
			
	func override on_config()
		if not weak(source)
			create_stuff()
		for s in source
			s.config.volume = config.volume
			s.set_beats(config.beats, 1)
			s.set_bpm(config.bpm)
	
	func override reset_state()
		if not weak(source)
			create_stuff()
		for s in synth
			s.reset_state()
		for s in source
			s.reset_state()
