use tsunami.*
use helper.tone.*
#use MidiSource.Tone

# hopefully, soon, we will have recursive modules... then this will become obsolete!!!

let AUTO_CONFIG_PITCH = "pitch" #"0:10000:0.1:1:Hz"
let AUTO_CONFIG_VOLUME = "volume,range=0:1"


class SineSource extends AudioSource
	class Config extends Module.Config
		var pitch: float
		var volume: float
		func override reset()
			pitch = 64
			volume = 0.8

	var config: Config
	var offset: int
	var synth: shared[Synthesizer]
	var source: shared[MidiSource]
	
	func override reset_state()
		offset = 0
		source = CreateMidiSource(session, "Tone")
		synth = CreateSynthesizer(session, "")
		#dyn({"pitch":config.pitch, "volume":config.volume})
		for s in source
			s.config_from_string(Module.VERSION_LEGACY, "({{config.pitch}} {{config.volume}})")
			for ss in synth
				s.output >> ss.input

	func override read(out buf: AudioBuffer) -> int
		for s in synth
			return s.port_out[0].read_audio(buf)
		return 0
