use tsunami.*

func db_to_factor(db: float) -> float
	return pow(10, db/20)

func factor_to_db(f: float) -> float
	return log(f) / log(10) * 20


enum FilterType
	PEAK as "peak"
	#NOTCH as "notch"
	LOW_PASS as "low pass"
	HIGH_PASS as "high pass"
	LOW_SHELF as "low shelf"
	HIGH_SHELF as "high shelf"
	LOW_PASS_LINEAR
	HIGH_PASS_LINEAR
	ALL_PASS as "all pass"

#func filter_name(t: FilterType) -> string
#	if t == FilterType.PEAK
#		return "Peak"
#	if t == FilterType.LOW_PASS
#		return "Low pass"
#	if t == FilterType.HIGH_PASS
#		return "High pass"
#	if t == FilterType.LOW_SHELF
#		return "Low shelf"
#	if t == FilterType.HIGH_SHELF
#		return "High shelf"
#	return "???"


struct BiquadFilter

	# mostly config parameters
	struct Parameters
		var a, b: float[3]
	
		func apply(out x: float[], out prev_x: float[2], out prev_y: float[2])
			var y: float[]
			y.resize(len(x))
			if len(x) >= 2
				# overlap
				y[0] = b[0] * x[0] + b[1] * prev_x[1] + b[2] * prev_x[0] - a[1] * prev_y[1] - a[2] * prev_y[0]
				y[1] = b[0] * x[1] + b[1] * x[0]      + b[2] * prev_x[1] - a[1] * y[0]      - a[2] * prev_y[1]
				# main chunk
				for i in 2:len(x)
					y[i] = b[0] * x[i] + b[1] * x[i-1] + b[2] * x[i-2] - a[1] * y[i-1] - a[2] * y[i-2]
				# save overlap
				for i in 0:2
					prev_x[i] = x[len(x) - 2 + i]
					prev_y[i] = y[len(y) - 2 + i]
			else if len(x) == 1
				y[0] = b[0] * x[0] + b[1] * prev_x[1] + b[2] * prev_x[0] - a[1] * prev_y[1] - a[2] * prev_y[0]
				prev_x[0] = prev_x[1]
				prev_x[1] = x[0]
				prev_y[0] = prev_y[1]
				prev_y[1] = y[0]
			x = y
			
		func __init__()
			a[0] = 0 # ignored
			a[1] = 0
			a[2] = 0
			b[0] = 1
			b[1] = 0
			b[2] = 0
		func gain(f: float, sample_rate: float) -> float
			var z: complex
			z.x = cos(2*pi*f/sample_rate)
			z.y = sin(2*pi*f/sample_rate)
			var H = complex(b[0], 0) + b[1]*z + b[2]*z*z
			var y = complex(1,0) + a[1]*z + a[2]*z*z
		
			var fac = H.abs() / y.abs()
			return factor_to_db(fac)
		func phase_shift(f: float, sample_rate: float) -> float
			var z: complex
			z.x = cos(2*pi*f/sample_rate)
			z.y = sin(2*pi*f/sample_rate)
			var H = complex(b[0], 0) + b[1]*z + b[2]*z*z
			var y = complex(1,0) + a[1]*z + a[2]*z*z
			var zz = H * y.bar()
			return atan2(zz.y, zz.x) * 10
	
		func mut create(mode: FilterType, freq: float, q: float, gain: float, sample_rate: float)
			if mode == FilterType.LOW_PASS
				create_low_pass(freq, q, sample_rate)
			else if mode == FilterType.HIGH_PASS
				create_high_pass(freq, q, sample_rate)
			else if mode == FilterType.PEAK
				create_peak(freq, q, gain, sample_rate)
			#else if mode == FilterType.NOTCH
#				create_notch(freq, q, gain, sample_rate)
			else if mode == FilterType.LOW_SHELF
				create_low_shelf(freq, q, gain, sample_rate)
			else if mode == FilterType.HIGH_SHELF
				create_high_shelf(freq, q, gain, sample_rate)
			else if mode == FilterType.LOW_PASS_LINEAR
				create_low_pass_linear(freq, sample_rate)
			else if mode == FilterType.HIGH_PASS_LINEAR
				create_high_pass_linear(freq, sample_rate)
			else if mode == FilterType.ALL_PASS
				create_all_pass(freq, q, sample_rate)

		func mut create_peak(f_res: float, Q: float, gain: float, sample_rate: float)
			var g = db_to_factor(gain)
			var c = 1 / tan(pi * f_res / sample_rate)
			var B = 1 / Q
			var a0 = c*c + B*c + 1
			b[0] = (c*c + B*c*g + 1) / a0
			a[1] = (2 - 2*c*c) / a0
			b[1] = a[1]
			a[2] = (c*c - B*c + 1) / a0
			b[2] = (c*c - B*g*c + 1) / a0

		func mut create_notch(f_res: float, Q: float, sample_rate: float)
			var c = tan(pi * f_res / sample_rate)
			var a0 = 1 + c/Q + c*c
			b[0] = (1 + c*c) / a0
			b[1] = 2 * (c*c - 1) / a0
			b[2] = b[0]
			a[1] = b[1]
			a[2] = (1 - c/Q + c*c) / a0

		func mut create_low_pass(f_res: float, _q: float, sample_rate: float)
			#b[0] = 1 / (1 + sample_rate/f_res/2/pi)
#			b[1] = 0
#			b[2] = 0
#			a[1] = b[0]-1
#			a[2] = 0
			var q = sqrt(2) #20 / _q
			var c = tan(pi * f_res / sample_rate)
			var a0 = 1 + c*q + c*c
			b[0] = c*c / a0
			b[1] = 2 * b[0]
			b[2] = b[0]
			a[1] = 2 * (c*c - 1) / a0
			a[2] = (1 - c*q + c*c) / a0

		func mut create_high_pass(f_res: float, _q: float, sample_rate: float)
			#b[0] = 1 / (1 + f_res*2*pi / sample_rate)
#			b[1] = -b[0]
#			b[2] = 0
#			a[1] = -b[0]
#			a[2] = 0
			var q = sqrt(2) #20 / _q
			var c = tan(pi * f_res / sample_rate)
			var a0 = 1 + c*q + c*c
			b[0] = 1 / a0
			b[1] = - 2 * b[0]
			b[2] = b[0]
			a[1] = 2 * (c*c - 1) / a0
			a[2] = (1 - c*q + c*c) / a0

		func mut create_low_shelf(f_res: float, q: float, gain: float, sample_rate: float)
			var V = db_to_factor(abs(gain))
			var c = tan(pi * f_res / sample_rate)
		
			if gain > 0
				var a0 = 1 + sqrt(2)*c + c*c
				b[0] = (1 + sqrt(2*V)*c + V*c*c) / a0
				b[1] = 2*(V*c*c - 1) / a0
				b[2] = (1-sqrt(2*V)*c + V*c*c) / a0
				a[1] = 2*(c*c - 1) / a0
				a[2] = (1-sqrt(2)*c + c*c) / a0
			else
				var a0 = 1 + sqrt(2*V)*c + V*c*c
				b[0] = (1 + sqrt(2)*c + c*c) / a0
				b[1] = 2*(c*c - 1) / a0
				b[2] = (1 - sqrt(2)*c + c*c) / a0
				a[1] = 2*(V*c*c - 1) / a0
				a[2] = (1 - sqrt(2*V)*c + V*c*c) / a0
		
			#float c = 2 * sample_rate#1 / tan(pi * f_res / sample_rate)
#			float w = 2*pi*f_res
#			float ww = w * (B+1)
#			float a0 = w+ww
#			b[0] = (c+ww) / a0
#			b[1] = (ww-c) / a0
#			b[2] = 0
#			a[1] = (w-c) / a0
#			a[2] = 0

		func mut create_high_shelf(f_res: float, q: float, gain: float, sample_rate: float)
			var V = db_to_factor(abs(gain))
			var c = tan(pi * f_res / sample_rate)
		
			if gain > 0
				var a0 = 1 + sqrt(2)*c + c*c
				b[0] = (V + sqrt(2*V)*c + c*c) / a0
				b[1] = 2*(c*c - V) / a0
				b[2] = (V - sqrt(2*V)*c + c*c) / a0
				a[1] = 2*(c*c - 1) / a0
				a[2] = (1 - sqrt(2)*c + c*c) / a0
			else
				var a0 = V + sqrt(2*V)*c + c*c
				b[0] = (1 + sqrt(2)*c + c*c) / a0
				b[1] = 2*(c*c - 1) / a0
				b[2] = (1 - sqrt(2)*c + c*c) / a0
				a[1] = 2*(c*c - V) / a0
				a[2] = (V - sqrt(2*V)*c + c*c) / a0
		
		
		# y[i] := α * (y[i-1] + x[i] - x[i-1])
		func mut create_high_pass_linear(f_res: float, sample_rate: float)
			var RC = 1 / (2 * pi * f_res)
			var dt = 1.0 / sample_rate
			var α = RC / (RC + dt)
			b[0] = α
			b[1] = -α
			b[2] = 0
			a[1] = -α
			a[2] = 0

		# y[i] := α * x[i] + (1-α) * y[i-1]
		func mut create_low_pass_linear(f_res: float, sample_rate: float)
			var RC = 1 / (2 * pi * f_res)
			var dt = 1.0 / sample_rate
			var α = dt / (RC + dt)
			b[0] = α
			b[1] = 0
			b[2] = 0
			a[1] = α - 1
			a[2] = 0
	
		func mut create_all_pass(freq: float, q: float, sample_rate: float)
			var phi = 2 * pi * freq / sample_rate
			var l = 1 - phi / q
			create_all_pass_z(l * complex(cos(phi), sin(phi)))

		func mut create_all_pass_z(z: complex)
			var l = z.abs()
			b[0] = l*l
			b[1] = - 2 * z.x
			b[2] = 1
			a[1] = - 2 * z.x
			a[2] = l*l


	struct ChannelState
		var prev_x, prev_y: float[2]
		func __init__()
			reset()
		func mut reset()
			for i in 0:2
				prev_x[i] = 0
				prev_y[i] = 0
			
	var params: Parameters
	var state: ChannelState[]

	func __init__()
		reset()
	func mut reset()
		for mut s in state
			s.reset()
	func mut create(mode: FilterType, freq: float, q: float, gain: float, _sample_rate: float)
		params.create(mode, freq, q, gain, _sample_rate)
	func mut apply(out buf: AudioBuffer)
		state.resize(buf.channels)
		for mut i=>c in buf.c
			# FIXME: maybe we should have len(buf.c)==buf.channels ?!?
			#   why do we have that, anyways?
			if i >= buf.channels
				break
			params.apply(c, state[i].prev_x, state[i].prev_y)



# filter with a state
class BiquadMultiFilter
	var f: BiquadFilter[]

	func __init__()
		reset()
	func mut reset()
		for mut ff in f
			ff.reset()
	func mut create(mode: FilterType, freq: float[], q: float[], gain: float[], _sample_rate: float)
		f.resize(len(freq))
		for i in 0:len(freq)
			f[i].create(mode, freq[i], q[i], gain[i], _sample_rate)
	func mut apply(out buf: AudioBuffer)
		for mut ff in f
			ff.apply(buf)
