use hui
use tsunami.*

# c(t) = A*t³ + B*t² + C*t + D
# c(0) = p0
# c'(0) = t0
# c(1) = p1
# c'(1) = t1
func draw_spline(p: hui.Painter, p0: vec2, t0: vec2, p1: vec2, t1: vec2)
	var cc: vec2[]
	var A = t1+t0+2*(p0-p1)
	var B = -2*t0-t1 + 3*(p1-p0)
	for t in 0:1:0.05
		cc.add(p0 + t0*t + B*t^2 + A*t^3)
	p.draw_lines(cc)

func spline_pos(p0: vec2, t0: vec2, p1: vec2, t1: vec2, t: float) -> vec2
	var A = t1+t0+2*(p0-p1)
	var B = -2*t0-t1 + 3*(p1-p0)
	return p0 + t0*t + B*t^2 + A*t^3

func spline_vel(p0: vec2, t0: vec2, p1: vec2, t1: vec2, t: float) -> vec2
	var A = t1+t0+2*(p0-p1)
	var B = -2*t0-t1 + 3*(p1-p0)
	return t0 + 2*B*t + 3*A*t^2


#func cool_color(index: int) -> color
#	let col = theme.neon(index)
#	#return color.interpolate(col, theme.text_soft2, 0.3)
#	return col



enum Align
	LEFT = -1
	CENTER = 0
	RIGHT = 1

func extern draw_boxed_str(p: hui.Painter, pos: vec2, str: string, col_text: color, col_bg: color, align: Align = Align.RIGHT)

func extern draw_arrow(p: hui.Painter, start: vec2, end: vec2)

