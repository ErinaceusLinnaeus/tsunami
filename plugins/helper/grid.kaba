use hui
use tsunami.*
use tone.*

struct Curve
	var col, col_below: color
	func __init__()
		col = colors.text_soft1
		col_below = color(0.3, 0.3, 1, 0.3)
	func virtual get(x: float) -> float
	func virtual get_list(xx: float[]) -> float[]
		var r: float[]
		r.resize(len(xx))
		for i=>x in xx
			r[i] = get(x)
		return r

func log2lin(f: float, f_min: float, f_max: float) -> float
	return exp(f * log(f_max / f_min)) * f_min

func lin2log(f: float, f_min: float, f_max: float) -> float
	return log(f / f_min) / log(f_max / f_min)

struct GridTick
	var value, weight: float
	var label: string

struct GridPartition
	var tick: GridTick[]

#enum
#	UNIT_NONE
#	UNIT_TIME
#	UNIT_PITCH
#	UNIT_NOTE
#	UNIT_DB
#	UNIT_PERCENT

struct AxisData #extends Object
	var val_min, val_max: float
	var val_min_min, val_max_max: float
	var log_scale: bool
	var unit: string
	

class GridAxis extends Object #AxisData
	var data: AxisData
	var offset, size: float
	var area: rect
	var min_label_dist: float
	var freq_as_pitch: bool
	var grid: Grid&
	var menu: owned[hui.Menu]
	var _id: string
	
	#override void __init__()
	func override __init__()
		_id = p2s(&self)
		freq_as_pitch = false
		set(0, 1, false, "")
	
	func mut set_events()
		grid.panel.event("{{_id}}-mode-freq-hz", on_mode_freq_hz)
		grid.panel.event("{{_id}}-mode-pitch", on_mode_pitch)
	
	func mut set(_val_min: float, _val_max: float, _log: bool, _unit: string)
		#data = (_val_min, _val_max, _val_min, _val_max, _log, _unit)
		data.val_min = _val_min
		data.val_max = _val_max
		data.val_min_min = _val_min
		data.val_max_max = _val_max
		data.log_scale = _log
		data.unit = _unit
	
	func rel2val(__v: float) -> float
		if data.log_scale
			return log2lin(__v, data.val_min_min, data.val_max_max)
		return __v * (data.val_max_max - data.val_min_min) + data.val_min_min
		
	func project(__v: float) -> float
		if data.log_scale
			return lin2log(__v, data.val_min, data.val_max) * size + offset
		return ((__v - data.val_min) / (data.val_max - data.val_min)) * size + offset

	func unproject(__v: float) -> float
		if data.log_scale
			return log2lin((__v - offset) / size, data.val_min, data.val_max)
		return (__v - offset) / size * (data.val_max - data.val_min) + data.val_min
	
	func mut zoom(p: float, dz: float)
		var m = unproject(p)
		if data.log_scale
			data.val_min = clamp(exp(log(m) + (log(data.val_min) - log(m)) * pow(0.9, dz)), data.val_min_min, data.val_max_max)
			data.val_max = clamp(exp(log(m) + (log(data.val_max) - log(m)) * pow(0.9, dz)), data.val_min_min, data.val_max_max)
		else
			data.val_min = clamp(m + (data.val_min - m) * pow(0.9, dz), data.val_min_min, data.val_max_max)
			data.val_max = clamp(m + (data.val_max - m) * pow(0.9, dz), data.val_min_min, data.val_max_max)
		grid.redraw()
		
	func mut on_left_button_down()
		pass
		
	func mut on_right_button_down()
		var m = new hui.Menu(grid.panel)
		if data.unit == "Hz"
			m.add("Frequency (Hz)", "{{_id}}-mode-freq-hz")
			m.add("Pitch", "{{_id}}-mode-pitch")
		else if data.unit == ""
			m.add("no unit", "-dummy-")
		else
			m.add("unit: {{data.unit}}", "-dummy-")
		m.popup(grid.panel)
	
	func mut on_mode_freq_hz()
		freq_as_pitch = false
		grid.redraw()
	func mut on_mode_pitch()
		freq_as_pitch = true
		grid.redraw()
	
	func mut on_mouse_wheel(mm: float)
		for w in grid.panel.win
			if w.get_key(hui.KEY_CONTROL)
				zoom(mm, hui.get_event().scroll.y)

	func get_lin_partition() -> GridPartition
		var d = (data.val_max - data.val_min) / size * 150
		var r: GridPartition
		var step: float = 1
		var e = log(abs(abs(d))) / log(10)
		var e_floor = float(int(e))
		if e < 0
			e_floor -= 1
		step = pow(10, e_floor)
		var factor = d / step
		var decimals = int(max(-e_floor, 0))
		var min = float(int(data.val_min / step)) * step
		var max = data.val_max
		
		var vv = min
		while vv <= max and step > 0
			r.tick.add([vv, 0.5, "{{vv.str2(decimals)}} {{data.unit}}"])
			if factor < 3
				r.tick.add([vv + step / 2, 0.2, ""])
			vv += step
		
		return r
		
	func get_log_partition() -> GridPartition
		let pixel_per_decade = abs(size / log(data.val_max / data.val_min)) * log(10)
		let size_param = pixel_per_decade / min_label_dist
		var r: GridPartition
		let e_min = int(log(abs(abs(data.val_min))) / log(10))
		let e_max = int(log(abs(abs(data.val_max))) / log(10)) + 1
		for e in e_min:e_max
			var vv0 = pow(10, e)
			for i in 1:10
				var vv = vv0 * i
				if (vv >= data.val_min) and (vv <= data.val_max)
					var label: string
					var show = false
					if (i == 1)
						show = true
					if (i == 3) and (size_param > 2)
						show = true
					if ((i == 2) or (i == 5)) and (size_param > 4)
						show = true
					if show
						label = "{{vv|.0}} {{data.unit}}"
					r.tick.add([vv, exp(-(i+1)*0.07), label])
				vv = vv0 * 1.5
				if (i == 1) and (vv >= data.val_min) and (vv <= data.val_max)
					r.tick.add([vv, 0.2, ""])
		return r
		
	func get_pitch_partition() -> GridPartition
		var r: GridPartition
		var pitch_min = freq_to_pitch(data.val_min)
		var pitch_max = freq_to_pitch(data.val_max)
		var density = (pitch_max - pitch_min) / area.width()
		#print(density)
		
		for p in int(pitch_min):int(pitch_max+1)
			var rp = pitch_to_rel(p)
			var tt: GridTick
			tt.value = pitch_to_freq(p)
			var xxx = 0.03
			tt.weight = 0.1
			if rp in [2,5,7,11]
				xxx = 0.06
				tt.weight = 0.2
			if rp in [4,9]
				xxx = 0.25
				tt.weight = 0.4
			if rp == 0
				xxx = 10000
				tt.weight = 1.0
			if density < xxx / 1.6
				tt.label = pitch_name(p)
			#else
			#	tt.weight = tt.weight * 0.7
			
			tt.weight = tt.weight * clamp(1 - density / xxx, 0, 1)#min(1.0, pow(xxx, 2))
			#if density < xxx
			r.tick.add(tt)
		return r
		
	func get_partition() -> GridPartition
		if data.log_scale
			if freq_as_pitch
				return get_pitch_partition()
			return get_log_partition()
		return get_lin_partition()

class Grid extends Object
	var allow_bg: bool
	var x0, y0: float
	var plot_area: rect
	#var x, y, w, h: float
	
	var panel: hui.Panel&
	var id: string
	var m: vec2
	
	var x_axis, y_axis: GridAxis
	
	var col_bg: color
	var col_grid: color
	var col_line: color
	var col_text: color
	var col_hover: color
	var col_sel: color

	
	func mut data_init()
		col_grid = colors.grid
		col_text = colors.text
		col_line = colors.text_soft1
		col_bg = colors.background
		col_hover = colors.hover
		col_sel = colors.selection
		allow_bg = true
		x_axis.grid := &self
		y_axis.grid := &self
		x_axis.min_label_dist = 60
		y_axis.min_label_dist = 30

	func project2(z: vec2) -> vec2
		return vec2(x_axis.project(z.x), y_axis.project(z.y))

	func project3(z: vec3) -> vec3
		return vec3(x_axis.project(z.x), y_axis.project(z.y), z.z)

	func unproject2(z: vec2) -> vec2
		return vec2(x_axis.unproject(z.x), y_axis.unproject(z.y))

	func unproject3(z: vec3) -> vec3
		return vec3(x_axis.unproject(z.x), y_axis.unproject(z.y), z.z)
	
	
	func draw_axis_y(c: hui.Painter, part: GridPartition)
		for t in part.tick
			c.set_color(color.interpolate(col_bg, col_grid, t.weight))
			var yy = y_axis.project(t.value)
			if yy < y_axis.area.y1 or yy > y_axis.area.y2
				continue
			c.draw_line([plot_area.x1, yy], [plot_area.x2, yy])
			if len(t.label) > 0
				c.set_color(col_line)
				c.draw_line([plot_area.x1, yy], [plot_area.x1 + 6, yy])
				c.draw_str([x0 + 2, yy - 3], t.label)
	
	func draw_axis_x(c: hui.Painter, part: GridPartition)
		for t in part.tick
			c.set_color(color.interpolate(col_bg, col_grid, t.weight))
			var xx = x_axis.project(t.value)
			if xx < x_axis.area.x1 or xx > x_axis.area.x2
				continue
			c.draw_line([xx, plot_area.y1], [xx, plot_area.y2])
			if len(t.label) > 0
				c.set_color(col_line)
				c.draw_line([xx, plot_area.y2 - 6], [xx, plot_area.y2])
				c.draw_str([xx - 8, plot_area.y2 + 8], t.label)
	
	func get_plot_region(_x0: float, _y0: float, _w: float, _h: float) -> rect
		return rect(_x0 + 40, _x0 + _w - 3, _y0 + 3, _y0 + _h -20)

	func mut draw_background(c: hui.Painter, _x0: float, __y0: float, _w: float, _h: float)
		var _y0 = __y0
	
		x0 = _x0
		y0 = _y0 + 3
	
		plot_area = get_plot_region(_x0, _y0, _w, _h)
		_y0 += 3
		var x = plot_area.x1
		var y = plot_area.y1
		var w = plot_area.width()
		var h = plot_area.height()
		
		x_axis.offset = x
		x_axis.size = w
		x_axis.area = rect(x, x+w, y+h, _h)
		y_axis.offset = y + h
		y_axis.size = -h
		y_axis.area = rect(_x0, x, _y0, y+h)
		
		# background
		if allow_bg
			c.set_color(col_bg)
			c.draw_rect(plot_area)
		c.set_line_width(0.9)
		c.set_font_size(7)
		var part = x_axis.get_partition()
		draw_axis_x(c, part)
		part = y_axis.get_partition()
		draw_axis_y(c, part)
	
	func draw_curve(c: hui.Painter, fi: FloatInterpolator, fill_below: bool)
		var pp: vec2[]
		var tt = range(0, 1, 0.003)
		var yy = fi.get_list(tt)
		for i=>t in tt
			var zz = project2([x_axis.rel2val(t), yy[i]])
			pp.add(zz)
		if fill_below
			pp.add([plot_area.x2, plot_area.y2])
			pp.add([plot_area.x1, plot_area.y2])
			c.set_color(color(0.3, 0.3, 1, 0.3))
			c.draw_polygon(pp)
			pp.resize(len(pp) - 2)
		c.set_line_width(2)
		c.set_color(col_line)
		c.draw_lines(pp)
	
	func draw_curve_c(c: hui.Painter, curve: Curve, fill_below: bool)
		var tt, yy: float[]
		var pp: vec2[]
		tt = range(0, 1, 0.003)
		#yy = curve.get_list(tt)
		for i=>t in tt
			var x = x_axis.rel2val(t)
			var y = curve.get(x)
			var zz = project2([x, y])
			pp.add(zz)
		if fill_below
			pp.add([plot_area.x2, plot_area.y2])
			pp.add([plot_area.x1, plot_area.y2])
			c.set_color(curve.col_below)
			c.draw_polygon(pp)
			pp.resize(len(pp) - 2)
		c.set_line_width(2)
		c.set_color(curve.col)
		c.draw_lines(pp)
	
	func draw_curve_b(c: hui.Painter, _p: vec2[], fill_below: bool, col: color)
		var pp: vec2[]
		for p in _p
			pp.add(project2(p))
		if fill_below
			pp.add([plot_area.x2, plot_area.y2])
			pp.add([plot_area.x1, plot_area.y2])
			var col2 = col
			col2.a = 0.3
			c.set_color(col2)
			c.draw_polygon(pp)
			pp.resize(len(pp) - 2)
		c.set_line_width(0.9)
		c.set_color(col)
		c.draw_lines(pp)
	
	
	func point_color(selected: bool, hover: bool) -> color
		if hover
			return color.interpolate(col_hover, col_line, 0.0)
		if selected
			return color.interpolate(col_sel, col_line, 0.5)#color(0.7, 0, 0, 1)
		return col_line
	
	func draw_point_xy(c: hui.Painter, x: float, y: float, selected: bool, hover: bool)
		let z = vec2(x, y)
		draw_point2(c, z, selected, hover)
	
	func draw_point2(c: hui.Painter, p: vec2, selected: bool, hover: bool)
		let pp = project2(p)
		c.set_color(point_color(selected, hover))
		var radius = 3.0
		if hover
			radius = 5.0
		c.draw_circle(pp, radius)
	
	func draw_point3(c: hui.Painter, p: vec3, selected: bool, hover: bool)
		let pp = project3(p)
		c.set_color(point_color(selected, hover))
		var radius = 3.0
		if hover
			c.draw_str([pp.x, pp.y - 20], "{{pp.z|.1}}")
			radius = 5.0
		c.draw_circle(pp._xy, radius)
	
	func draw_line2(c: hui.Painter, p0: vec2, p1: vec2, selected: bool, hover: bool)
		let pp0 = project2(p0)
		let pp1 = project2(p1)
		c.set_color(col_line)
		var radius = 3.0
		if hover
			c.set_color(color.RED)
			radius = 4.0
		else if selected
			c.set_color(color(0.7, 0, 0, 1))
		c.draw_line(pp0, pp1)
	
	func get_mouse2() -> vec2
		return unproject2(hui.get_event().mouse)
	
	func get_mouse3(z: float) -> vec3
		let mx = hui.get_event().mouse.x
		let my = hui.get_event().mouse.y
		return unproject3(vec3(mx, my, z))
		
	func mouse_over_point2(q: vec2) -> bool
		let p = project2(q)
		return len(hui.get_event().mouse - p) <= 7
		
	func mouse_over_point3(q: vec3) -> bool
		return mouse_over_point2(q._xy)

		

	
	func mut on_draw_all(c: hui.Painter)
		let w = float(c.width)
		let h = float(c.height)

		draw_background(c, 0, 0, w, h)
		c.clip(plot_area)
		on_draw(c)
	
	func redraw()
		panel.redraw(id)
	
	func mut update_mouse()
		m = hui.get_event().mouse
	
	func mut on_left_button_down_all()
		update_mouse()
		if plot_area.inside(m)
			on_left_button_down()
		else
			on_left_button_down_outside()
		if x_axis.area.inside(m)
			x_axis.on_left_button_down()
		if y_axis.area.inside(m)
			y_axis.on_left_button_down()
	
	func mut on_left_button_up_all()
		update_mouse()
		if plot_area.inside(m)
			on_left_button_up()
	
	func mut on_right_button_down_all()
		update_mouse()
		if plot_area.inside(m)
			on_right_button_down()
		if x_axis.area.inside(m)
			x_axis.on_right_button_down()
		if y_axis.area.inside(m)
			y_axis.on_right_button_down()
	
	func mut on_right_button_up_all()
		update_mouse()
		if plot_area.inside(m)
			on_right_button_up()
	
	func mut on_mouse_move_all()
		update_mouse()
		#if plot_rect.inside(mx, my)
		on_mouse_move()
	
	func mut on_mouse_wheel_all()
		update_mouse()
		if plot_area.inside(m)
			on_mouse_wheel()
		if x_axis.area.inside(m)
			x_axis.on_mouse_wheel(m.x)
		if y_axis.area.inside(m)
			y_axis.on_mouse_wheel(m.y)
	
	func mut on_mouse_leave_all()
		update_mouse()
		on_mouse_leave()
		# TODO...keep track
	
	func mut on_key_down_all()
		on_key_down()

	func mut init(_panel: hui.Panel, _id: string)
		data_init()
		panel := &_panel
		id = _id
		panel.event_x(id, "hui:draw", on_draw_all)
		panel.event_x(id, "hui:left-button-down", on_left_button_down_all)
		panel.event_x(id, "hui:left-button-up", on_left_button_up_all)
		panel.event_x(id, "hui:right-button-down", on_right_button_down_all)
		panel.event_x(id, "hui:right-button-up", on_right_button_up_all)
		panel.event_x(id, "hui:mouse-move", on_mouse_move_all)
		panel.event_x(id, "hui:mouse-wheel", on_mouse_wheel_all)
		#panel.event_x(id, "hui:mouse-enter", on_mouse_enter_all)
		panel.event_x(id, "hui:mouse-leave", on_mouse_leave_all)
		panel.event_x(id, "hui:key-down", on_key_down_all)
		x_axis.set_events()
		y_axis.set_events()
	
	func virtual mut on_draw(c: hui.Painter)
	func virtual mut on_left_button_down()
	func virtual mut on_left_button_down_outside()
	func virtual mut on_left_button_up()
	func virtual mut on_right_button_down()
	func virtual mut on_right_button_up()
	func virtual mut on_mouse_move()
	func virtual mut on_mouse_wheel()
	func virtual mut on_key_down()
	#func virtual mut on_mouse_enter()
	func virtual mut on_mouse_leave()
