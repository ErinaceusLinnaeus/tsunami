# Image = hui:media-play
# Title[Deutsch] = Oszilloskop
use hui
use tsunami.*

const NUM_SAMPLES = 4096

class TriggerPanel extends ConfigPanel
	var override c: Trigger&
	
	func override __init__(_osci: Module)
		from_source("
Grid ? '' vertical
	DrawingArea area '' height=200 expandy
	Grid ? ''
		Label l-threshold 'Threshold' right disabled
		SpinButton threshold '' range=0:1:0.01 expandx
		---|
		Label l-blocking 'Blocking' right disabled
		SpinButton blocking '' range=0:1000
		Label ? 'ms'")
		
		event_x("area", "hui:draw", on_draw)
		event("threshold", on_threshold)
		event("blocking", on_blocking)
		
		c.out_changed >> create_sink(on_update)
	
	func override update()
		set_float("threshold", c.config.threshold)
		set_float("blocking", c.config.blocking * 1000)
	
	func mut on_update()
		redraw("area")
	
	func mut on_threshold()
		c.config.threshold = get_float("threshold")
		changed()
	
	func mut on_blocking()
		c.config.blocking = get_float("blocking") / 1000
		changed()
	
	func mut on_draw(p: hui.Painter)
		var w = p.width
		var h = p.height
		
		p.set_color(theme.background)
		p.draw_rect([0, w, 0, h])
		
		var curve_before, curve_after: float[]
		c.lock()
		curve_before = c.curve_before
		curve_after = c.curve_after
		c.unlock()
		
		p.set_line_width(0.7)
		p.set_color(color(0,1,0, 0.5))
		p.draw_line([0,h/2], [w,h/2])
		p.draw_line([w/2,0], [w/2,h])
		
		p.set_color(color(0,1,0, 1))
		p.set_line_width(1.5)
		var z: vec2[]
		for i=>v in curve_before
			z.add(vec2(w/2 - len(curve_before) + i, h/2 - h * v / 2))
		for i=>v in curve_after
			z.add(vec2(w/2 + i, h/2 - h * v / 2))
		p.draw_lines(z)

class TriggerConfig extends Module.Config
	var threshold: float
	var blocking: float
	
	func override reset()
		threshold = 0.5
		blocking = 0.1

class Trigger extends AudioVisualizer
	var curve_before: float[]
	var curve_after: float[]
	var blocked: int
	
	var config: TriggerConfig
	
	func override reset_state()
		blocked = -1
		curve_before.clear()
		curve_after.clear()
	
	func override process(buf: AudioBuffer)

		for i=>b in buf.c[0]
			if blocked < 0
				if abs(b) > config.threshold
					# start trigger
					blocked = int(config.blocking * session.sample_rate())
					curve_before = buf.c[0][:i]
					curve_after = buf.c[0][i:]
			else
				blocked --
		
	func override create_panel() -> xfer[ConfigPanel]
		return new TriggerPanel(self)

