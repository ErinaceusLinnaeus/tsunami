use common.*

let MAX_PITCH = 128


struct MidiNote as shared
	var range: Range
	var pitch: f32
	var volume: f32
	var stringno = -1
	var clef_position = -1
	var modifier = 0
	var flags = 0
	func __init__()
	func __init__(r: Range, _pitch: f32, _volume: f32)
		range = r
		pitch = _pitch
		volume = _volume
	func extern mut set(mask: i32)
	func extern is(mask: i32) -> bool
	func extern copy(offset: i32) -> xfer[MidiNote]

struct MidiEvent
	var pos: i32
	var pitch: f32
	var volume: f32
	var flags = 0
	var stringno = -1
	var clef_position = -1
	var raw: i64
	func __init__()
	func __init__(_pos: i32, _pitch: f32, _volume: f32)
		pos = _pos
		pitch = _pitch
		volume = _volume
	func extern is_note_on() -> bool
	func extern is_note_off() -> bool
	func extern is_special() -> bool
	func __str__() -> string
		return "({{pos}}, {{pitch}}, {{volume}})"

struct MidiEventBuffer extends MidiEvent[]
	var samples: i32
	func extern override __init__()
	func extern get_notes(r: Range) -> MidiNoteBuffer
	func extern get_events(r: Range) -> MidiEvent[]
	func extern get_range() -> Range
	func mut add_note(n: MidiNote)
		add(MidiEvent(n.range.offset, n.pitch, n.volume))
		add(MidiEvent(n.range.end(), n.pitch, 0))
	func extern mut add_metronome_click(pos: i32, level: i32, volume: f32)

struct MidiNoteBuffer extends shared![MidiNote][]
	var samples: i32
	func extern override __init__()
	func extern override __delete__()
	#extern selfref MidiNoteBuffer get_notes(Range r)
	func extern selfref get_notes(r: Range) -> MidiNote&[]
	func extern selfref get_events(r: Range) -> MidiEvent[]
	func extern get_range() -> Range


struct Instrument
	var type: i32
	var string_pitch: i32[]
	func __init__()
	func extern name() -> string
	func extern static enumerate() -> Instrument[]
	func static get(name: string) -> Instrument
		# good enough :P
		for i in enumerate()
			if i.name() == name
				return i
		return Instrument()
