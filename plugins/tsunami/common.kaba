
let DEFAULT_SAMPLE_RATE = 44100

enum SignalType
	AUDIO
	TIME
	MIDI
	AUDIO_MONO
	AUDIO_STEREO
	GROUP


func extern db2amp(db: f32) -> f32
func extern amp2db(amp: f32) -> f32


class obs
	class source
		func extern __rshift__(s: sink)
	
	class sink


struct Range
	var offset, length: i32
	func extern start() -> i32
	func extern end() -> i32
	func inside(pos: i32) -> bool
		return pos >= offset and pos < offset + length
	func __contains__(pos: int) -> bool
		return pos >= offset and pos < offset + length
	func extern overlaps(o: Range) -> bool
	func extern covers(o: Range) -> bool
	func extern __and__(o: Range) -> Range
	func extern __str__() -> string
	#	return "({{offset}}:{{end()}})"
	#const Range ALL = Range(-1000000000, 2000000000)
func RangeTo(start: i32, end: i32) -> Range
	return Range(start, end - start)


struct AudioBuffer
	var offset, length: i32
	var channels: i32
	#var l, r: float[]
	var c: float[][]
	var peaks: string[]
	func extern __init__()
	func extern __delete__()
	func extern mut __assign__(other: AudioBuffer)
	func extern mut clear()
	func extern range() -> Range
	func extern mut resize(length: i32)
	func extern mut set_channels(channels: i32)
	func extern mut set(source: AudioBuffer, target_offset: i32, volume: f32)
	func extern mut add(source: AudioBuffer, offset: i32, volume: f32)
	#extern void mix_stereo(float volume, float panning)
	func extern mut set_as_ref(source: AudioBuffer, offset: i32, length: i32)
	func extern selfref __subarray__(start: i32, end: i32) -> AudioBuffer
	func extern get_spectrum(out spec_r: complex[], out spec_l: complex[], samples: i32)
	func mut scale(factor: f32)
		for mut cc in c
			cc *= factor
	func mut __imul__(f: f32[])
		for mut cc in c
			cc *= f
	func mut auto_generate_channels()
		if channels > 1
			c[1] = c[0]


struct RingBuffer as @noauto
	enum PeekMode
		FORWARD_REF
		FORWARD_COPY_WRAP
		BACKWARD_REF
		BACKWARD_COPY_WRAP

	func extern __init__(size: i32)
	func extern available() -> i32
	func extern mut read(out b: AudioBuffer)
	func extern mut write(b: AudioBuffer)
	func extern mut read_ref(out b: AudioBuffer, size: i32)
	func extern mut read_ref_done(b: AudioBuffer)
	func extern mut peek(out b: AudioBuffer, size: i32, mode: PeekMode)
	func extern mut write_ref(b: AudioBuffer, size: i32)
	func extern mut write_ref_done(b: AudioBuffer)
	func extern mut clear()
