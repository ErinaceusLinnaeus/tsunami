use tsunami.*

let AUTO_CONFIG_BPM = "range=1:360,sliderrange=10:200,unit=/min"

class Config extends Module.Config
	
	# rhythm
	var bpm: f32
	
	func override reset()
		bpm = 90

class MetronomeSource extends BeatSource
	var config: Config
	
	var next_beat = 0
	var samples_per_beat: i32
	

	func override reset_state()
		next_beat = 0
		on_config()
		
	func override read(out beats: Beat[], samples: i32) -> i32
	
		while next_beat < samples
			beats.add(Beat(next_beat, 0))
			next_beat += samples_per_beat
	
		next_beat -= samples
		
		beats.add(Beat.create_keep_alive(samples, samples_per_beat - next_beat, samples_per_beat))
		
		return samples
	
	func mut set_bpm(bpm: f32)
		config.bpm = bpm
		changed()
	
	func override on_config()
		let dt_b = 60.0 / config.bpm
		samples_per_beat = dt_b * session.sample_rate()
		
		# should we correct next_beat?  ...meh, don't bother...
		
