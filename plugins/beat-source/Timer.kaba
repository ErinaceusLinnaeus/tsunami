use tsunami.*

let AUTO_CONFIG_BPM = "range=1:360,sliderrange=10:200,unit=/min"

class Config extends Module.Config
	
	# rhythm
	var bpm: float
	
	func override reset()
		bpm = 90

class MetronomeSource extends BeatSource
	var config: Config
	
	# state/output
	var next_beat: Range

	#var fraction_beat: float
	var samples_beat: int
	

	func override reset_state()

		next_beat = Range(0,0)
		#fraction_beat = 1
		
		on_config()
		
	func override read(out beats: Beat[], samples: int) -> int
	
		beats.add(Beat(next_beat, 0))
		
		while next_beat.end() < samples
			next_beat = Range(next_beat.end(), samples_beat)
			beats.add(Beat(next_beat, 0))
	
		next_beat.offset -= samples
		
		return samples
	
	func override beat_fraction() -> float
		return 0.0 #fraction_beat
	
	func mut set_bpm(bpm: float)
		config.bpm = bpm
		changed()
	
	func override on_config()
		var sample_rate = session.sample_rate()
		var dt_b = 60.0 / config.bpm
		samples_beat = dt_b * sample_rate
		
		next_beat.length = samples_beat
		
