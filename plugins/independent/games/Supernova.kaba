# Image = hui:find
# Title[Deutsch] = Supernova
use hui
use tsunami
use helper.tone

#const int freq = 44100
const f_min = 50
const f_max = 5000

const threshold = 5.0


const BUFFER_SIZE = 4096
var buf: AudioBuffer

var win: SuperNovaWindow*

class PlayedData
	var note: int
	var length: int
	var offset: int
	var correct: bool

var played: PlayedData[]
var Offset: int

func get_freq(i: float) -> float
	return i / (BUFFER_SIZE / 2) * song.sample_rate / 2

var Frequency, Volume, Error: float
var LoudEnough: bool

var StringPitch: int[6]
var HandPosition: int

var MidiTrack: Track*
var LessonLength: int

var Score: float
var ScoreFactor: float
var TotalScore: float

enum Mode
	CONFIG
	LESSON
var mode: Mode
var LessonName: string[]

var error: float
func get_note(f: float) -> string
	var pitch = log(f / 440.0) / log(2.0) * 12 + 69
	var rel = f2i(pitch + 0.5) % 12
	error = loop(pitch, -0.5, 0.5)
	return rel_pitch_name(rel)
	#loopf(fl, 0, 1)
	#note = i2s(n)

class SuperNovaWindow extends Window
	var hover: int
	var w, h: float
	var c: Painter*
	func __init__()
		super.__init__("Supernova", -1, -1, 1024, 600)
		addGrid("", 0, 0, "table1")
		setTarget("table1")
		addDrawingArea("", 0, 0, "drawing")
		addGrid("", 0, 1, "table2")
		setTarget("table2")
		addLabel("Geschwindigkeit", 0, 0, "")
		addComboBox("Langsam\\Normal\\Schnell", 1, 0, "speed")
		addButton("Lektion abbrechen", 2, 0, "cancel")
		addButton("SchlieÃŸen", 3, 0, "close")
		hover = -1
		setInt("speed", 1)
		enable("cancel", false)
		
		event("close", &onClose)
		event("cancel", &onCancel)
		setFullscreen(true)
	
	func override __delete__()
		if Mode == ModeLesson
			StopLesson()
	
	func onClose()
		destroy()
	
	func onCancel()
		StopLesson()
		redraw("drawing")

	func drawVolume()
		c.setColor(color(1, 0.8, 0.8, 0.8))
		var y0: float = 30
		var y1: float = c.height - 5
		var h = y1 - y0
		c.drawRect(5, y0 + h * (1 - Volume), 5, h)
		c.setColor(color(1, 0.6, 0.6, 0.6))
		c.drawLine(2, (y0 + y1) / 2, 13, (y0 + y1) / 2)
	
	func sample2x(s: float) -> float
		return (s - Offset) / 700.0 + 500
	
	func drawSheet(y0: float)
		c.setColor(color(1, 0.6, 0.6, 0.6))
		for i in 0:6
			var ly = h - (i + 1) * 30
			c.drawLine(0, ly, w, ly)
		c.setColor(color.BLACK)
		c.setFontSize(18)
		var notes = MidiTrack.midi.getNotes(song.getRange())
		for n in notes
			var s, f: int
			for i in 0:6
				if n.pitch >= StringPitch[i] + HandPosition
					s = i
					f = n.pitch - StringPitch[i]
			var ly = h - (s + 1) * 30
			c.setColor(ColorSetHSB(0.3, (n.pitch % 12) / 12.0, 1, 1))
			c.drawRect(sample2x(n.range.offset), ly - 12, n.range.length / 700.0, 24)
			c.setColor(color.BLACK)
			c.drawStr(sample2x(n.range.offset), ly-12, f)
			
	func drawScore()
		c.setColor(color.BLACK)
		c.setFontSize(24)
		c.drawStr(w - 220, 50, Score.str2(0) + " Punkte")
		
	func drawLesson()
	
		drawVolume()
	
		if MidiTrack
			drawSheet(0)
	
		c.setColor(Gray)
		c.drawStr(20, 20, Frequency.str2(1) + "Hz")
		c.drawStr(20, 40, Volume.str())
		for p in played
			if p.correct
				c.setColor(color.BLUE)
			else
				c.setColor(color.RED)
			var x = sample2x(p.offset)
			var y = h - h * (p.note - 40.0) / 60.0
			c.drawLine(x, y, x + 2, y)
		
		c.setColor(color(1, 1, 0.5, 0.5))
		c.drawLine(500, 0, 500, h)
		
		drawScore()
	
		c.setColor(color.BLACK)
		if LoudEnough
			c.drawStr(120, 20, rel_pitch_name(played[len(played) - 1].note % 12))
		else
			c.drawStr(w / 2 - 30, h / 2 - 20, "zu leise")
	
	func drawConfig()
		c.setFontSize(20)
		for i=>l in LessonName
			if i == hover
				c.setColor(color(1, 0.8, 0.8, 1))
				c.drawRect(100, 35 + i * 40, 300, 35)
			c.setColor(color.BLACK)
			c.drawStr(100, 38 + i * 40, l)
		c.setColor(color.BLACK)
		c.setFontSize(24)
		c.drawStr(w - 300, h - 50, TotalScore.str2(0) + " Punkte")

	func override on_draw(p: Painter)
		c = p
		c.setColor(color.WHITE)
		c.setFontSize(12)
		w = c.width
		h = c.height
		c.drawRect(0, 0, w, h)
		
		if Mode == ModeConfig
			drawConfig()
		else if Mode == ModeLesson
			drawLesson()
		
	func override on_mouse_move()
		if Mode != ModeConfig
			return
		hover = -1
		var mx = Huihui.get_event().mouse_x
		var my = Huihui.get_event().mouse_y
		for i=>l in LessonName
			if mx >= 100 and mx < 400 and my >= 35 + i * 40 and my <= 70 + i * 40
				hover = i
		redraw("drawing")
	func override on_left_button_down()
		if Mode != ModeConfig
			return
		if hover >= 0
			StartLesson(LessonName[hover])

func UpdateInput()
	var available = input.current_buffer.available()
	
	if available > BUFFER_SIZE
		input.current_buffer.moveReadPos(available - BUFFER_SIZE)
		Offset += available - BUFFER_SIZE#len(input.cur_buf)
	
	var num = clampi(available, 0, BUFFER_SIZE)
	input.current_buffer.peekRef(buf, num)
	
	#float w_f = 1.0 / freq * 440.0 * 2.0 * pi
#	for int i, 0, buf_size
#		float tt = i * w_f
#		buf[i] = f2i(val_max * sin(tt) * 0.1)
	
	var temp = buf.r + buf.l
	
	var bufc: complex[]
	bufc.resize(len(buf) / 2 + 1)
	fft_r2c(temp, bufc)
	var max: float = 0
	var fmax: float = 0, fmax2 = 0
	for i=>b in bufc
		var f = get_freq(i)
		if f > f_min and f < f_max
			var amp = (b.x*b.x + b.y*b.y) / f
			#floatout f
			#if (amp > max * 2.5) or (amp > max and f < fmax2)
#				max = amp
#				fmax = f
#				fmax2 = f * 1.5
			if (amp > max)
				max = amp
				fmax = f
	max *= fmax
	max /= sqrt(len(buf)) * 2 * pi
	Volume = clamp(max / threshold / 2, 0, 1)
	if max > threshold
		var p: PlayedData
		p.offset = Offset
		p.length = len(buf)
		p.correct = false
		LoudEnough = true
		Frequency = fmax
		p.note = f2i(freq_to_pitch(Frequency) + 0.5)
		#Frequency = fmax
		Error = error
	
		var notes = MidiTrack.midi.getNotes(audio.getRange())
		for n in notes
			if n.range.offset <= Offset and n.range.offset + n.range.length > Offset
				if n.pitch == p.note
					Score += p.length * ScoreFactor
					p.correct = true
		played.add(p)
	else
		LoudEnough = false
	if len(played) > 500
		played.remove(0)
		
	if Offset > LessonLength
		StopLesson()

	win.redraw("drawing")

func StartLesson(name: string)
	Offset = 0
	Score = 0
	played.clear()

	storage.load(audio, hui.app_directory_static + "Lessons/" + name + ".nami")
	for t in audio.tracks
		if t.type == TRACK_TYPE_MIDI
			MidiTrack = t
			
	var num_samples: float = 0
	var notes = MidiTrack.midi.getNotes(audio.getRange())
	for n in notes
		num_samples += n.range.length
	ScoreFactor = 100 / num_samples
	for t in audio.tags
		if t.key == "position"
			HandPosition = t.value.int()
		if t.key == "score"
			ScoreFactor = t.value.float() / num_samples * 1.2
	
	var speed = win.getInt("speed")
	if speed == 0
		audio.sample_rate = audio.sample_rate * 0.7
		ScoreFactor *= 0.6
	else if speed == 2
		audio.sample_rate = audio.sample_rate * 1.4
		ScoreFactor *= 1.5
	
	LessonLength = MidiTrack.midi.getRange().length + audio.sample_rate * 4

	bufc.resize(1000)
	
	input.start(TRACK_TYPE_AUDIO, audio.sample_rate)
	input.addObserver(nil, &UpdateInput)
	
	view.renderer.prepare(audio, audio.getRange(), false)
	view.stream.play()
	win.enable("speed", false)
	win.enable("cancel", true)
	Mode = ModeLesson

func StopLesson()
	view.stream.stop()
	input.removeObserver(nil)
	input.stop()
	TotalScore += Score
	hui.config.setFloat("Supernova.Score", TotalScore)
	Mode = ModeConfig
	win.enable("speed", true)
	win.enable("cancel", false)

var bufc: complex[]

func main()
	MidiTrack = nil
	Mode = ModeConfig
			
	win = new SuperNovaWindow
		
	StringPitch[0] = 40
	StringPitch[1] = 45 # A = 110
	StringPitch[2] = 50
	StringPitch[3] = 55
	StringPitch[4] = 59
	StringPitch[5] = 64
	HandPosition = 5
	
	LessonName.clear()
	var list = DirSearch(hui.app_directory_static + "Lessons/", "*.nami", false)
	for e in list
		if e.name[0] != '0'
			LessonName.add(e.name.substr(0, -6))
		
		
	TotalScore = hui.config.getFloat("Supernova.Score", 0)
	
	MainWin.hide()
	win.run()
	var win: delete
	MainWin.show()
