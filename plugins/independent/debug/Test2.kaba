use hui
use tsunami.*

const CHUNK_SIZE = 1024
const NUM_CHUNKS = 4

class Test extends TsunamiPlugin
	func override on_start()
		var buf: AudioBuffer
		buf.resize(CHUNK_SIZE * NUM_CHUNKS)
		var omega = 0.13
		for i in 0:len(buf)
			buf.c[0][i] = sin(omega * i)
		
		for j in 0:NUM_CHUNKS
			print("-----")
			var c: complex[]
			var b, b2: float[]
			for i in 0:CHUNK_SIZE
				b.add(buf.c[0][i + j*CHUNK_SIZE])
			fft.r2c(b, c)
			for i in 20:25
				c[i].x = 0
				c[i].y = 0
			for z in c
				print(z.abs())
			b2.resize(CHUNK_SIZE)
			fft.c2r_inv(c, b2)
			b2 /= CHUNK_SIZE
			for i in 0:CHUNK_SIZE
				buf.c[1][i + j*CHUNK_SIZE] = b2[i]
		
		var dmax = 0.0
		var step_max = 0.0
		for i in 1:buf.length
			dmax = max(dmax, abs(buf.c[1][i] - buf.c[0][i]))
			step_max = max(step_max, abs(buf.c[1][i] - buf.c[1][i-1]))
			if step_max > 0.2
				print("AAAAARGH!!!!!!")
				print(i)
				break
		print("________")
		print(dmax)
		print(step_max)
		print(max(buf.c[1]))
		
		stop()
