use tsunami.*
use hui
use time.Timer

func smooth(t: float) -> float
	if t < 0.5
		return 2*t^2
	return 1 - 2*(1-t)^2

class MLVDialog extends hui.Dialog
	mlp: owned![MultiLinePainter]
	config_visible = false
	session: Session&
	
	mlv: MultiLineView&
	config: MultiLineView.Config&
	use config
	
	y_offset_start = 0.0
	y_offset_target = 0.0
	y_offset_t = -1.0
	
	line_samples: int[]
	line_y0: float[]
	area: rect
	dragging = false
	drag_y_offset0: float
	drag_timer: Timer

	func __init__(parent: hui.Window*, _mlv: MultiLineView)
		super.__init__("Multi Line View", 800, 600, parent, true)
		
		mlv := &_mlv
		config := &mlv.config
		session := mlv.session
		
		from_source("Dialog multi-line-view 'Multi Line View' resizable headerbar
	Grid ? '' vertical
		Grid ? ''
			DrawingArea area '' mainwindowcontrol expandx gesture=drag
			Grid config-grid '' noexpandx width=300 hidden
				Grid ? ''
					Label l-line-height 'Line height'
					SpinButton line-height '{{line_height}}' expandx
					---|
					Label l-line-space 'Line space'
					SpinButton line-space '{{line_space}}' range=0:2:0.01
					---|
					Label l-track-space 'Tack space'
					SpinButton track-space '{{track_space}}' range=0:2:0.01
					---|
					Label l-x-scale 'Horizontal scale'
					SpinButton x-scale '{{x_scale}}' range=0.01:10:0.01
					---|
					CheckBox allow-shadows 'Shadows'
				---|
				ListView tracks 'Track\\Classical\\TAB' format=tCC")
		set_target(":header:")
		add_button("", 0, 0, "play")
		set_image("play", "hui:media-play")
		add_button("", 0, 1, "config")
		set_image("config", "hui:properties")
		
		for i=>t in session.song.tracks
			add_string("tracks", "{{t.nice_name()}}\\false\\false")
		
		#var me = &self
		event("config", on_config)#lambda(me: MyDialog) me.hide_control("config-grid", false))
		event("line-height", on_update)
		event("line-space", on_update)
		event("track-space", on_update)
		event("x-scale", on_update)
		event("allow-shadows", on_update)
		event("play", on_play)
		event_x("tracks", "hui:change", on_update)
		event_x("area", "hui:left-button-down", on_click)
		event_x("area", "hui:mouse-wheel", on_scroll)
		event_x("area", "hui:key-down", on_key)
		event_x("area", "hui:gesture-drag-begin", on_drag_begin)
		event_x("area", "hui:gesture-drag-end", on_drag_end)
		event_x("area", "hui:gesture-drag", on_drag_update)
		event("hui:close", on_close)
		
		#session.playback.signal_chain.subscribe(self, on_preview_change, "changed")
#		session.playback.subscribe(self, on_preview_tick, "tick")
		
		mlp = new MultiLinePainter(session.song, theme)
		
		on_config_changed()
	
	func override __delete__()
		#session.playback.unsubscribe(self)
	
	func mut on_preview_change()
	func mut on_preview_tick()
		if session.playback.is_active()
			make_sure_sample_on_screen(session.playback.get_pos())
			force_redraw()
	
	func mut make_sure_sample_on_screen(s: int)
		if y_offset_t >= 0
			return
		let y0 = sample_to_screen(s).y
		let dy = mlp.get_line_dy()
		if y0 < 0
			set_scroll_target(y_offset + y0)
		else if y0 + dy*2 > area.y2
			set_scroll_target(y_offset + (y0 + min(dy*2 - area.y2, 0.0)))
		
	func mut set_scroll_target(y: float)
		#y_offset = y
		y_offset_start = y_offset
		y_offset_target = y
		y_offset_t = 0
		mlv.changed()
	
	func mut on_close()
		#mlv.stop()
		show_window = false
		mlv.changed()
	
	func mut on_play()
		if session.playback.is_active()
			if session.playback.is_paused()
				session.playback.signal_chain.start()
			else
				session.playback.signal_chain.stop()
		else
			session.playback.play()
	
	func mut on_key()
		let e = hui.get_event()
		if e.key == hui.KEY_SPACE
			on_play()
	
	func mut on_config()
		config_visible = not config_visible
		if config_visible
			set_options("config-grid", "visible")
		else
			set_options("config-grid", "hidden")
	
	func mut on_update()
		line_height = get_float("line-height")
		line_space = get_float("line-space")
		track_space = get_float("track-space")
		x_scale = get_float("x-scale")
		allow_shadows = is_checked("allow-shadows")
		track_mode.resize(len(session.song.tracks) * 2)
		for i=>t in weak(session.song.tracks)
			track_mode[i * 2    ] = (get_cell("tracks", i, 1) == "true")
			track_mode[i * 2 + 1] = (get_cell("tracks", i, 2) == "true")
		mlv.changed()
	
	func mut on_config_changed()
		set_size(window_size[0], window_size[1])
		set_float("line-height", line_height)
		set_float("line-space", line_space)
		set_float("track-space", track_space)
		set_float("x-scale", x_scale)
		check("allow-shadows", allow_shadows)
		if len(track_mode) > 0
			for i=>t in weak(session.song.tracks)
				if i*2 < len(track_mode)
					set_cell("tracks", i, 1, str(track_mode[i * 2    ]))
					set_cell("tracks", i, 2, str(track_mode[i * 2 + 1]))
				else
					set_cell("tracks", i, 1, "false")
					set_cell("tracks", i, 2, "false")
		else
			for i=>t in weak(session.song.tracks)
				if t.type == SignalType.MIDI
					set_cell("tracks", i, 1, "true")
					set_cell("tracks", i, 2, "true")
				else
					set_cell("tracks", i, 1, "false")
					set_cell("tracks", i, 2, "false")
		if show_window
			show()
			force_redraw()
		else
			hide()
	
	func mut on_scroll()
		let e = hui.get_event()
		let speed = session.view.mouse_wheel_factor #float(hui.config["View.MouseWheelSpeed"])
		config.y_offset = clamp(y_offset + e.scroll.y*20*speed, 0.0, 100000)
		mlv.changed()
	
	func mut on_click()
		let e = hui.get_event()
		session.playback.set_pos(screen_to_sample(e.mouse))
	
	func screen_to_sample(pos: vec2) -> int
		for i=>y0 in line_y0[:-1]
			if pos.y >= y0 and pos.y < line_y0[i+1]
				return line_samples[i] + (line_samples[i+1] - line_samples[i]) * (pos.x - border) / (area.width() - 2*border)
		return -1
	
	func mut on_drag_begin()
		let e = hui.get_event()
		if e.row != 3 # touch
			return
		dragging = true
		drag_y_offset0 = config.y_offset
		drag_timer.reset()
	
	func mut on_drag_end()
		dragging = false
	
	func mut on_drag_update()
		if not dragging
			return
		if drag_timer.peek() < 0.03
			return
		drag_timer.reset()
		let e = hui.get_event()
		config.y_offset = clamp(drag_y_offset0 - e.scroll.y, 0.0, 100000)
		mlv.changed()
	
	func sample_to_screen(s: int) -> vec2
		for i=>s0 in line_samples[:-1]
			if s >= s0 and s < line_samples[i+1]
				return [0,line_y0[i]] # X: TODO
		return [0,0]
	
	func mlp_config() -> any
		var conf = dyn([])
		for i=>t in session.song.tracks
			if t.type != SignalType.MIDI
				continue
			if i*2+1 >= len(track_mode)
				conf.add(dyn({"index":i, "classical":true, "tab":true}))
				continue
#			conf.add(dyn({"index":i, "classical":track_mode[i*2], "tab":track_mode[i*2+1]}))
			if track_mode[i*2] and track_mode[i*2+1]
				conf.add(dyn({"index":i, "classical":true, "tab":true}))
			else if track_mode[i*2]
				conf.add(dyn({"index":i, "classical":true}))
			else if track_mode[i*2+1]
				conf.add(dyn({"index":i, "tab":true}))
		return conf

	func override on_draw(p: hui.Painter)
		let window_size_prev = window_size
		get_size(window_size[0], window_size[1])
		if window_size != window_size_prev
			mlv.changed()
			
		area = [0,p.width, 0,p.height]
		p.set_color(theme.background)
		p.draw_rect(area)
		mlp.set_context(mlp_config(), p.width, 44100*p.width/180 / x_scale)
		mlp.set(dyn({"border": border,
			"line-height": line_height,
			"line-space": line_height * line_space,
			"track-space": line_height * track_space,
			"allow-shadows": allow_shadows,
			"antialiasing": true,
			"collapse-midi": true,
			"part-colors": true}))
		var y0 = 10.0 - y_offset
		var offset = 0
		let dy = mlp.get_line_dy()
		line_samples.clear()
		line_y0.clear()
		while offset < session.song.range().end()
			line_samples.add(offset)
			line_y0.add(y0)
			var s0 = offset
			let y00 = y0
			
			let line_samples = mlp.next_line_samples(offset)
			if y0+dy > 0 and y0 < p.height
				# on screen
				y0 = mlp.draw_next_line(p, offset, [0, y0])
			else
				offset += line_samples
				y0 += dy
			
			#line_samples.add(offset - s0)
			
			if session.playback.is_active()
				let pos = session.playback.get_pos()
				if pos >= s0 and pos < offset
					let w = p.width - border*2
					let x = border + float(pos - s0) * w / float(offset - s0)
					p.set_color([0.2, 0.8, 0.2, 1]) #theme.
					p.set_line_width(3)
					p.draw_line([x, y00], [x, y0])
		line_samples.add(offset)
		line_y0.add(y0)
		
		if y_offset_t >= 0
			y_offset = y_offset_start + smooth(y_offset_t) * (y_offset_target - y_offset_start)
			y_offset_t += 0.1
			if y_offset_t >= 1
				y_offset_t = -1
			let id = hui.run_later(0.02, force_redraw)

	func force_redraw()
		redraw("area")


let AUTO_CONFIG_LINE_HEIGHT = "range=10:200"
let AUTO_CONFIG_LINE_SPACE = "range=0:2:0.01,scale=100,unit=%"
let AUTO_CONFIG_TRACK_SPACE = "range=0:2:0.01,scale=100,unit=%"
#let AUTO_CONFIG_BORDER = "range=0:100"
let AUTO_CONFIG_BORDER = "ignore"
let AUTO_CONFIG_X_SCALE = "range=0.02:4:0.01,scale=100,unit=%"
#let AUTO_CONFIG_Y_OFFSET = "range=0:100000"
let AUTO_CONFIG_Y_OFFSET = "ignore"
let AUTO_CONFIG_SHOW_WINDOW = ""


class MultiLineView extends TsunamiPlugin
	dlg: shared[MLVDialog]
	
	class Config extends Module.Config
		line_height = 50.0
		line_space = 0.8
		track_space = 0.4
		border = 20.0
		x_scale = 1.0
		track_mode: bool[]
		y_offset = 0.0
		allow_shadows = true
		window_size: (int,int)
		show_window = true
		func override reset()
			line_height = 50.0
			line_space = 0.8
			track_space = 0.4
			border = 20.0
			x_scale = 1.0
			track_mode.clear()
			y_offset = 0.0
			allow_shadows = true
			window_size = [800,600]
			show_window = true
	var config: Config

	func override on_start()
		dlg = new MLVDialog(session.win, self)
		for d in dlg
			session.playback.out_tick >> create_sink(func() d.on_preview_tick())
			d.show()
		hui.fly(dlg)
		
	func override on_stop()
		for d in dlg
			d.destroy()
	
	func override on_config()
		for d in dlg
			d.on_config_changed()
