# Image = hui:find
# Title[Deutsch] = Tonerkennung
use hui
use tsunami.*
use helper.tone.*

const freq = 44100
const f_min = 50
const f_max = 5000

const threshold = 5.0


const buf_size = 4096
var buf: float[]

var win: hui.Window*

var played: int[]

func get_freq(i: float) -> float
	return i / (buf_size / 2) * freq / 2

var Frequency, Volume, Error: float
var LoudEnough: bool

var error: float
func get_note(f: float) -> string
	var pitch = log(f / 440.0) / log(2.0) * 12 + 69
	var rel = int(pitch + 0.5) % 12
	error = loop(pitch, -0.5, 0.5)
	return rel_pitch_name(rel)
	#loopf(fl, 0, 1)
	#note = i2s(n)

func DrawVolume(c: hui.Painter)
	c.set_color(color(0.8, 0.8, 0.8, 1))
	var y0 = 30.0
	var y1 = float(c.height) - 5
	var h = y1 - y0
	c.draw_rect([5, 10, y0 + h * (1 - Volume), y0 + h * (2 - Volume)])
	c.set_color(color(0.6, 0.6, 0.6, 1))
	c.draw_line([2, (y0 + y1) / 2], [13, (y0 + y1) / 2])

func Draw(c: hui.Painter)
	c.set_color(color.WHITE)
	c.set_font_size(12)
	var w = c.width
	var h = c.height
	c.draw_rect([0, w, 0, h])
	
	DrawVolume(c)
	
	c.set_color(color.BLACK)
	c.draw_str([20, 20], "{{Frequency|.1}} Hz")
	c.draw_str([20, 40], "{{Volume|.3}}")
	for i=>p in played
		if p < 0
			continue
		let x = float(i)
		let y = h - h * (p - 40.0) / 60.0
		c.draw_line([x, y], [x + 2, y])
	
	c.set_color(color.BLACK)
	if LoudEnough
		c.draw_str([120, 20], rel_pitch_name(played[len(played) - 1] % 12))
	else
		c.draw_str([w / 2 - 30, h / 2 - 20], "too quiet")

func OnClose()
	del win
	win = nil

func UpdateInput()
	
	let num = clamp(len(input.cur_buf), 0, buf_size)
	buf.resize(buf_size)
	
	# alten Pufferinhalt verschieben
	for i in 0:(buf_size - num)
		buf[i] = buf[i + num]
	
	# neuen Inhalt anfÃ¼gen
	for i in 0:num
		buf[buf_size - num + i] = (input.cur_buf.r[i] + input.cur_buf.l[i]) / 2
	
	#float w_f = 1.0 / freq * 440.0 * 2.0 * pi
#	for int i, 0, buf_size
#		float tt = i * w_f
#		buf[i] = f2i(val_max * sin(tt) * 0.1)
	
	var bufc: complex[]
	bufc.resize(len(buf) / 2 + 1)
	fft_r2c(buf, bufc)
	var max = 0.0
	var fmax = 0.0
	var fmax2 = 0.0
	for i=>b in bufc
		var f = get_freq(i)
		if f > f_min and f < f_max
			var amp = (b.x*b.x + b.y*b.y) / f
			#floatout f
			#if (amp > max * 2.5) or (amp > max and f < fmax2)
#				max = amp
#				fmax = f
#				fmax2 = f * 1.5
			if (amp > max)
				max = amp
				fmax = f
	max *= fmax
	max /= sqrt(len(buf)) * 2 * pi
	Volume = clamp(max / threshold / 2, 0, 1)
	if max > threshold
		LoudEnough = true
		Frequency = fmax
		played.add(int(freq_to_pitch(Frequency) + 0.5))
		#Frequency = fmax
		Error = error
	else
		LoudEnough = false
		played.add(-1)
	if len(played) > 500
		played.remove(0)
	win.redraw("drawing")


var bufc: complex[]

func main()
	win = new Dialog("Tonerkennung", 600, 400, MainWin, false)
	win.addDrawingArea("", 0, 0, "drawing")
	
	win.eventSX("drawing", "hui:draw", &Draw)
	win.eventS("hui:close", OnClose)
	


	buf.resize(1000)
	bufc.resize(1000)
	fft_r2c(buf, bufc)
	
	input.start(TRACK_TYPE_AUDIO, freq)
	input.addObserver(nil, &UpdateInput)
	
	win.run()
	
	input.removeObserver(nil)
	input.stop()
