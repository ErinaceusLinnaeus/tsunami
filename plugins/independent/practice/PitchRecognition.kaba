# Image = hui:find
# Title[Deutsch] = Tonerkennung
use hui
use tsunami.*
use helper.tone.*


class PitchRecognitionPanel extends ConfigPanel
	var override c: PitchRecognition&
	#var note_error: float
	var runner: int
	
	func override __init__(_p: Module)
		add_drawing_area("", 5, 5, "drawing")
	
		event_x("drawing", "hui:draw", on_draw)
		
		runner = hui.run_repeated(0.05, on_update)
	
	func override __delete__()
		hui.cancel_runner(runner)
		
	func on_update()
		redraw("drawing")

	func get_note(f: float) -> (string, float)
		var pitch = log(f / 440.0) / log(2.0) * 12 + 69
		var rel = int(pitch + 0.5) % 12
		var note_error = loop(pitch, -0.5, 0.5)
		return (rel_pitch_name(rel), note_error)
		#loopf(fl, 0, 1)
		#note = i2s(n)

	func draw_volume(p: hui.Painter)
		p.set_color(color(0.8, 0.8, 0.8, 1))
		let y0 = 30.0
		let y1 = float(p.height) - 5
		let h = y1 - y0
		p.draw_rect([5, 10, y0 + h * (1 - c.pitch_detector.volume), y0 + h * (2 - c.pitch_detector.volume)])
		p.set_color(color(0.6, 0.6, 0.6, 1))
		p.draw_line([2, (y0 + y1) / 2], [13, (y0 + y1) / 2])

	func on_draw(p: hui.Painter)
		p.set_color(theme.background)
		p.set_font_size(12)
		p.draw_rect([0, p.width, 0, p.height])
	
		draw_volume(p)
	
		let r = min(p.width / 2 - 40.0, p.height - 40.0)
		let r1 = r - 5
		let r2 = r + 5
		let x = float(p.width) / 2
		let y = float(p.height) - 10
	
		p.set_color(theme.text_soft1)
		for i in 0:9
			var w = i * 0.125 * pi - pi / 2
			p.draw_line([x + r1 * sin(w), y - r1 * cos(w)], [x + r2 * sin(w), y - r2 * cos(w)])
	
		p.set_color(theme.text)
		if c.pitch_detector.loud_enough
			let (note, error) = get_note(c.pitch_detector.frequency)
			p.draw_str([x - 8, y - r2 - 22], note)
			p.draw_str([x + r2 * 0.7 + 6, y - r2 * 0.7 - 22], "#")
			p.draw_str([x - r2 * 0.7 - 10, y - r2 * 0.7 - 22], "b")
			p.draw_str([5, 5], "{{c.pitch_detector.frequency|.1}} Hz")
			p.draw_line([x, y], [x + r * sin(error * pi), y - r * cos(error * pi)])
		else
			p.draw_str([x - 30, y - 20], "too quiet")

class PitchRecognition extends TsunamiPlugin
	
	var chain: shared![SignalChain]
	var pitch_detector: shared![PitchDetector]
	
	func override on_start()
		chain = session.create_signal_chain("pitch-recognition")
		var input = chain.add_basic(Module.Type.STREAM, "AudioInput")
		pitch_detector = chain.add[PitchDetector]()
		var out = chain.add_basic(Module.Type.PLUMBING, "MidiSucker")
		chain.connect(input, 0, pitch_detector, 0)
		chain.connect(pitch_detector, 0, out, 0)
		
		chain.start()
	
	func override mut create_panel() -> xfer[ConfigPanel]
		return new PitchRecognitionPanel(self)
	
