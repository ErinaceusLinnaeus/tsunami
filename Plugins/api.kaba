/*--------------------------------------------------------------------*\
|                                                                      |
| header for Tsunami plugin api                                        |
|                                                                      |
|    (c) by MichiSoft TM 2010                                          |
|                                                                      |
| Don't even think of changing anything within this file!              |
|    (unless you dare dying a cruel death)                             |
|                                                                      |
\*--------------------------------------------------------------------*/

//#define NUM_PEAK_LEVELS		24

//#define val_min			-32766
//#define val_max			32766


//#define NUM_CAPTURE_SAMPLES		8192

#define NUM_PEAK_LEVELS			24

class EffectParam
	string name, type, value

class Effect
	string filename
	EffectParam param[]
	bool only_on_selection
	int start, end

/*
class sAudioFile
	int fake*/

class Sub
	int dummy

class BufferBox
	int offset, num
	float r[], l[]

class TrackRenderBuffer
	int dummy
	
class TimeBar
	int num_beats
	int length
	int type
	
	bool is_selected
	bool is_mouse_over
	int x, width

class BarCollection
	int pos
	int length
	TimeBar bar[]
	
	bool is_selected
	bool is_mouse_over
	int x, width

enum
	TRACK_TYPE_AUDIO
	TRACK_TYPE_TIME

class Track
	int type
	string name
	BufferBox buffer[]
	int length, pos

	float volume
	bool muted
	
	int rep_num
	int rep_delay
	
	Effect fx[]
	Sub sub[]
	int cur_sub
	
	// time track
	BarCollection bar_col[]

	// editing
	int x, y, width, height
	int parent
	void *root

	bool is_selected
	bool is_mouse_over

	//TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]

class Tag
	string key, value

class AudioFile
	bool used
	string filename
	Tag tag[]
	int sample_rate

	float volume
	
	Effect fx[]
	Track track[]

	int x, y, width, height

	bool selection
	int selection_start, selection_end, selection_length
	bool mo_sel_start, mo_sel_end
	int cur_track

	float view_pos
	float view_zoom
	
	int sel_start_raw, sel_end_raw
	
	void *history

extern window MainWin
extern AudioFile /* *audio[2],*/ *cur_audio

extern Track *AddEmptyTrack(AudioFile *a)
extern void DeleteTrack(AudioFile *a, int n)
extern Track *AddEmptySubTrack(Track *t, float pos, int length, string name)
extern void CreateNew(AudioFile *a, int length, int sample_rate)
extern void UpdatePeaks(Track *t)
extern void CreateTrackBuffers(Track *t)

extern BufferBox TrackGetBuffers(Track *t, int pos, int length)
extern BufferBox TrackGetBuffersR(Track *t, int pos, int length)

//extern void ChangeAudioFile(AudioFile *a)
//extern void ChangeTrack(Track *t)

extern void fft_c2c(complex in[], complex out[], bool inverse)
extern void fft_r2c(float in[], complex out[])
extern void fft_c2r_inv(complex in[], float out[])
extern void fft_i2c(int in[], complex out[])
extern void fft_c2i_inv(complex in[], int out[])

extern bool CaptureStart(int sample_rate, bool add_data)
extern void CaptureStop()
extern int DoCapturing()
extern BufferBox CaptureBuf, CapturePreviewBuf

extern void ProgressStart(string s, float progress)
extern void ProgressEnd()
extern void Progress(string s, float progress)

extern BufferBox AudioFileRender(AudioFile *a, int pos, int length)

extern void PutFavoriteBarFixed(window win, int x, int y, int w)
extern void PutFavoriteBarSizable(window win, string root_id, int x, int y)
extern void PutCommandBarFixed(window win, int x, int y, int w)
extern void PutCommandBarSizable(window win, string root_id, int x, int y)
extern void AddSlider(window win, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
extern void SliderSet(window win, string id, float value)
extern float SliderGet(window win, string id)
extern void RemoveSliders(window win)


int abra
