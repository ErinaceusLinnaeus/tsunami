/*--------------------------------------------------------------------*\
|                                                                      |
| header for Tsunami plugin api                                        |
|                                                                      |
|    (c) by MichiSoft TM 2010                                          |
|                                                                      |
| Don't even think of changing anything within this file!              |
|    (unless you dare dying a cruel death)                             |
|                                                                      |
\*--------------------------------------------------------------------*/

//#define NUM_PEAK_LEVELS		24

//#define val_min			-32766
//#define val_max			32766


//#define NUM_CAPTURE_SAMPLES		8192

const int NUM_PEAK_LEVELS = 24

class Range
	int offset, length

class EffectParam
	string name, type, value

class AudioEffect
	string name
	EffectParam param[]
	bool only_on_selection
	Range range
	void *plugin
	void *state
	bool usable

class BufferBox
	int offset, num
	float r[], l[]
	string peak[]
	extern void __assign__(BufferBox other)
	extern void clear()
	extern Range range()
	extern void get_spectrum(complex spec_r[], complex spec_l[], int samples)

class Synthesizer
	string name
	int sample_rate
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void AddTone(BufferBox buf, Range range, float pitch, float volume)
	extern void AddMetronomeClick(BufferBox buf, int pos, int level, float volume)

class DummySynthesizer : Synthesizer
	extern void __init__()
	extern overwrite void AddTone(BufferBox buf, Range range, float pitch, float volume)

class TrackRenderBuffer
	int dummy
	
class Bar
	int num_beats
	int length
	int type
	int count
	
	bool is_selected


class MidiNote
	Range range
	float pitch
	float volume

class MidiData
	MidiNote note[]
	string synthesizer
	string instrument
	string options
	void add(int offset, int length, float pitch, float volume)
		MidiNote n
		n.range.offset = offset
		n.range.length = length
		n.pitch = pitch
		n.volume = volume
		self.note.add(n)

enum
	TRACK_TYPE_AUDIO
	TRACK_TYPE_TIME
	TRACK_TYPE_MIDI

class TrackLevel
	BufferBox buffer[]

class SampleRef // TODO
	int dummy

class Track
	int type
	string name
	TrackLevel level[]
	int length, pos

	float volume, panning
	bool muted
	
	int rep_num
	int rep_delay
	
	AudioEffect fx[]
	SampleRef *sample[]
	
	// time track
	Bar bar[]
	
	// midi track
	MidiData midi
	Synthesizer *synth

	// editing
	rect area
	int parent
	void *root

	bool is_selected

	//TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	extern BufferBox GetBuffers(int level_no, Range r)
	extern BufferBox ReadBuffers(Range r)
	extern void InsertMidiData(int offset, MidiData midi)

class Tag
	string key, value

class AudioFile
	bool used
	string filename
	Tag tag[]
	int sample_rate

	float volume
	
	AudioEffect fx[]
	Track *track[]

	rect area

	Range selection
	Range sel_raw
	
	string level_name[]
	
	extern int GetNextBeat(int pos)


class AudioOutput
	extern void Stop()
	extern void Play(AudioFile a, bool loop)
	extern void PlayGenerated(void *func, int sample_rate)
	extern bool IsPlaying()
	extern int GetPos()
	extern float GetSampleRate()
	extern float GetVolume()
	extern void SetVolume(float volume)
	extern void SetBufferSize(int size)

class AudioInput //: Observable
	BufferBox cur_buf, buf
	MidiData midi
	extern void Start(int type, int sample_rate)
	extern void Stop()
	extern bool IsCapturing()
	extern void ResetSync()
	extern int GetDelay()
	extern int GetSampleCount()
	extern void Accumulate(bool enable)
	extern void ResetAccumulation()
	extern void AddObserver(void *handler, void *func)
	extern void RemoveObserver(void *handler)


class Log
	extern void Error(string message)
	extern void Warning(string message)
	extern void Info(string message)

class PluginContext
	Track *track
	int track_no
	int level
	Range range

extern window MainWin
extern AudioFile *audio
extern AudioOutput *output
extern AudioInput *input
extern Log *logging
extern PluginContext plugin_context


extern void fft_c2c(complex in[], complex out[], bool inverse)
extern void fft_r2c(float in[], complex out[])
extern void fft_c2r_inv(complex in[], float out[])


/*extern void ProgressStart(string s, float progress)
extern void ProgressEnd()
extern void Progress(string s, float progress)*/

extern BufferBox AudioFileRender(AudioFile *a, Range r)

extern void PutFavoriteBarFixed(window win, int x, int y, int w)
extern void PutFavoriteBarSizable(window win, string root_id, int x, int y)
extern void PutCommandBarFixed(window win, int x, int y, int w)
extern void PutCommandBarSizable(window win, string root_id, int x, int y)
extern void AddSlider(window win, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
extern void SliderSet(window win, string id, float value)
extern float SliderGet(window win, string id)
extern void RemoveSliders(window win)
extern Synthesizer *CreateSynthesizer(string name)
