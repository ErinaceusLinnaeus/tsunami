/*--------------------------------------------------------------------*\
|                                                                      |
| header for Tsunami plugin api                                        |
|                                                                      |
|    (c) by MichiSoft TM 2010                                          |
|                                                                      |
| Don't even think of changing anything within this file!              |
|    (unless you dare dying a cruel death)                             |
|                                                                      |
\*--------------------------------------------------------------------*/

//#define NUM_PEAK_LEVELS		24

//#define val_min			-32766
//#define val_max			32766


//#define NUM_CAPTURE_SAMPLES		8192

const int NUM_PEAK_LEVELS = 24

class Range
	int offset, length
	int end()
		return offset + length

class PluginData
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void reset()

/*class ConfigPanel : Panel
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void update()*/

class AudioEffect
	string name
	bool only_on_selection
	Range range
	bool usable
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void process(BufferBox buf)
	extern virtual void resetConfig()
	extern virtual void resetState()
	extern virtual Panel *createPanel()
	extern virtual void updateDialog()
	extern void notify()

class MidiEffect
	string name
	bool only_on_selection
	Range range
	bool usable
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void process(MidiData midi)
	extern virtual void resetConfig()
	extern virtual void resetState()
	extern virtual Panel *createPanel()
	extern virtual void updateDialog()
	extern void notify()

class BufferBox
	int offset, num
	float r[], l[]
	string peak[]
	extern void __assign__(BufferBox other)
	extern void clear()
	extern Range range()
	extern void get_spectrum(complex spec_r[], complex spec_l[], int samples)

class Synthesizer
	string name
	int sample_rate
	int keep_notes
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void renderNote(BufferBox buf, Range range, float pitch, float volume)
	extern virtual Panel *createPanel()
	extern virtual void updateDialog()
	extern virtual void reset()
	extern virtual void resetConfig()
	extern virtual int read(BufferBox buf)
	extern void set(float pitch, float volume, int offset)
	extern void renderMetronomeClick(BufferBox buf, int pos, int level, float volume)
	extern void _reset()
	extern void notify()

class DummySynthesizer : Synthesizer
	extern void __init__()
	extern overwrite void renderNote(BufferBox buf, Range range, float pitch, float volume)

class TrackRenderBuffer
	int dummy
	
class BarPattern
	int num_beats
	int length
	int type
	int count
	
	bool is_selected


class MidiNote
	Range range
	float pitch
	float volume

class MidiData
	MidiNote note[]
	void add(int offset, int length, float pitch, float volume)
		MidiNote n
		n.range.offset = offset
		n.range.length = length
		n.pitch = pitch
		n.volume = volume
		note.add(n)

enum
	TRACK_TYPE_AUDIO
	TRACK_TYPE_TIME
	TRACK_TYPE_MIDI

class TrackLevel
	BufferBox buffer[]

class SampleRef // TODO
	int dummy


enum
	TYPE_AUDIO
	TYPE_TIME
	TYPE_MIDI

class Track
	int type
	string name
	TrackLevel level[]
	int length, pos

	float volume, panning
	bool muted
	
	int rep_num
	int rep_delay
	
	AudioEffect *fx[]
	SampleRef *sample[]
	
	// time track
	BarPattern bar[]
	
	// midi track
	MidiData midi
	Synthesizer *synth

	// editing
	rect area
	int parent
	AudioFile *root

	bool is_selected

	//TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	extern BufferBox getBuffers(int level_no, Range r)
	extern BufferBox readBuffers(Range r)
	
	extern void setName(string name)
	extern void setMuted(bool muted)
	extern void setVolume(float volume)
	extern void setPanning(float panning)
	extern void insertMidiData(int offset, MidiData midi)
	extern void addEffect(AudioEffect *effect)
	extern void deleteEffect(int index)
	extern void editEffect(int index, string param_old)
	extern void enableEffect(int index, bool enabled)
	extern SampleRef *addSample(int pos, int index)
	extern void deleteSample(int index)
	extern void editSample(int index, float volume, bool mute, int rep_num, int rep_delay)
	extern void addMidiNote(MidiNote n)
	extern void addMidiNotes(MidiNote notes[])
	extern void deleteMidiNote(int index)
	extern void setSynthesizer(Synthesizer *synth)
	extern void addBars(int index, float bpm, int beats, int bars)
	extern void addPause(int index, float time)
	extern void editBar(int index, BarPattern p)
	extern void deleteBar(int index)

class Tag
	string key, value

class AudioFile
	bool used
	string filename
	Tag tag[]
	int sample_rate

	float volume
	
	AudioEffect fx[]
	Track *track[]

	rect area
	
	string level_name[]
	
	extern Range getRange()
	extern int getNextBeat(int pos)
	
	extern void newEmpty(int sample_rate)
	extern Track *addTrack(int type, int index)
	extern void deleteTrack(int index)

class AudioView
	Range sel_range
	Range sel_raw


class AudioRenderer
	extern void renderAudioFile(AudioFile *a, Range r, BufferBox buf)
	extern void prepare(AudioFile *a, Range r, bool allow_loop)
	//extern virtual int read(BufferBox b)


class AudioOutput
	extern void stop()
	extern void play(AudioRenderer *r)
	extern void playGenerated(void *func, int sample_rate)
	extern bool isPlaying()
	extern int getPos()
	extern float getSampleRate()
	extern float getVolume()
	extern void setVolume(float volume)
	extern void setBufferSize(int size)

class AudioInput //: Observable
	BufferBox cur_buf, buf
	MidiData midi
	extern void start(int type, int sample_rate)
	extern void stop()
	extern bool isCapturing()
	extern void resetSync()
	extern int getDelay()
	extern int getSampleCount()
	extern void accumulate(bool enable)
	extern void resetAccumulation()
	extern void addObserver(void *handler, void *func)
	extern void removeObserver(void *handler)

class Storage
	extern bool load(AudioFile *a, string filename)
	extern bool save(AudioFile *a, string filename)

class Log
	extern void error(string message)
	extern void warning(string message)
	extern void info(string message)

class PluginContext
	Track *track
	int track_no
	int level
	Range range

extern Window *MainWin
extern AudioFile *audio
extern AudioOutput *output
extern AudioInput *input
extern AudioRenderer *renderer
extern AudioView *view
extern Log *logging
extern PluginContext plugin_context
extern Storage *storage


extern void fft_c2c(complex in[], complex out[], bool inverse)
extern void fft_r2c(float in[], complex out[])
extern void fft_c2r_inv(complex in[], float out[])


/*extern void ProgressStart(string s, float progress)
extern void ProgressEnd()
extern void Progress(string s, float progress)*/

extern bool AllowTermination()
extern void CreateSlider(Panel *panel, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
extern void CreateSliderM(Panel *panel, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
extern void SliderSet(Panel *panel, string id, float value)
extern float SliderGet(Panel *panel, string id)
extern void RemoveSliders(Panel *panel)
extern Synthesizer *CreateSynthesizer(string name)
