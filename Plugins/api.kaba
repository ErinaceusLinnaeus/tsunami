/*--------------------------------------------------------------------*\
|                                                                      |
| header for Tsunami plugin api                                        |
|                                                                      |
|    (c) by MichiSoft TM 2010                                          |
|                                                                      |
| Don't even think of changing anything within this file!              |
|    (unless you dare dying a cruel death)                             |
|                                                                      |
\*--------------------------------------------------------------------*/

//#define NUM_PEAK_LEVELS		24

//#define val_min			-32766
//#define val_max			32766


//#define NUM_CAPTURE_SAMPLES		8192

const int NUM_PEAK_LEVELS = 24

const int DEFAULT_SAMPLE_RATE = 44100

const int MAX_PITCH = 128

class Range
	int offset, length
	int end()
		return offset + length
Range _Range(int offset, int length)
	Range r
	r.offset = offset
	r.length = length
	return r


class MidiNote
	Range range
	float pitch
	float volume
	int stringno, clef_position, modifier
MidiNote _MidiNote(Range r, float pitch, float volume)
	MidiNote n
	n.range = r
	n.pitch = pitch
	n.volume = volume
	n.stringno = -1
	n.clef_position = -1
	n.modifier = 0
	return n

class MidiEvent
	int pos
	float pitch
	float volume
MidiEvent _MidiEvent(int pos, float pitch, float volume)
	MidiEvent e
	e.pos = pos
	e.pitch = pitch
	e.volume = volume
	return e

class MidiEventBuffer extends MidiEvent[]
	int samples
	extern override void __init__()
	extern MidiNote[] getNotes(Range r)
	extern MidiEvent[] getEvents(Range r)
	extern Range getRange()
	void addNote(MidiNote n)
		add(_MidiEvent(n.range.offset, n.pitch, n.volume))
		add(_MidiEvent(n.range.end(), n.pitch, 0))
	extern void addMetronomeClick(int pos, int level, float volume)

class MidiNoteBuffer extends MidiNote*[]
	int samples
	extern override void __init__()
	extern MidiNote*[] getNotes(Range r)
	extern MidiEvent[] getEvents(Range r)
	extern Range getRange()

class PluginData
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void reset()

class ConfigPanel extends Panel
	extern void __init__(void *c)
	extern override void __delete__()
	extern virtual void update()
	extern void notify()
	void *c

class AudioEffect
	string name
	Session* session
	bool usable
	Song *song
	int sample_rate
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void process(AudioBuffer buf)
	extern void resetConfig()
	extern void resetState()
	extern virtual ConfigPanel *createPanel()
	//extern virtual void updateDialog()
	//extern void notify()
	extern virtual void onConfig()

class MidiEffect
	string name
	Session* session
	bool usable
	Song *song
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void process(MidiNoteBuffer midi)
	extern void resetConfig()
	extern void resetState()
	extern virtual ConfigPanel *createPanel()
	//extern virtual void updateDialog()
	//extern void notify()
	extern virtual void onConfig()
	extern void note(float pitch, float volume, int beats)
	extern void skip(int beats)
	extern void note_x(float pitch, float volume, int beats, int sub_beats, int beat_partition)
	extern void skip_x(int beats, int sub_beats, int beat_partition)

class AudioBuffer
	int offset, length
	int channels
	float[] r, l
	string[] peaks
	extern void __init__()
	extern void __delete__()
	extern void __assign__(AudioBuffer other)
	extern void clear()
	extern Range range()
	extern void set(AudioBuffer b, int offset, float volume)
	extern void add(AudioBuffer b, int offset, float volume, float panning)
	extern void get_spectrum(complex[] spec_r, complex[] spec_l, int samples)

class RingBuffer
	extern int available()
	extern void read(AudioBuffer b)
	extern void write(AudioBuffer b)
	extern void readRef(AudioBuffer b, int size)
	extern void peekRef(AudioBuffer b, int size)
	extern void writeRef(AudioBuffer b, int size)
	extern void moveReadPos(int delta)
	extern void moveWritePos(int delta)
	extern void clear()
	void __assign__(RingBuffer o)

// general "interface"
class AudioPort
	extern void __init__()
	extern virtual void __delete__()
	extern virtual int read(AudioBuffer buf)
	extern virtual void reset()
	extern virtual int sample_rate()

class MidiSource
	extern void __init__()
	extern virtual void __delete__()
	extern virtual int read(MidiEventBuffer midi)

class SynthOutput extends AudioPort
	extern override int read(AudioBuffer buf)
	extern override void reset()
	extern override int sample_rate()

class Synthesizer
	string name
	Session* session
	int sample_rate
	int keep_notes
	float[MAX_PITCH] freq
	float[MAX_PITCH] delta_phi
	int[] active_pitch
	MidiEventBuffer events
	SynthOutput* out
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void render(AudioBuffer buf)
	extern virtual ConfigPanel *createPanel()
	extern void resetState()
	extern void resetConfig()
	extern void setSampleRate(int sample_rate)
	extern void set_source(MidiSource* source)
	
//	extern void feed(MidiEventBuffer midi)
	
	extern void enablePitch(int pitch, bool enable)
	//extern void notify()
	extern virtual void onConfig()

class DummySynthesizer extends Synthesizer
	extern override void __init__()
	//extern overwrite void __delete__()
	extern override void render(AudioBuffer buf)

class EnvelopeADSR
	extern void set(float t_attack, float t_decay, float sustain, float t_release, int sample_rate)
	extern void set2(float initial, float peak)
	extern void reset()
	extern void start(float volume)
	extern void end()
	extern float get()
	bool just_killed

class TrackRenderBuffer
	int dummy

class TrackMarker
	Range range
	string text
	AudioEffect*[] fx
	
class Bar
	int num_beats
	int num_sub_beats
	int length

enum
	TRACK_TYPE_AUDIO
	TRACK_TYPE_TIME
	TRACK_TYPE_MIDI

class TrackLayer
	AudioBuffer[] buffers

class Sample // TODO
	string name
	int type
	AudioBuffer buf
	MidiNoteBuffer midi
	float volume
	int uid
	Tag[] tags
	extern SampleRef *createRef()
	extern string getValue(string key)

class SampleRef // TODO
	Sample *origin
	AudioBuffer *buf
	extern void __init__(Sample *sam)
	extern virtual void __delete__()


enum
	TYPE_AUDIO
	TYPE_TIME
	TYPE_MIDI

class Track
	int type
	string name
	TrackLayer[] layers
	int length, pos

	float volume, panning
	bool muted
	
	AudioEffect*[] fx
	SampleRef*[] samples
	
	// midi track
	MidiNoteBuffer midi
	Synthesizer *synth
	
	TrackMarker[] markers

	// editing
	int parent
	Song *song

	//TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	extern AudioBuffer getBuffers(int layer_no, Range r)
	extern AudioBuffer readBuffers(Range r)
	
	extern void setName(string name)
	extern void setMuted(bool muted)
	extern void setVolume(float volume)
	extern void setPanning(float panning)
	extern void insertMidiData(int offset, MidiNoteBuffer midi)
	extern void addEffect(AudioEffect *effect)
	extern void deleteEffect(int index)
	extern void editEffect(int index, string param_old)
	extern void enableEffect(int index, bool enabled)
	extern SampleRef* addSampleRef(int pos, Sample* sample)
	extern void deleteSampleRef(int index)
	extern void editSampleRef(int index, float volume, bool mute, int rep_num, int rep_delay)
	extern void addMidiNote(MidiNote n)
	//extern void addMidiNotes(MidiNoteBuffer midi)
	extern void deleteMidiNote(int index)
	extern void setSynthesizer(Synthesizer *synth)
	extern TrackMarker* addMarker(Range range, string text)
	extern void deleteMarker(int index)
	extern void editMarker(int index, Range range, string text)

class Tag
	string key, value

class SongLayer
	string name
	bool active

class Song
	string filename
	Tag[] tags
	int sample_rate

	float volume
	
	AudioEffect[] fx
	Track*[] tracks
	Sample*[] samples
	
	Bar*[] bars
	
	SongLayer*[] layers
	
	extern void __init__(Session* session)
	extern virtual void __delete__()
	
	extern Range getRange()
	
	extern void newEmpty(int sample_rate)
	extern Track* addTrack(int type, int index)
	extern void deleteTrack(int index)
	extern void addBar(int index, float bpm, int beats, bool affect_midi)
	extern void addPause(int index, float time, bool affect_midi)
	//extern void editBar(int index, BarPattern p, bool affect_midi)
	extern void deleteBar(int index, bool affect_midi)
	extern Sample* addSample(string name, AudioBuffer buf)
	extern void deleteSample(Sample* sample)

class SongSelection
	Range range
	// ...

class ColorScheme
	color background
	color background_track
	color background_track_selected
	color text
	color text_soft1
	color text_soft2
	color text_soft3
	color grid
	color selection
	color hover

class AudioView
	SongSelection sel
	OutputStream* stream
	SongRenderer* renderer
	//InputStreamAny* input
	extern void subscribe(void* handler, void* func, string message)
	extern void unsubscribe(void* handler)

class SongRenderer
	extern void __init__(Song* s)
	extern virtual void __delete__()
	extern void render(Range r, AudioBuffer buf)
	extern void prepare(Range r, bool allow_loop)
	extern virtual int read(AudioBuffer b)
	extern Range range()
	extern int get_pos(int delta)
	extern int seek()
	extern virtual int sample_rate()


class OutputStream
	extern void __init__(Session *session, AudioPort* source)
	extern void __delete__()
	extern void stop()
	extern void play()
	extern void pause(bool pause)
	//extern void setSource(AudioSource *r)
	extern int get_pos()
	extern int sample_rate()
	extern float get_volume()
	extern void set_volume(float volume)
	extern void set_buffer_size(int size)
	extern bool is_paused()
	extern void subscribe(void* handler, void* func, string message)
	extern void unsubscribe(void* handler)

/*class AudioInput //: Observable
	RingBuffer current_buffer
	AudioBuffer buffer
	MidiNoteBuffer midi
	extern void start(int type, int sample_rate)
	extern void stop()
	extern bool isCapturing()
	extern void resetSync()
	extern int getDelay()
	extern int getSampleCount()
	extern void accumulate(bool enable)
	extern void resetAccumulation()
	extern void addObserver(void *handler, void *func)
	extern void removeObserver(void *handler)*/

class MidiPort
	int client, port
	string client_name, port_name

class InputStreamAudio
	RingBuffer current_buffer
	AudioBuffer buffer
	AudioPort* out
	Session* session
	extern void __init__(Session* session, int sample_rate)
	extern virtual void __delete__()
	extern bool start()
	extern void stop()
	extern bool is_capturing()
	extern int sample_rate()
	extern void set_backup_mode(int mode)
	extern void subscribe(void* handler, void* func, string message)
	extern void unsubscribe(void* handler)

class Storage
	extern bool load(Song *s, string filename)
	extern bool save(Song *s, string filename)
	string current_directory

class Session
	int id
	//TsunamiWindow* win
	Window* win
	Song* song
	AudioView* view
	Storage* storage
	
	//DeviceManager* device_manager
	//PluginManager* plugin_manager

	// logging
	extern void i(string msg)
	extern void w(string msg)
	extern void e(string msg)

/*class PluginContext
	Song *song
	Track *track
	int track_no
	int layer
	Range range*/

class Slider
	extern void __init__(Panel *panel, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
	extern virtual void __delete__()
	extern float get()
	extern void set(float f)

class TsunamiPlugin
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void onStart()
	extern virtual void onStop()
	extern void stop()
	Session* session
	Song* song
	string[] args

class SongPlugin
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void apply()
	Session* session
	Song* song

//extern PluginContext plugin_context
extern ColorScheme colors
extern InputStreamAudio* view_input


extern void fft_c2c(complex[] in, complex[] out, bool inverse)
extern void fft_r2c(float[] in, complex[] out)
extern void fft_c2r_inv(complex[] in, float[] out)

extern bool AllowTermination()
extern Synthesizer* CreateSynthesizer(Session* session, string name)
extern AudioEffect* CreateAudioEffect(Session* session, string name)
extern MidiEffect* CreateMidiEffect(Session* session, string name)
extern Sample* SelectSample(Session* session, Panel* panel, Sample* old)
//extern void SetTempBackupFilename(string filename)
