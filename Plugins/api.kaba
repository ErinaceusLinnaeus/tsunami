/*--------------------------------------------------------------------*\
|                                                                      |
| header for Tsunami plugin api                                        |
|                                                                      |
|    (c) by MichiSoft TM 2010                                          |
|                                                                      |
| Don't even think of changing anything within this file!              |
|    (unless you dare dying a cruel death)                             |
|                                                                      |
\*--------------------------------------------------------------------*/

//#define NUM_PEAK_LEVELS		24

//#define val_min			-32766
//#define val_max			32766


//#define NUM_CAPTURE_SAMPLES		8192

const int NUM_PEAK_LEVELS = 24

class EffectParam
	string name, type, value

class AudioEffect
	string filename
	EffectParam param[]
	bool only_on_selection
	int start, end

/*
class sAudioFile
	int fake*/

class Sub
	int dummy

class Range
	int offset, length

class BufferBox
	int _CPLUSPLUS_VIRTUAL_CLASS_DUMMY_
	int offset, num
	float r[], l[]
	string peak[]
	extern void __assign__(BufferBox other)
	extern void clear()
	extern void add_click(int pos, float volume, float freq, int sample_rate)

class TrackRenderBuffer
	int dummy
	
class Bar
	int num_beats
	int length
	int type
	int count
	
	bool is_selected
	int x, width

enum
	TRACK_TYPE_AUDIO
	TRACK_TYPE_TIME

class TrackLevel
	BufferBox buffer[]

class Track
	int _CPLUSPLUS_VIRTUAL_CLASS_DUMMY_
	int type
	string name
	TrackLevel level[]
	int length, pos

	float volume
	bool muted
	
	int rep_num
	int rep_delay
	
	AudioEffect fx[]
	Sub sub[]
	int cur_sub
	
	// time track
	Bar bar[]

	// editing
	int x, y, width, height
	int parent
	void *root

	bool is_selected

	//TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	extern BufferBox GetBuffers(int level_no, Range r)
	extern BufferBox ReadBuffers(Range r)

class Tag
	string key, value

class AudioFile
	int _CPLUSPLUS_VIRTUAL_CLASS_DUMMY_

	string _Data_filename
	int _Data_file_time
	bool _Data_binary_file_format
	void *_Data_action_manager
	string _Observable_observable_name
	int _Observable_observer[]
	string _Observable_observer_message[]
	string _Observable_message_queue[]
	string _Observable_cur_message
	int _Observable_notify_level
	
	bool used
	string filename
	Tag tag[]
	int sample_rate

	float volume
	
	AudioEffect fx[]
	Track track[]

	int x, y, width, height

	Range selection
	int cur_track
	int cur_level

	float view_pos
	float view_zoom
	
	Range sel_raw
	
	string level_name[]


class AudioOutput
	extern void Stop()
	extern void Play(AudioFile a, bool loop)
	extern void PlayGenerated(void *func, int sample_rate)
	extern bool IsPlaying()
	extern int GetPos(AudioFile a)
	extern float GetSampleRate()
	extern float GetVolume()
	extern void SetVolume(float _volume)

class AudioInput
	extern void Start(int sample_rate, bool add_data)
	extern void Stop()

extern window MainWin
extern AudioFile *audio[2], *cur_audio
extern AudioOutput *output
extern AudioInput *input

//extern Track *AddEmptyTrack(AudioFile *a)
//extern void DeleteTrack(AudioFile *a, int n)
//extern Track *AddEmptySubTrack(Track *t, Range r, string name)
//extern void CreateNew(AudioFile *a, int length, int sample_rate)
//extern void CreateTrackBuffers(Track *t)

extern void fft_c2c(complex in[], complex out[], bool inverse)
extern void fft_r2c(float in[], complex out[])
extern void fft_c2r_inv(complex in[], float out[])
extern void fft_i2c(int in[], complex out[])
extern void fft_c2i_inv(complex in[], int out[])

extern BufferBox CaptureBuf, CapturePreviewBuf

extern void ProgressStart(string s, float progress)
extern void ProgressEnd()
extern void Progress(string s, float progress)

extern BufferBox AudioFileRender(AudioFile *a, Range r)

extern void PutFavoriteBarFixed(window win, int x, int y, int w)
extern void PutFavoriteBarSizable(window win, string root_id, int x, int y)
extern void PutCommandBarFixed(window win, int x, int y, int w)
extern void PutCommandBarSizable(window win, string root_id, int x, int y)
extern void AddSlider(window win, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
extern void SliderSet(window win, string id, float value)
extern float SliderGet(window win, string id)
extern void RemoveSliders(window win)
