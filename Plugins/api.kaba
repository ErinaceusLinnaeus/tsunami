/*--------------------------------------------------------------------*\
|                                                                      |
| header for Tsunami plugin api                                        |
|                                                                      |
|    (c) by MichiSoft TM 2010                                          |
|                                                                      |
| Don't even think of changing anything within this file!              |
|    (unless you dare dying a cruel death)                             |
|                                                                      |
\*--------------------------------------------------------------------*/

//#define NUM_PEAK_LEVELS		24

//#define val_min			-32766
//#define val_max			32766


//#define NUM_CAPTURE_SAMPLES		8192

const int NUM_PEAK_LEVELS = 24

const int DEFAULT_SAMPLE_RATE = 44100

class Range
	int offset, length
	int end()
		return offset + length
Range _Range(int offset, int length)
	Range r
	r.offset = offset
	r.length = length
	return r


class MidiNote
	Range range
	float pitch
	float volume
MidiNote _MidiNote(Range r, float pitch, float volume)
	MidiNote n
	n.range = r
	n.pitch = pitch
	n.volume = volume
	return n

class MidiEvent
	int pos
	float pitch
	float volume
MidiEvent _MidiEvent(int pos, float pitch, float volume)
	MidiEvent e
	e.pos = pos
	e.pitch = pitch
	e.volume = volume
	return e

class MidiData : MidiEvent[]
	int samples
	extern void __init__()
	extern MidiNote[] getNotes(Range r)
	extern MidiEvent[] getEvents(Range r)
	extern Range getRange()
	void addNote(MidiNote n)
		add(_MidiEvent(n.range.offset, n.pitch, n.volume))
		add(_MidiEvent(n.range.end(), n.pitch, 0))

class PluginData
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void reset()

class ConfigPanel : Panel
	extern void __init__(void *c)
	extern virtual void __delete__()
	extern virtual void update()
	extern void notify()
	void *c

class AudioEffect
	string name
	bool only_on_selection
	Range range
	bool usable
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void process(BufferBox buf)
	extern void resetConfig()
	extern void resetState()
	extern virtual ConfigPanel *createPanel()
	//extern virtual void updateDialog()
	//extern void notify()
	extern virtual void onConfig()

class MidiEffect
	string name
	bool only_on_selection
	Range range
	bool usable
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void process(MidiData midi)
	extern void resetConfig()
	extern void resetState()
	extern virtual ConfigPanel *createPanel()
	//extern virtual void updateDialog()
	//extern void notify()
	extern virtual void onConfig()

class BufferBox
	int offset, num
	float[] r, l
	string[] peaks
	extern void __assign__(BufferBox other)
	extern void clear()
	extern Range range()
	extern void set(BufferBox b, int offset, float volume)
	extern void add(BufferBox b, int offset, float volume, float panning)
	extern void get_spectrum(complex[] spec_r, complex[] spec_l, int samples)

class RingBuffer
	extern int available()
	extern void read(BufferBox b)
	extern void write(BufferBox b)
	extern void readRef(BufferBox b, int size)
	extern void peekRef(BufferBox b, int size)
	extern void writeRef(BufferBox b, int size)
	extern void moveReadPos(int delta)
	extern void moveWritePos(int delta)
	extern void clear()
	void __assign__(RingBuffer o)

class AudioRendererInterface
	extern void __init__()
	extern virtual void __delete__()
	extern virtual int read(BufferBox buf)
	extern virtual void reset()
	extern virtual Range range()
	extern virtual int getPos()
	extern virtual int seek()
	extern virtual int getSampleRate()

class Synthesizer
	string name
	int sample_rate
	int keep_notes
	float[128] delta_phi
	int[] active_pitch
	MidiData events
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void render(BufferBox buf)
	extern virtual ConfigPanel *createPanel()
	extern void resetState()
	extern void resetConfig()
	extern void setSampleRate(int sample_rate)
	extern virtual int read(BufferBox buf)
	
	extern void addMetronomeClick(int pos, int level, float volume)
	extern void feed(MidiEvent[] events)
	
	extern void enablePitch(int pitch, bool enable)
	//extern void notify()
	extern virtual void onConfig()

class DummySynthesizer : Synthesizer
	extern void __init__()
	//extern virtual void __delete__()
	extern overwrite void render(BufferBox buf)

class SynthesizerRenderer
	extern void resetMidiData()
	extern virtual int read(BufferBox buf)
	extern virtual void reset()
	extern void add(MidiEvent e)
	extern virtual int getSampleRate()

class EnvelopeADSR
	extern void set(float t_attack, float t_decay, float sustain, float t_release, int sample_rate)
	extern void set2(float initial, float peak)
	extern void reset()
	extern void start(float volume)
	extern void end()
	extern float get()
	bool just_killed

class TrackRenderBuffer
	int dummy

class TrackMarker
	int pos
	string text
	
class BarPattern
	int num_beats
	int length
	int type
	int count
	
	bool is_selected

enum
	TRACK_TYPE_AUDIO
	TRACK_TYPE_TIME
	TRACK_TYPE_MIDI

class TrackLevel
	BufferBox[] buffers

class Sample // TODO
	string name
	int type
	BufferBox buf
	MidiData midi
	float volume
	int uid
	extern SampleRef *createRef()

class SampleRef // TODO
	Sample *origin
	BufferBox *buf
	extern void __init__(Sample *sam)
	extern virtual void __delete__()


enum
	TYPE_AUDIO
	TYPE_TIME
	TYPE_MIDI

class Track
	int type
	string name
	TrackLevel[] levels
	int length, pos

	float volume, panning
	bool muted
	
	int rep_num
	int rep_delay
	
	AudioEffect[] *fx
	SampleRef[] *samples
	
	// time track
	BarPattern[] bars
	
	// midi track
	MidiData midi
	Synthesizer *synth
	
	TrackMarker[] markers

	// editing
	int parent
	AudioFile *root

	bool is_selected

	//TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	extern BufferBox getBuffers(int level_no, Range r)
	extern BufferBox readBuffers(Range r)
	
	extern void setName(string name)
	extern void setMuted(bool muted)
	extern void setVolume(float volume)
	extern void setPanning(float panning)
	extern void insertMidiData(int offset, MidiData midi)
	extern void addEffect(AudioEffect *effect)
	extern void deleteEffect(int index)
	extern void editEffect(int index, string param_old)
	extern void enableEffect(int index, bool enabled)
	extern SampleRef *addSample(int pos, int index)
	extern void deleteSample(int index)
	extern void editSample(int index, float volume, bool mute, int rep_num, int rep_delay)
	extern void addMidiEvent(MidiEvent e)
	extern void addMidiEvents(MidiEvent[] events)
	extern void deleteMidiEvent(int index)
	extern void setSynthesizer(Synthesizer *synth)
	extern void addBars(int index, float bpm, int beats, int bars)
	extern void addPause(int index, float time)
	extern void editBar(int index, BarPattern p)
	extern void deleteBar(int index)
	extern void addMarker(int pos, string text)
	extern void deleteMarker(int index)
	extern void moveMarker(int index, int pos)

class Tag
	string key, value

class AudioFile
	string filename
	Tag[] tags
	int sample_rate

	float volume
	
	AudioEffect[] fx
	Track*[] tracks
	Sample*[] samples
	
	string[] level_names
	
	extern void __init__()
	extern virtual void __delete__()
	
	extern Range getRange()
	extern int getNextBeat(int pos)
	
	extern void newEmpty(int sample_rate)
	extern Track *addTrack(int type, int index)
	extern void deleteTrack(int index)

class ColorScheme
	color background
	color background_track
	color background_track_selected
	color text
	color text_soft1
	color text_soft2
	color text_soft3
	color grid
	color selection
	color hover

class AudioView
	Range sel_range
	Range sel_raw
	AudioStream *stream
	AudioRenderer *renderer
	ColorScheme colors

class AudioRenderer
	extern void __init__()
	extern virtual void __delete__()
	extern void renderAudioFile(AudioFile *a, Range r, BufferBox buf)
	extern void prepare(AudioFile *a, Range r, bool allow_loop)
	extern virtual int read(BufferBox b)
	extern virtual void reset()
	extern virtual Range range()
	extern virtual int getPos()
	extern virtual int seek()
	extern virtual int getSampleRate()


class AudioStream
	extern void __init__(AudioRendererInterface *r)
	extern void __delete__()
	extern void stop()
	extern void play()
	extern void pause()
	//extern void setSource(AudioRendererInterface *r)
	extern bool isPlaying()
	extern int getPos()
	extern float getSampleRate()
	extern float getVolume()
	extern void setVolume(float volume)
	extern void setBufferSize(int size)

class AudioInput //: Observable
	RingBuffer current_buffer
	BufferBox buffer
	MidiData midi
	extern void start(int type, int sample_rate)
	extern void stop()
	extern bool isCapturing()
	extern void resetSync()
	extern int getDelay()
	extern int getSampleCount()
	extern void accumulate(bool enable)
	extern void resetAccumulation()
	extern void addObserver(void *handler, void *func)
	extern void removeObserver(void *handler)

class Storage
	extern bool load(AudioFile *a, string filename)
	extern bool save(AudioFile *a, string filename)
	string current_directory

class Log
	extern void error(string message)
	extern void warning(string message)
	extern void info(string message)

class PluginContext
	Track *track
	int track_no
	int level
	Range range

extern Window *MainWin
extern AudioFile *audio
//extern AudioOutput *output
extern AudioInput *input
extern AudioView *view
extern Log *logging
extern PluginContext plugin_context
extern Storage *storage


extern void fft_c2c(complex[] in, complex[] out, bool inverse)
extern void fft_r2c(float[] in, complex[] out)
extern void fft_c2r_inv(complex[] in, float[] out)


/*extern void ProgressStart(string s, float progress)
extern void ProgressEnd()
extern void Progress(string s, float progress)*/

extern bool AllowTermination()
extern void CreateSlider(Panel *panel, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
extern void CreateSliderM(Panel *panel, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
extern void SliderSet(Panel *panel, string id, float value)
extern float SliderGet(Panel *panel, string id)
extern void RemoveSliders(Panel *panel)
extern Synthesizer *CreateSynthesizer(string name)
extern Sample *SelectSample(Panel *panel, AudioFile *a, Sample *old)
