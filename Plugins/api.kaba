/*--------------------------------------------------------------------*\
|                                                                      |
| header for Tsunami plugin api                                        |
|                                                                      |
|    (c) by MichiSoft TM 2010                                          |
|                                                                      |
| Don't even think of changing anything within this file!              |
|    (unless you dare dying a cruel death)                             |
|                                                                      |
\*--------------------------------------------------------------------*/

//#define NUM_PEAK_LEVELS		24

//#define val_min			-32766
//#define val_max			32766


//#define NUM_CAPTURE_SAMPLES		8192

const int NUM_PEAK_LEVELS = 24

const int DEFAULT_SAMPLE_RATE = 44100

const int MAX_PITCH = 128

class Range
	int offset, length
	int end()
		return offset + length
Range _Range(int offset, int length)
	Range r
	r.offset = offset
	r.length = length
	return r


class MidiNote
	Range range
	float pitch
	float volume
	int stringno, clef_position, modifier
MidiNote _MidiNote(Range r, float pitch, float volume)
	MidiNote n
	n.range = r
	n.pitch = pitch
	n.volume = volume
	n.stringno = -1
	n.clef_position = -1
	n.modifier = 0
	return n

class MidiEvent
	int pos
	float pitch
	float volume
MidiEvent _MidiEvent(int pos, float pitch, float volume)
	MidiEvent e
	e.pos = pos
	e.pitch = pitch
	e.volume = volume
	return e

class MidiEventBuffer extends MidiEvent[]
	int samples
	extern override void __init__()
	extern MidiNote[] get_notes(Range r)
	extern MidiEvent[] get_events(Range r)
	extern Range get_range()
	void add_note(MidiNote n)
		add(_MidiEvent(n.range.offset, n.pitch, n.volume))
		add(_MidiEvent(n.range.end(), n.pitch, 0))
	extern void add_metronome_click(int pos, int level, float volume)

class MidiNoteBuffer extends MidiNote*[]
	int samples
	extern override void __init__()
	extern MidiNote*[] get_notes(Range r)
	extern MidiEvent[] get_events(Range r)
	extern Range get_range()

class PluginData
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void reset()

class ConfigPanel extends Panel
	extern void __init__(void *c)
	extern override void __delete__()
	extern virtual void update()
	extern virtual void set_large(bool large)
	extern void changed()
	void *c


class Module
	string name
	Session* session
	bool usable
	extern void __init__()
	extern virtual void __delete__()
	extern void reset_config()
	extern virtual void reset_state()
	extern virtual ConfigPanel *create_panel()
	extern void changed()
	extern virtual void on_config()
	extern virtual PluginData* get_config()
	extern virtual string config_to_string()
	extern virtual void config_from_string(string s)
	extern virtual void module_start()
	extern virtual void module_stop()
	extern virtual void module_pause(bool paused)
	extern void subscribe(void* handler, func* f, string message)
	extern void unsubscribe(void* handler)

class AudioEffect extends Module
	AudioPort *out
	extern override void __init__()
	extern override void __delete__()
	extern virtual void process(AudioBuffer buf)

class MidiEffect extends Module
	MidiPort *out
	extern override void __init__()
	extern override void __delete__()
	extern virtual void process(MidiNoteBuffer midi)
	extern void note(float pitch, float volume, int beats)
	extern void skip(int beats)
	extern void note_x(float pitch, float volume, int beats, int sub_beats, int beat_partition)
	extern void skip_x(int beats, int sub_beats, int beat_partition)

class AudioVisualizer extends Module
	AudioPort *out
	int chunk_size
	extern override void __init__()
	extern override void __delete__()
	extern virtual void process(AudioBuffer buf)
	extern virtual void reset()
	extern void set_chunk_size(int chunk_size)

class AudioBuffer
	int offset, length
	int channels
	float[] r, l
	string[] peaks
	extern void __init__()
	extern void __delete__()
	extern void __assign__(AudioBuffer other)
	extern void clear()
	extern Range range()
	extern void resize(int length)
	extern void set(AudioBuffer b, int offset, float volume)
	extern void add(AudioBuffer b, int offset, float volume, float panning)
	extern void get_spectrum(complex[] spec_r, complex[] spec_l, int samples)

class RingBuffer
	extern int available()
	extern void read(AudioBuffer b)
	extern void write(AudioBuffer b)
	extern void read_ref(AudioBuffer b, int size)
	extern void read_ref_done(AudioBuffer b)
	extern void peek_ref(AudioBuffer b, int size)
	extern void write_ref(AudioBuffer b, int size)
	extern void write_ref_done(AudioBuffer b)
	//extern void move_read_pos(int delta)
	//extern void move_write_pos(int delta)
	extern void clear()
	void __assign__(RingBuffer o)

// general "interface"
class AudioPort
	extern void __init__()
	extern virtual void __delete__()
	extern virtual int read(AudioBuffer buf)
	extern virtual void reset()
	extern virtual int get_pos(int delta)

class AudioSource extends Module
	extern override void __init__()
	extern override void __delete__()
	extern virtual int read(AudioBuffer buf)
	extern virtual void reset()
	extern virtual int get_pos(int delta)
	AudioPort *out

class MidiPort
	extern void __init__()
	extern virtual void __delete__()
	extern virtual int read(MidiEventBuffer midi)
	extern virtual void reset()

class MidiSource extends Module
	extern override void __init__()
	extern override void __delete__()
	extern virtual int read(MidiEventBuffer midi)
	extern virtual void reset()
	MidiPort *out
	extern void set_beat_source(BeatPort *source)

class Synthesizer extends Module
	int sample_rate
	int keep_notes
	float[MAX_PITCH] freq
	float[MAX_PITCH] delta_phi
	int[] active_pitch
	MidiEventBuffer events
	AudioPort* out
	extern override void __init__()
	extern override void __delete__()
	extern virtual void render(AudioBuffer buf)
	extern void set_sample_rate(int sample_rate)
	extern void set_source(MidiPort* source)
//	extern void feed(MidiEventBuffer midi)
	extern void enable_pitch(int pitch, bool enable)

class DummySynthesizer extends Synthesizer
	extern override void __init__()
	//extern overwrite void __delete__()
	extern override void render(AudioBuffer buf)

class EnvelopeADSR
	extern void set(float t_attack, float t_decay, float sustain, float t_release, int sample_rate)
	extern void set2(float initial, float peak)
	extern void reset()
	extern void start(float volume)
	extern void end()
	extern float get()
	bool just_killed


class BeatPort
	extern void __init__()
	extern virtual void __delete__()
	extern virtual int read(Beat[] beats, int samples)
	extern virtual void reset()

class BeatSource extends Module
	extern override void __init__()
	extern override void __delete__()
	extern virtual int read(Beat[] beats, int samples)
	extern virtual void reset()
	extern virtual int beats_per_bar()
	extern virtual int cur_beat()
	extern virtual float beat_fraction()
	BeatPort *out

class BeatMidifier extends MidiSource
	extern override void __init__()
	//extern override void __delete__()
	extern override int read(MidiEventBuffer midi)
	extern override void reset()
	float volume

class TrackRenderBuffer
	int dummy

class TrackMarker
	Range range
	string text
	AudioEffect*[] fx
	
class Bar
	int num_beats
	int num_sub_beats
	int length


class Beat
	Range range
	int bar_index
	int bar_no
	int beat_no
	int level

Beat _Beat(int offset, int level)
	Beat b
	b.range = _Range(offset, 0)
	b.level = level
	b.bar_no = 0
	b.beat_no = 0
	return b

enum
	TRACK_TYPE_AUDIO
	TRACK_TYPE_TIME
	TRACK_TYPE_MIDI

class TrackLayer
	int type
	Track *track
	AudioBuffer[] buffers
	MidiNoteBuffer midi
	SampleRef*[] samples
	
	extern void get_buffers(AudioBuffer buf, Range r)
	extern void read_buffers(AudioBuffer buf, Range r, bool allow_ref)
	extern void insert_midi_data(int offset, MidiNoteBuffer midi)
	extern void add_midi_note(MidiNote *n)
	//extern void add_midi_notes(MidiNoteBuffer midi)
	extern void delete_midi_note(MidiNote *n)
	extern SampleRef* add_sample_ref(int pos, Sample* sample)
	extern void delete_sample_ref(SampleRef *ref)
	extern void edit_sample_ref(SampleRef *ref, float volume, bool mute)

class Sample // TODO
	string name
	int type
	AudioBuffer buf
	MidiNoteBuffer midi
	float volume
	int uid
	Tag[] tags
	extern SampleRef *create_ref()
	extern string get_value(string key)

class SampleRef // TODO
	Sample *origin
	AudioBuffer *buf
	extern void __init__(Sample *sam)
	extern virtual void __delete__()


enum
	TYPE_AUDIO
	TYPE_TIME
	TYPE_MIDI

class Track
	int type
	string name
	TrackLayer*[] layers

	float volume, panning
	bool muted
	
	AudioEffect*[] fx
	MidiEffect*[] midi_fx
	
	Synthesizer *synth
	
	TrackMarker[] markers

	// editing
	Song *song

	//TrackRenderBuffer render_r[NUM_PEAK_LEVELS], render_l[NUM_PEAK_LEVELS]
	
	extern void set_name(string name)
	extern void set_muted(bool muted)
	extern void set_volume(float volume)
	extern void set_panning(float panning)
	extern void add_effect(AudioEffect *effect)
	extern void delete_effect(int index)
	extern void edit_effect(int index, string param_old)
	extern void enable_effect(int index, bool enabled)
	extern void set_synthesizer(Synthesizer *synth)
	extern TrackMarker* add_marker(Range range, string text)
	extern void delete_marker(TrackMarker *marker)
	extern void edit_marker(TrackMarker *marker, Range range, string text)

class Tag
	string key, value
Tag _Tag(string key, string value)
	Tag t
	t.key = key
	t.value = value
	return t

class Song
	string filename
	Tag[] tags
	int sample_rate

	float volume
	
	AudioEffect[] fx
	Track*[] tracks
	Sample*[] samples
	
	Bar*[] bars
	
	extern void __init__(Session* session, int sample_rate)
	extern virtual void __delete__()
	
	extern Range range()
	
	extern Track* add_track(int type, int index)
	extern void delete_track(int index)
	extern void add_bar(int index, float bpm, int beats, bool affect_midi)
	extern void add_pause(int index, float time, bool affect_midi)
	//extern void edit_bar(int index, BarPattern p, bool affect_midi)
	extern void delete_bar(int index, bool affect_midi)
	extern Sample* add_sample(string name, AudioBuffer buf)
	extern void delete_sample(Sample* sample)

class SongSelection
	Range range
	// ...

class ColorScheme
	color background
	color background_track
	color background_track_selected
	color text
	color text_soft1
	color text_soft2
	color text_soft3
	color grid
	color selection
	color hover

class AudioView
	SongSelection sel
	OutputStream* stream
	SongRenderer* renderer
	//InputStreamAny* input
	extern void subscribe(void* handler, func* f, string message)
	extern void unsubscribe(void* handler)

class SongRenderer extends AudioSource
	extern void __init__(Song* s)
	extern override void __delete__()
	extern void render(Range r, AudioBuffer buf)
	extern void prepare(Range r, bool allow_loop)
	extern override int read(AudioBuffer b)
	extern override int get_pos(int delta)
	extern override void reset()
	extern Range range()
	extern int seek()
	extern BeatSource* get_beat_source()


class OutputStream extends Module
	extern void __init__(Session *session, AudioPort* source)
	extern override void __delete__()
	extern void stop()
	extern void play()
	extern void pause(bool pause)
	//extern void setSource(AudioSource *r)
	extern int get_pos()
	extern float get_volume()
	extern void set_volume(float volume)
	extern void set_buffer_size(int size)
	extern void set_update_dt(float dt)
	extern bool is_paused()

/*class AudioInput //: Observable
	RingBuffer current_buffer
	AudioBuffer buffer
	MidiNoteBuffer midi
	extern void start(int type, int sample_rate)
	extern void stop()
	extern bool isCapturing()
	extern void resetSync()
	extern int getDelay()
	extern int getSampleCount()
	extern void accumulate(bool enable)
	extern void resetAccumulation()
	extern void addObserver(void *handler, void *func)
	extern void removeObserver(void *handler)*/

class _MidiPort
	int client, port
	string client_name, port_name

class InputStreamAudio extends Module
	RingBuffer current_buffer
	AudioBuffer buffer
	AudioPort* out
	extern void __init__(Session* session)
	extern override void __delete__()
	extern bool start()
	extern void stop()
	extern bool is_capturing()
	extern int sample_rate()
	extern void set_backup_mode(int mode)

class Storage
	extern bool load(Song *s, string filename)
	extern bool save(Song *s, string filename)
	extern bool save_via_renderer(AudioPort *source, string filename, int num_samples, Tag[] tags)
	string current_directory

class Session
	int id
	//TsunamiWindow* win
	Window* win
	Song* song
	SongRenderer *song_renderer
	OutputStream *output_stream
	AudioView* view
	Storage* storage
	
	extern int sample_rate()
	
	//DeviceManager* device_manager
	//PluginManager* plugin_manager

	// logging
	extern void i(string msg)
	extern void w(string msg)
	extern void e(string msg)
	
	extern void play()
	extern void stop()

/*class PluginContext
	Song *song
	Track *track
	int track_no
	int layer
	Range range*/

class Slider
	extern void __init__(Panel *panel, string id_slider, string id_edit, float v_min, float v_max, float factor, void *func, float value)
	extern virtual void __delete__()
	extern float get()
	extern void set(float f)

class TsunamiPlugin extends Module
	extern override void __init__()
	extern override void __delete__()
	extern virtual void on_start()
	extern virtual void on_stop()
	extern void stop()
	string[] args

class SongPlugin
	extern void __init__()
	extern virtual void __delete__()
	extern virtual void apply()
	Session* session
	Song* song

//extern PluginContext plugin_context
extern ColorScheme colors
extern InputStreamAudio* view_input


extern void fft_c2c(complex[] in, complex[] out, bool inverse)
extern void fft_r2c(float[] in, complex[] out)
extern void fft_c2r_inv(complex[] in, float[] out)

extern bool AllowTermination()
extern Synthesizer* CreateSynthesizer(Session* session, string name)
extern AudioSource* CreateAudioSource(Session* session, string name)
extern AudioEffect* CreateAudioEffect(Session* session, string name)
extern MidiSource* CreateMidiSource(Session* session, string name)
extern MidiEffect* CreateMidiEffect(Session* session, string name)
extern BeatMidifier* CreateBeatMidifier(Session* session)
extern BeatSource* CreateBeatSource(Session* session, string name)
extern Sample* SelectSample(Session* session, Panel* panel, Sample* old)
//extern void SetTempBackupFilename(string filename)

extern void draw_boxed_str(Painter *c, float x, float y, string str, color col_text, color col_bg)
