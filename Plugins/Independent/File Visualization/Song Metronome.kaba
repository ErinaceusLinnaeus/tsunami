# Image = hui:media-play
# Title[Deutsch] = Song Metronom
use hui
use tsunami

enum AnimationMode
	CIRCLE
	BOUNCE
	BOUNCE_WALK

let UPDATE_DT = 1.0 / 50
let MAX_BACKGROUND_REDNESS = 0.7
let MOTION_BLUR_COUNT = 20

# part uncertainty...
let DELTA = 400

struct BlurredDot
	var pos, pos0: vec2
	var has_prev = false
	func mut move(x: float, y: float)
		pos0 = pos
		pos.x = x
		pos.y = y
		has_prev = true
	func mut jump(x: float, y: float)
		pos.x = x
		pos.y = y
		has_prev = false
	func mut draw(p: Painter, c: color, r: float)
		if has_prev
			var dt = 1.0 / MOTION_BLUR_COUNT
			var cc = c
			cc.a = sqrt(dt)
			p.set_color(cc)
			for t in 0.0:1.0:dt
				var tt = pow(t-0.5, 3)*4+0.5
				p.draw_circle([pos.x * tt + pos0.x * (1-tt), pos.y * tt + pos0.y * (1-tt)], r)
		else
			p.set_color(c)
			p.draw_circle(pos, r)

class MetronomePanel extends ConfigPanel
	var metro: Metronome&
	var fraction_prev: float
	
	var fullscreen: bool
	var allow_blink_background: bool
	var allow_blink_number: bool
	var mode: AnimationMode
	var popup_menu: owned![Menu]
	
	var dot: BlurredDot
	var sr_id: int
	
	func __init__(_metro: Metronome&)
		super.__init__(_metro)
		from_source("
Grid ? '' vertical
	DrawingArea area ''")

		metro := _metro
		fraction_prev = 0
		
		fullscreen = false
		mode = AnimationMode.from_int(hui.app_config.get_int("Plugins/Metronome/Mode", int(AnimationMode.BOUNCE_WALK)))
		allow_blink_background = hui.app_config.get_bool("Plugins/Metronome/AllowBlinkBackground", true)
		allow_blink_number = hui.app_config.get_bool("Plugins/Metronome/AllowBlinkNumber", true)
		
		popup_menu = new Menu(&self)
		popup_menu.add_checkable("Blink background", "blink-background")
		popup_menu.add_checkable("Blink number", "blink-number")
		var sub_mode = new Menu(&self)
		sub_mode.add_checkable("Circle", "mode-circle")
		sub_mode.add_checkable("Bounce", "mode-bounce")
		sub_mode.add_checkable("Bounce walk", "mode-bounce-walk")
		popup_menu.add_sub_menu("Animation", "sub-menu-mode", give(sub_mode))
	
		event_x("area", "hui:draw", on_draw)
		event_x("area", "hui:right-button-down", on_area_right_button_down)
		
		event("blink-background", on_blink_background)
		event("blink-number", on_blink_number)
		event("mode-circle", on_mode_circle)
		event("mode-bounce", on_mode_bounce)
		event("mode-bounce-walk", on_mode_bounce_walk)
		#event("fullscreen", on_fullscreen)
		
		sr_id = hui.run_repeated(UPDATE_DT, on_update)
	
	func override __delete__()
		hui.cancel_runner(sr_id)
	
	func on_update()
		redraw("area")
	
	func mut on_draw(p: Painter)
		var source = metro.session.view.renderer.get_beat_source()
		for s in source
			draw(p, s)
	
	func mut draw(p: Painter, source: BeatSource)
		var w: float = p.width
		var h: float = p.height
		var x0 = w / 2
		var y0 = h / 2
		var r = min(x0, y0) * 0.9
		
		
		var cur_bar = source.cur_bar()
		var beat_fraction = source.beat_fraction()
		var cur_beat = source.cur_beat()
		var num_beats = source.beats_per_bar()
		
		var closeness = beat_fraction*2-1
		if beat_fraction < 0.5
			closeness = 1 - beat_fraction*2
		var bar_fraction = (cur_beat + beat_fraction) / num_beats
		
		# background
		var bg = colors.background
		if allow_blink_background
			bg = color.interpolate(color.RED, colors.background, 1 - MAX_BACKGROUND_REDNESS*pow(closeness, 15))
		p.set_color(bg)
		p.draw_rect([0, w, 0, h])
		
		if mode == AnimationMode.CIRCLE
			# circle
			p.set_line_width(r*0.05)
			p.set_color(color.interpolate(colors.grid, colors.background, 0.5))
			p.set_fill(false)
			p.draw_circle([x0, y0], r)
		
			# top point
			p.set_fill(true)
			p.set_color(colors.text_soft3)
			p.draw_circle([x0, y0 - r], r*0.07)
		
			# moving point
			var t = beat_fraction - 0.5
			var phi = 2 *pi * (2*t*t*t + t/2)
			dot.move(x0 - sin(phi) * r, y0 + cos(phi) * r)
			dot.draw(p, colors.text, r*0.1)
		else if mode == AnimationMode.BOUNCE
			var t = beat_fraction
			dot.move(x0 + r, y0 + r - 2*abs(sin(t*pi)) * r)
			dot.draw(p, colors.text, r*0.1)
		else if mode == AnimationMode.BOUNCE_WALK
			p.set_color(colors.text_soft3)
			for i in 0:num_beats
				var tx = loop((i + 0.5)/num_beats, 0, 1)
				if i == 0
					p.draw_circle([w * tx, y0 + r], r*0.05)
				else
					p.draw_circle([w * tx, y0 + r], r*0.03)
			
			var t = beat_fraction
			var tx = loop(bar_fraction + 0.5/num_beats, 0, 1)
			if w*tx < dot.pos.x
				dot.jump(w*tx, y0 + r - 2*abs(sin(t*pi)) * r)
			else
				dot.move(w*tx, y0 + r - 2*abs(sin(t*pi)) * r)
			dot.draw(p, colors.text, r*0.1)
		
		# beat number
		var fs = r * 0.5
		if allow_blink_number
			fs *= (1 + pow(closeness,5) * 0.2)
		if cur_beat == 0
			p.set_color(colors.text)
		else
			fs *= 0.8
			p.set_color(colors.text_soft2)
		p.set_font_size(fs)
		p.draw_str([x0-fs*0.4, y0-fs/2], str(cur_beat + 1))
		
		draw_part_info(p, cur_bar)
		
		fraction_prev = beat_fraction
	
	func draw_part_info(p: Painter, cur_bar_index: int)
		for t in metro.session.song.time_track()
			draw_part_info_x(p, cur_bar_index, t)
			
	func draw_part_info_x(p: Painter, cur_bar_index: int, t: Track&)
		var w: float = p.width
		var h: float = p.height
		var song = metro.session.song
		
		var cur_bar = weak(song.bars[cur_bar_index])
		var next_bar: Bar* = nil
		if cur_bar_index + 1 < len(song.bars)
			next_bar = weak(song.bars[cur_bar_index + 1])
		
		for b in cur_bar
			var offset = b.offset
			var cur_part = get_part(&!t, offset + DELTA)
			var next_part = get_part(&!t, offset + b.length + DELTA)
			p.set_color(colors.text_soft2)
			var fs = h * 0.08
			p.set_font_size(fs)
			for cp in cur_part
				p.draw_str([10, 5], cp.text)
				var first_bar = bar_index(&!song, cp.range.offset + DELTA)
				p.draw_str([w - 5 - fs*3, 5], str((b.index - first_bar) + 2))
	
			var change: string
			for np in next_part
				if next_part != cur_part
					change = np.text
			for nb in next_bar
				if len(nb.beats) != len(b.beats)
					change += "  {{len(nb.beats)}}/â‚„"
				var cur_bpm = b.bpm(song.sample_rate)
				var next_bpm = nb.bpm(song.sample_rate)
				if abs(cur_bpm - next_bpm) > 2
					change += "  {{next_bpm|.0}} bpm"
			if len(change) > 0
				p.set_color(colors.text)
				p.draw_str([20, 5 + fs*1.2 + 5], "> {{change}}")
				
	
	func mut on_area_right_button_down()
		popup_menu.check("blink-background", allow_blink_background)
		popup_menu.check("blink-number", allow_blink_number)
		popup_menu.check("mode-circle", mode == AnimationMode.CIRCLE)
		popup_menu.check("mode-bounce", mode == AnimationMode.BOUNCE)
		popup_menu.check("mode-bounce-walk", mode == AnimationMode.BOUNCE_WALK)
		popup_menu.popup(&self)
	
	func mut on_blink_background()
		allow_blink_background = not allow_blink_background
		hui.app_config["Plugins/Metronome/AllowBlinkBackground"] = allow_blink_background
	
	func mut on_blink_number()
		allow_blink_number = not allow_blink_number
		hui.app_config["Plugins/Metronome/AllowBlinkNumber"] = allow_blink_number
	
	func mut on_mode_circle()
		mode = AnimationMode.CIRCLE
		hui.app_config["Plugins/Metronome/Mode"] = int(mode)
	
	func mut on_mode_bounce()
		mode = AnimationMode.BOUNCE
		hui.app_config["Plugins/Metronome/Mode"] = int(mode)
	
	func mut on_mode_bounce_walk()
		mode = AnimationMode.BOUNCE_WALK
		hui.app_config["Plugins/Metronome/Mode"] = int(mode)
	
	#void on_fullscreen()
#		fullscreen = !fullscreen
#		set_fullscreen(fullscreen)
#		#show_control()


func bar_index(song: Song&, offset: int) -> int
	for i=>b in song.bars
		if b.offset >= offset
			return i
	return 0


func get_part(t: Track&, offset: int) -> TrackMarker*
	for m in t.layers[0].markers
		if m.range.inside(offset)
			return weak(m)
	return nil

class Metronome extends TsunamiPlugin
	
	func override on_start()
		session.view.signal_chain.set_update_dt(UPDATE_DT)
		session.view.signal_chain.set_buffer_size(1024)
			
	func override create_panel() -> xfer[ConfigPanel]
		return new MetronomePanel(&!self)
		
	func override on_stop()
		pass
