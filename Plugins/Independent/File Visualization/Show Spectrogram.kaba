# Image = hui:find
# Title[Deutsch] = Spektrum zeigen
use hui
use image
use tsunami
use helper.grid

##show
##disasm

const N = 4096*2 # fft size
const NT = 512 # time bins
const NF = 512*2 # freq bins
const MIN_FREQ = 60.0
const MAX_FREQ = 3000.0
const MIN_VOL = -60.0
const MAX_VOL = 0.0

var im0: Image

class SpecGrid extends Grid
	func override on_draw(c: Painter)
		let r = plot_area
		let w = r.width()
		let h = r.height()
		
		let fy = im0.height / r.height()
		let ya = (log(y_axis.data.val_max) - log(y_axis.data.val_min)) / (log(y_axis.data.val_max_max) - log(y_axis.data.val_min_min)) * fy
		let yb = (log(y_axis.data.val_max_max) - log(y_axis.data.val_max)) / (log(y_axis.data.val_max_max) - log(y_axis.data.val_min_min)) * im0.height
		let fx = im0.width / r.width()
		let xa = (x_axis.data.val_max - x_axis.data.val_min) / (x_axis.data.val_max_max - x_axis.data.val_min_min) * fx
		let xb = (x_axis.data.val_min - x_axis.data.val_min_min) / (x_axis.data.val_max_max - x_axis.data.val_min_min) * im0.width
		
		var im: Image
		im.create(w, h, color.BLACK)
		for x in 0:w
			for y in 0:h
				im.set_pixel(x, y, im0.get_pixel(x * xa + xb, y * ya + yb))
		c.draw_image([r.x1, r.y1], im)
	
		#Image *im = im0.scale(r.width(), r.height())
#		c.DrawImage(r.x1, r.y1, *im)
#		delete(im)

class SpectrumDialog extends Dialog
	var grid: SpecGrid
	func __init__(plugin: ShowSpectrogram, song: Song)
		super.__init__("Spectrum", 600, 460, plugin.session.win, true)
		set_options("", "headerbar,resizable")
		from_source("
Grid ? ''
	DrawingArea drawing_area ''
	---|
	Grid ? '' buttonbar
		Button close 'Close' image=hui:close")
		
		var view = plugin.session.view
		
		grid.init(self, "drawing_area")
		grid.x_axis.set(view.sel.range().offset / float(song.sample_rate), view.sel.range().end() / float(song.sample_rate), false, "s")
		grid.y_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		#grid.allow_bg = false
	
		event("close", on_close)

	func mut on_close()
		destroy()

func f2col(_f: float) -> color
	var f = sqrt(_f)
	if f < 0.333
		return color(0, 0, f*3, f*3)
	else if f < 0.6666
		return color(f*3 - 1, 0, 2 - f*3, 1)
	return color(1, f*3 - 2, 0, 1)

class ShowSpectrogram extends TsunamiPlugin

	var dlg: shared![SpectrumDialog]
	var sg: float[NF][NT]

	func mut show_spec(song: shared![Song])
		dlg = new SpectrumDialog(self, song)
	
		var buf: AudioBuffer
		var renderer = new SongRenderer(song)
		renderer.render(session.view.sel.range(), buf)
	
		var f: complex[]
		var sub: float[]
		sub.resize(N)
	
		var _max: float = 0
	
		var log_max_min = log(MAX_FREQ / MIN_FREQ)
	
		for t in 0:NT
			# time slice
			var offset: int = (buf.length - N) * t / NT
		
			for j in 0:N
				sub[j] = buf.c[0][offset + j]
			fft.r2c(sub, f)
			var ww = float(N) / song.sample_rate
			for i in 0:NF
				# frequency slice
				var fmin = MIN_FREQ * exp( log_max_min / (NF - 1) * i)
				var fmax = MIN_FREQ * exp( log_max_min / (NF - 1) * (i + 1))
				var j0: int = fmin * ww
				var j1: int = fmax * ww + 1
				j0 = clamp(j0, 0, len(f))
				j1 = clamp(j1, 0, len(f))
				
				# find maximum amplitude in that frequency interval
				var bmaxr: float = 0
				for j in j0:j1
					var amp = f[j].x * f[j].x + f[j].y * f[j].y
					if bmaxr < amp
						bmaxr = amp
				_max = max(_max, bmaxr)
				sg[t][i] = bmaxr
	
		im0.create(NT, NF, color.BLACK)
		for t in 0:NT
			for i in 0:NF
				var ff = sg[t][i] / _max
				im0.set_pixel(t, NF - i - 1, f2col(ff))
	

		dlg.redraw("drawing_area")

		hui.fly(dlg, stop)

	func override on_start()
	
		if session.view.sel.range().length > 0
			show_spec(session.song)
		else
			session.e("'Show Spectrogram.kaba': Needs some selection!")
