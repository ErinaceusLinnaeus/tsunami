# Image = hui:find
# Title[Deutsch] = Spektrum zeigen
use hui
use tsunami
use helper.grid

const N = 512
const MIN_FREQ = 20.0
const MAX_FREQ = 20000.0
const MIN_VOL = -60.0
const MAX_VOL = 0.0

var dlg: SpectrumDialog*

enum SpectrumType
	LINEAR
	LOG

#float[] x, yr, yl
var ffr, ffl: float[]

#GridData grid

#int w, h

func todb(v: float) -> float
	return log(v) / log(10) * 10

var peak_max: float

class SpecGrid extends Grid
	var type: SpectrumType
	var pr, pl: vec2[]

	func mut create_lines()
		pr.resize(N)
		pl.resize(N)
		for i in 0:N
			var x = log2lin(float(i) / float(N), MIN_FREQ, MAX_FREQ)
			pr[i].x = x
			pl[i].x = x
			if type == SpectrumType.LINEAR
				pr[i].y = ffr[i]
				pl[i].y = ffl[i]
			else #if type == SpectrumType.LOG
				var vol_max = todb(peak_max)
				var vol_min = vol_max - 60
				pr[i].y = clamp(todb(ffr[i]), vol_min, vol_max)
				pl[i].y = clamp(todb(ffl[i]), vol_min, vol_max)
	func mut set_type(t: SpectrumType)
		type = t
		if type == SpectrumType.LINEAR
			y_axis.set(0, peak_max, false, "")
		else #if type == SpectrumType.LOG
			var vol_max = todb(peak_max)
			var vol_min = vol_max - 60
			y_axis.set(vol_min, vol_max, false, "db")
		create_lines()

	func override on_draw(c: Painter)
		draw_curve_b(c, pr, true, color.RED)
		draw_curve_b(c, pl, true, color.BLUE)

class SpectrumDialog extends Dialog
	var grid: SpecGrid
	func __init__(plugin: TsunamiPlugin)
		super.__init__("Spectrum", 600, 460, plugin.session.win, true)
		set_options("", "headerbar,resizable")
		from_source("
Grid ? ''
	DrawingArea drawing_area ''
	---|
	Grid ? '' buttonbar
		ComboBox type 'Linear\\Logarithm'
		Button close 'Close' image=hui:close")
		
		grid.init(self, "drawing_area")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
	
		event("type", on_type)
		event("hui:close", on_close)
		event("close", on_close)
	
		set_int("type", int(SpectrumType.LOG))

	func mut on_type()
		var t = SpectrumType.from_int(get_int("type")) # ...
		grid.set_type(t)
		grid.redraw()

	func mut on_close()
		destroy()

class ShowSpectrum extends TsunamiPlugin
	func mut show_spec(song: Song)
		dlg = new SpectrumDialog(self)
	
		var buf: AudioBuffer
		var renderer = new SongRenderer(song)
		renderer.render(session.view.sel.range(), buf)
		del renderer
	
		var fr, fl: complex[]
	
		let len2 = len(buf) / 2 + 1
		fr.resize(len2)
		fl.resize(len2)
		#ff.clear()
		#fft_r2c(buf.r, fr)
		#fft_r2c(buf.l, fl)
		buf.get_spectrum(fr, fl, 4096)
	
		let ww = float(len(buf)) / song.sample_rate
		for i in 0:N
			let fmin = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * i)
			let fmax = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * (i + 1))
			var j0 = int(fmin * ww)
			var j1 = int(fmax * ww + 1)
			j0 = clamp(j0, 0, len2)
			j1 = clamp(j1, 0, len2)
			var bmaxr = 0.0
			var bmaxl = 0.0
			for j in j0:j1
				let ampr = fr[j].x * fr[j].x + fr[j].y * fr[j].y
				if bmaxr < ampr
					bmaxr = ampr
				let ampl = fl[j].x * fl[j].x + fl[j].y * fl[j].y
				if bmaxl < ampl
					bmaxl = ampl
			ffr.add(bmaxr)
			ffl.add(bmaxl)

		peak_max = max(max(ffr), max(ffl))
		let mmax = sqr(buf.length) / 4
		if mmax > 0
			ffr /= mmax
			ffl /= mmax
		peak_max /= mmax

		dlg.on_type()

		hui.fly(dlg, stop)

	func override on_start()
		if session.view.sel.range().length > 0
			show_spec(session.song)
		else
			session.e("'Show Spectrum.kaba': Needs some selection!")
			stop()
