use tsunami
use helper.tone


class XXX extends TsunamiPlugin
	func override on_start()
		if len(session.song.bars) == 0
			session.e("song doesn't contain any bars")
			stop()
			return

		int n = 0
		session.song.begin_action_group("guess chords")
		for l in session.song.layers()
			if session.view.sel.has_layer(l) and l.type == SignalType.MIDI
				guess_chords(l, session.view.sel.range())
				n ++
		session.song.end_action_group()
		if n == 0
			session.e("no midi track selected")
		stop()

	func guess_chords(out l: TrackLayer, r: Range)
		for b in session.song.bars.get_bars(r)
			Range rr = b.range()
			string chord = guess_chord(l.midi.get_notes(rr), rr)
			l.add_marker(new TrackMarker(b.range(), chord))
	
	func score_overlap(midi: MidiNote*[], pitch: int[], r: Range) -> int
		int score = 0
		for n in midi
			for p in pitch
				if (int(n.pitch + 0.1) - p + 120) % 12 == 0
					score += (n.range and r).length
		return score
	
	func guess_chord(midi: MidiNote*[], r: Range) -> string
		Chord best
		int best_score = 0
		for p in 0:12
			for t in 0:3
				Chord c
				c.base_tone = 60 + p
				c.type = Chord.Type.from_int(t)
				int score = score_overlap(midi, c.pitch(), r)
				if score > best_score
					best_score = score
					best = c
		return best.name()
		
		
	func first_bar(offset: int) -> int
		for b,i in session.song.bars
			if b.offset >= offset -100
				return i
		return -1
