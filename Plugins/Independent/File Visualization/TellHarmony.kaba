use tsunami
use helper.tone
use hui

func next_ending(notes: MidiNote*[]) -> int
	var e = notes[0].range.end()
	var next = 0
	for n,i in notes
		if n.range.end() < e
			next = i
			e = n.range.end()
	return next

class Harmony
	var notes: MidiNote*[]
	var range: Range
	var chord: Chord
	var pp: int[]
	func mut calc()
		pp = [for n in notes int(n.pitch) % 12]
		chord = Chord.guess(pp)

		

func track_harmony_step(pos0: int, pos1: int, out r: Harmony[], out active: MidiNote*[])
	if pos1 < pos0 + 200
		return
	var p = pos0
	while len(active) > 0
		var ni = next_ending(active)
		var n = active[ni]
		var end = min(n.range.end(), pos1)
		var h: Harmony
		h.notes = active
		h.range = RangeTo(p, end)
		if p + 200 < end
			r.add(h)
		active.remove(ni)
		p = end
		if p + 200 > pos1
			break
		

func track_harmony(midi: MidiNoteBuffer) -> Harmony[]
	var r: Harmony[]
	if len(midi) == 0
		return r
	
	var active: MidiNote*[]
	var pos = midi[0].range.offset
	for n in weak(midi)
		track_harmony_step(pos, n.range.offset, r, active)
		active.add(n)
		pos = n.range.offset
	track_harmony_step(pos, midi[len(midi)-1].range.end(), r, active)
	return r

class TellHarmony extends TsunamiPlugin
	func override on_draw_post(p: Painter)
		var v = session.view.cur_vlayer()
		
	#	var midi = v.layer.midi.get_notes(session.view.cam.range())
	#	int n = len(v.layer.midi.get_notes(session.view.cam.range()))
		
#		p.set_color(color.RED)
		var harm = track_harmony(v.layer.midi)#midi)
		for h,i in harm
			h.calc()
			var c = colors.pitch_color(h.chord.base_tone)
			c.a = 0.15
			p.set_color(c)
			var x1 = session.view.cam.sample2screen(h.range.offset)
			var x2 = session.view.cam.sample2screen(h.range.end())
			p.draw_rect(rect(x1, x2, v.area.y1, v.area.y2))
			p.set_color(colors.text)
			p.draw_str([x1, v.area.y1], "{{h.chord.name()}}")
			p.draw_str([x1, v.area.y1+30], [for _p in h.pp rel_pitch_name(_p)].join(" "))
