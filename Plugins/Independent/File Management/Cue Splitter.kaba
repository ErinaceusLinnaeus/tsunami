# Image = hui:cut
use os
use hui
use tsunami

struct Part
	var title: string
	var foffset = 0.0

struct CueData
	var parts: Part[]
	var year, album, artist: string?
	var fn: Path?

func sanitize(s: string) -> string
	var t = s.replace("/", " - ")
	#t = t.replace("", " - ")
	return t

class CueSplitter extends TsunamiPlugin
	
	func override on_start()
		var f = func(p: Path)
			if bool(p)
				export_cue(p)
		hui.file_dialog_open(session.win, "", "", ["filter=*.cue", "showfilter=*.cue"], f)
	
	
	
	func load_cue_file(filename: Path) -> CueData?
		let dir = filename.parent()
		var data: CueData
		var cur: Part* = nil
		try
			var f = new TextLinesFormatter(fs.open(filename, "rt"))
			while true
				var s: string
				f >> s
				#print(s)
				
				if s.head(6) == "FILE \""
					data.fn = s[6:-6]
				if s.head(11) == "PERFORMER \""
					data.artist = s[11:-1]
				if s.head(7) == "TITLE \""
					data.album = s[7:-1]
				if s.head(6) == "YEAR \""
					data.year = s[6:-1]
				if s.head(8) == "  TRACK "
					data.parts.add(Part())
					cur = &data.parts[len(data.parts)-1]
				if s.head(11) == "    TITLE \""
					for c in cur
						c.title = s[11:-1]
						print(c.title)
				if s.head(10) == "    INDEX "
					let soff = s[13:]
					print(soff)
					let xx = soff.explode(":")
					for c in cur
						c.foffset = 60 * float(xx[0]) + float(xx[1]) + float(xx[2]) * 0.01
						print(c.foffset)
			return data
		except
			return nil
	
	func mut export_parts_as_flacs(data: CueData, dir: Path)
		var r = new SongRenderer(session.song)
		
		for i=>p in data.parts
			print("-----")
			var tags: Tag[]
			for a in data.artist
				tags.add(Tag("artist", a))
			for a in data.album
				tags.add(Tag("album", a))
			for y in data.year
				tags.add(Tag("year", y))
			tags.add(Tag("title", p.title))
			tags.add(Tag("tracknumber", str(i+1)))
			let offset = p.foffset * session.song.sample_rate
			var end = session.song.range().length
			if i < len(data.parts)-1
				print(data.parts[i+1].foffset)
				let fsr: float = session.song.sample_rate
				print(fsr)
				let fend = data.parts[i+1].foffset * fsr
				print(fend)
				end = fend
				print(end)
			print("  {{offset}} : {{end}}")
			r.set_range(RangeTo(offset, end))
			let _fn = "{{i+1|02}} - {{sanitize(p.title)}}.flac"
			session.storage.save_via_renderer(r.port_out[0], dir | _fn, end - offset, tags)
	
	func mut export_cue(filename: Path)
		let dir = filename.parent()
		
		let data = load_cue_file(filename)
		for d in data
			for fn in d.fn
				session.storage.load(session.song, dir | fn)
				export_parts_as_flacs(d, dir)
		
		print("-----------------done")
		stop()
		
		
	func override on_stop()
