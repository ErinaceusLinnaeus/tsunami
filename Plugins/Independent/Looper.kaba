
use hui
use tsunami

#class LoopSource extends AudioSource
#	int offset
#	Looper* looper
#	void __init__(Looper l)
#		looper = &l
#	override void reset_state()
#		offset = 0
#	override int read(AudioBuffer buf)
#		if len(looper.buffers) > 0
#			buf.set(*looper.buffers[0], -offset, 1.0)
#			offset += len(buf)
#			if offset >= len(*looper.buffers[0])
#				offset = 0
#		#print("read {{len(buf)}}")
#		return len(buf)



class LooperPanel extends ConfigPanel
	override Looper* c
	override void __init__(Module _c)
		from_source("
Grid ? ''
	Label rec-time '' expandx
	---|
	Button button 'X'")
		activate("button")
		event("button", on_button)
		c.panel = &self
	
	void _update()
		set_string("rec-time", c.session.song.get_time_str_long(len(c.recorder.buffer)))
			
	
	void on_button()
		c.tab()

class Looper extends TsunamiPlugin
	SignalChain* chain
	AudioRecorder* recorder
	LooperPanel* panel
	Song* song
	
	int length
	
	int runner
	int mode
	
	override void on_start()
		panel = nil
		length = 0
		mode = 0
		song = session.song
		chain = session.create_signal_chain("click-counter")
		let input = chain.add(Module.STREAM, "AudioInput")
		recorder = chain.add(Module.PLUMBING, "AudioRecorder")
		let sucker = chain.add(Module.PLUMBING, "AudioSucker")
		chain.connect(input, 0, recorder, 0)
		chain.connect(recorder, 0, sucker, 0)
		
		runner = hui.run_repeated(0.05, self, on_update)
		#chain.subscribe(self, on_update, "Click")
		
		chain.start()
		
	override void on_stop()
		hui.cancel_runner(runner)
		#chain.unsubscribe(&self)
		del chain
	
	void on_update()
		if panel
			panel._update()
	void tab()
		if mode == 0
			rec_start()
		else if mode == 1
			rec_stop()
	
	void rec_start()
		recorder.command(Module.COMMAND_ACCUMULATION_START, 0)
		mode = 1
	void rec_stop()
		recorder.command(Module.COMMAND_ACCUMULATION_STOP, 0)
		
		length = len(recorder.buffer)
		let t = song.add_track(TYPE_AUDIO, 0)
		AudioBuffer tbuf
		let a = t.layers[0].edit_buffers(tbuf, Range(0, length))
		tbuf.set(recorder.buffer, 0, 1.0)
		t.layers[0].edit_buffers_finish(a)
		
		recorder.command(Module.COMMAND_ACCUMULATION_CLEAR, 0)
		mode = 2
		
		session.view.sel.range_raw = Range(0, length)
		session.view.set_playback_loop(true)
		session.view.play()
		session.view.optimize_view()

	override ConfigPanel* create_panel()
		return new LooperPanel(self)
