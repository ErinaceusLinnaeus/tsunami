use tsunami
use PitchDetector.Test
use hui

class SNRPanel extends ConfigPanel
	var override c: SupernovaRhythm*
	var mp: MidiPainter*
	var gp: GridPainter*
	var cam: AudioView.ViewPort*
	var runner: int
	
	func override __init__(_c: Module)
		from_source("
Grid ? ''
	DrawingArea area '' expandx
	---|
	Button button 'X'")
	
		cam = new AudioView.ViewPort(nil)
		mp = new MidiPainter(c.session.song, cam, nil, nil, colors)
		gp = new GridPainter(c.session.song, cam, nil, nil, colors)
	
		activate("button")
		event("button", on_button)
		event_x("area", "hui:draw", on_draw)
		runner = hui.run_repeated(0.05, on_update)
		
	func override __delete__()
		hui.cancel_runner(runner)
	
	func on_update()
		redraw("area")
	
	func on_button()
	
	func mut on_draw(p: Painter)
		var r = rect(0, p.width, 0, p.height)
		cam.area = r
		var pos = c.recorder.buffer.samples
		cam.set_range(Range(pos-44100*3, 44100*5))
		
		var gc: GridColors
		gc.fg = colors.grid
		gc.bg = colors.background
		gp.set_context(r, gc)
		gp.draw_empty_background(p)
		gp.draw_time(p)
		gp.draw_time_numbers(p)
		
		var midi = c.recorder.buffer.get_notes(cam.range())
		
		var ii: Instrument
		ii.type = 6#1
		mp.set_context(r, ii, true, MidiMode.CLASSICAL)
		mp.draw_background(p)
		#mp.draw(p, c.midi)
		mp.draw(p, midi)
		
		p.set_color(color.RED)
		#p.draw_str(100, 100, str(c.pitch_detector.frequency))
		
		for pp,i in c.pitch_detector.pitch_power2
			var x: float = (i-20) * 4
			p.draw_line([x, 0], [x, pp/13])

class SupernovaRhythm extends TsunamiPlugin
	var midi: MidiNoteBuffer
	var chain: SignalChain*
#	PitchDetector
	var pitch_detector: TestDetector*
	var recorder: MidiAccumulator*

	func override on_start()
		
		var dt = 4400 # 100 ms
		midi.add(new MidiNote(RangeTo(dt, dt*3), 60, 1.0))
		midi.add(new MidiNote(RangeTo(dt*4, dt*6), 62, 1.0))
		
		chain = session.create_signal_chain("supernova.recorder")
		var i = chain.add(Module.Type.STREAM, "AudioInput")
		var p = chain.add(Module.Type.PITCH_DETECTOR, "Test")
		#let x = chain.add(Module.Type.AUDIO_EFFECT, "Chunksize")
		var r = chain.add(Module.Type.PLUMBING, "MidiAccumulator")
		var s = chain.add(Module.Type.PLUMBING, "MidiSucker")
		chain.connect(i, 0, p, 0)
		chain.connect(p, 0, r, 0)
		chain.connect(r, 0, s, 0)
		recorder = r
		pitch_detector = p
		chain.set_buffer_size(4096)
		chain.start()
		chain.command(Module.Command.ACCUMULATION_START, 0)
		
	func override on_stop()
		del chain
	

	func override create_panel() -> ConfigPanel*
		return new SNRPanel(self)

