// Image = hui:media-play
// Title[Deutsch] = Oszilloskop
use "../api.kaba"

const int NUM_SAMPLES = 2048

class OscilloscopeDialog extends Dialog
	Oscilloscope* osci
	
	void __init__(Oscilloscope *_osci)
		super.__init__("Oscilloscope", 300, 320, _osci.session.win, true)
		fromSource("
DrawingArea area ''")
		
		osci = _osci
	
		event("hui:close", &onClose)
	
	override void onDraw(Painter *p)
		float w = p.width
		float h = p.height
		
		p.setColor(colors.background)
		p.drawRect(0, 0, w, h)
		
		if osci.stream
			AudioBuffer buf
			osci.stream.getSomeSamples(buf, NUM_SAMPLES)
			p.setColor(color(0.2,0,1,0))
			//p.setLineWidth(0.5)
			float x0, y0, x1, y1
			for i in 0:buf.length
				x1 = w * (buf.r[i] / 2 + 0.5)
				y1 = h * (buf.l[i] / 2 + 0.5)
				p.setColor(color(i2f(i) / NUM_SAMPLES, 0,1,0))
				if i > 0
					p.drawLine(x0, y0, x1, y1)
				x0 = x1
				y0 = y1

	void onClose()
		osci.stop()

class Oscilloscope extends TsunamiPlugin
	OutputStream *stream
	Dialog *dlg
	int n
	
	override void onStart()
		stream = nil
		
		dlg = new OscilloscopeDialog(self)
		dlg.show()
		session.view.subscribe(self, &onViewOutputChange, "OutputChange")
		n = 0
		
	override void onStop()
		session.view.unsubscribe(self)
		stream = nil
		delete dlg
	
	void onViewOutputChange()
		//print("view output...")
		stream = session.view.stream
		if stream
			stream.subscribe(self, &onUpdate, "Update")
		dlg.redraw("area")
	
	void onUpdate()
		n ++
		if n >= 2
			dlg.redraw("area")
			n = 0
