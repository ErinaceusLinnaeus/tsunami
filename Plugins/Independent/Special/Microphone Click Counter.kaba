# Image = hui:find
# Title[Deutsch] = Tonerkennung
use hui
use tsunami
use helper.tone
use MidiSource.Click
use AudioEffect.Special.ClickCounter


class ClickCounterPanel extends ConfigPanel
	var override c: MicrophoneClickCounter*
	func override __init__(_c: Module)
		#super.__init__("Click Counter", 300, 175, _counter.session.win, false)
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_drawing_area("", 0, 0, "drawing")
		add_grid("", 0, 1, "grid2")
		set_target("grid2")
		add_button("+", 0, 0, "inc")
		add_button("-", 1, 0, "dec")
	
		event_x("drawing", "hui:draw", on_draw)
		event("inc", on_increase)
		event("dec", on_decrease)
		
		id = hui.run_repeated(0.05, poll)
	
	func override __delete__()
		hui.cancel_runner(id)
	func poll()
		redraw("drawing")
	var id: int
	


	func draw_volume(p: Painter)
		p.set_color(colors.text_soft3)
		var y0: float = 30
		var y1: float = p.height - 5
		var h = y1 - y0
		p.draw_rect([5, 10, y0 + h * (1 - c.click_counter.volume), y0 + h * (2 - c.click_counter.volume)])
		p.set_color(colors.text_soft2)
		p.draw_line([2, (y0 + y1) / 2], [13, (y0 + y1) / 2])

	func on_draw(p: Painter)
		p.set_color(colors.background)
		p.set_font_size(12)
		p.draw_rect([0, p.width, 0, p.height])
	
		draw_volume(p)
	
		p.set_color(colors.text)
		p.draw_str([100, 100], str(c.click_counter.counter))

	func on_increase()
		c.click_counter.counter ++
		redraw("drawing")

	func on_decrease()
		c.click_counter.counter --
		redraw("drawing")

class MicrophoneClickCounter extends TsunamiPlugin
	
	var chain: SignalChain*
	var source: ClickSource*
	var click_counter: ClickCounter*
	var panel: ClickCounterPanel*
	
	var runner: int
	
	func override on_start()
		panel = nil
		chain = session.create_signal_chain("click-counter")
		var input = chain.add(Module.Type.STREAM, "AudioInput")
		click_counter = chain.add(Module.Type.AUDIO_EFFECT, "ClickCounter")
		var sucker = chain.add(Module.Type.PLUMBING, "AudioSucker")
		source = chain.add(Module.Type.MIDI_SOURCE, "Click")
		var synth = chain.add(Module.Type.SYNTHESIZER, "")
		var out = chain.add(Module.Type.STREAM, "AudioOutput")
		chain.connect(input, 0, click_counter, 0)
		chain.connect(click_counter, 0, sucker, 0)
		chain.connect(source, 0, synth, 0)
		chain.connect(synth, 0, out, 0)
		
		chain.start()
		runner = hui.run_repeated(0.05, on_update)
		
	func override on_stop()
		hui.cancel_runner(runner)
		del chain
	
	func mut on_update()
		if click_counter.emit
			source.click()
			click_counter.emit = false
		if panel
			panel.redraw("drawing")

	
	func override create_panel() -> ConfigPanel*
		return new ClickCounterPanel(self)
