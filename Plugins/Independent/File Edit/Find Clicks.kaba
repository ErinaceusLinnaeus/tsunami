# Image = hui:clear
# Title[Deutsch] = Klicks Entfernen
use tsunami

const MAX_CLICK_SAMPLES = 128
const MIN_CLICK_SAMPLES = 8
const CLICK_ABS_THRESHOLD = 0.0
const CLICK_DIFF_THRESHOLD = 0.4

func click_start(last: float, cur: float) -> bool
	return abs(cur) > CLICK_ABS_THRESHOLD and abs(cur - last) > CLICK_DIFF_THRESHOLD

func click_end(last: float, cur: float) -> bool
	return abs(cur) < CLICK_ABS_THRESHOLD and abs(cur - last) > CLICK_DIFF_THRESHOLD

func find_clicks(b: float[]) -> int[]
	int[] clicks
	for i in 1:len(b)-1
		if click_start(b[i-1], b[i])
			clicks.add(i)
			int j1 = min(len(b), i + MAX_CLICK_SAMPLES)
			for j in i:j1
				if click_end(b[j-1], b[j])
					i = j
					clicks.add(i)
					break
	
	for i in 0:len(clicks)-2:2
		if clicks[i+2] - clicks[i+1] < MIN_CLICK_SAMPLES
			clicks.remove(i+2)
			clicks.remove(i+1)
			i -= 2
	print(clicks)
	return clicks

func unclick(out b: float[], out l: TrackLayer, offset: int)
	int[] clicks = find_clicks(b)
	for i in 0:len(clicks):2
		l.add_marker(new TrackMarker(Range(clicks[i  ] + offset, clicks[i+1]-clicks[i]), "click"))
		#l.addMarker(clicks[i+1] + offset, "]")

class FindClicks extends TsunamiPlugin

	func override on_start()
		for t in weak(session.song.tracks)
			for l in weak(t.layers)
				for buf in l.buffers
					for c in buf.c
						unclick(c, l, buf.offset)
		stop()
