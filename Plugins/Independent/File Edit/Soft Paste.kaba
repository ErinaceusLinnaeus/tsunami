use hui
use tsunami

# t in [0,1]
func step(t: float) -> float
	return 1 - 1/(exp((t-0.5)*12) + 1)

class SoftPaste extends TsunamiPlugin
	func soft_paste(source: AudioBuffer, out dest: TrackLayer, r: Range)
		int l = min(len(source), len(r))
		AudioBuffer buf
		var a = dest.edit_buffers(buf, Range(r.offset, l))
		int ll = min(2000, l/4)
		for i in 0:l
			float x = 1
			if i < ll
				x = step(float(i) / ll)
			if i > l - ll
				x = step(float(l - i) / ll)
			buf.c[0][i] = x * source.c[0][i] + (1-x) * buf.c[0][i]
			buf.c[1][i] = x * source.c[1][i] + (1-x) * buf.c[1][i]
		dest.edit_buffers_finish(a)
	
	func check_clipboard() -> bool
		if len(clipboard.temp.tracks) == 0
			return false
		if clipboard.temp.tracks[0].type != SignalType.AUDIO
			return false
		return true
		
	
	func override on_start()
		if !check_clipboard()
			session.e("'Soft Paste': needs a single audio track in clipboard!")
			stop()
			return
		if len(session.view.sel.range()) == 0
			session.e("'Soft Paste': needs some selection!")
			stop()
			return

		int n = 0
		for t in weak(session.song.tracks)
			if t.type == SignalType.AUDIO
				for l in weak(t.layers)
					if session.view.sel.has_layer(l)
						soft_paste(clipboard.temp.tracks[0].layers[0].buffers[0], l, session.view.sel.range())
						n ++

		if n == 0
			session.e("'Soft Paste': no selected audio track")
			stop()
			return
		stop()