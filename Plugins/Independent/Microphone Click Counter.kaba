# Image = hui:find
# Title[Deutsch] = Tonerkennung
use hui
use tsunami
use helper.tone
use MidiSource.Click
use AudioEffect.Special.ClickCounter


class ClickCounterPanel extends ConfigPanel
	override MicrophoneClickCounter* c
	override void __init__(Module _c)
		#super.__init__("Click Counter", 300, 175, _counter.session.win, false)
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_drawing_area("", 0, 0, "drawing")
		add_grid("", 0, 1, "grid2")
		set_target("grid2")
		add_button("+", 0, 0, "inc")
		add_button("-", 1, 0, "dec")
	
		event_x("drawing", "hui:draw", on_draw)
		event("inc", on_increase)
		event("dec", on_decrease)
		
		id = hui.run_repeated(0.05, self, poll)
	
	override void __delete__()
		hui.cancel_runner(id)
	void poll()
		redraw("drawing")
	int id
	


	void draw_volume(Painter p)
		p.set_color(colors.text_soft3)
		float y0 = 30
		float y1 = p.height - 5
		float h = y1 - y0
		p.draw_rect(5, y0 + h * (1 - c.click_counter.volume), 5, h)
		p.set_color(colors.text_soft2)
		p.draw_line(2, (y0 + y1) / 2, 13, (y0 + y1) / 2)

	void on_draw(Painter p)
		p.set_color(colors.background)
		p.set_font_size(12)
		p.draw_rect(0, 0, p.width, p.height)
	
		draw_volume(p)
	
		p.set_color(colors.text)
		p.draw_str(100, 100, str(c.click_counter.counter))

	void on_increase()
		c.click_counter.counter ++
		redraw("drawing")

	void on_decrease()
		c.click_counter.counter --
		redraw("drawing")

class MicrophoneClickCounter extends TsunamiPlugin
	
	SignalChain* chain
	ClickSource* source
	ClickCounter* click_counter
	ClickCounterPanel* panel
	
	int runner
	
	override void on_start()
		panel = nil
		chain = session.create_signal_chain("click-counter")
		let input = chain.add(Module.STREAM, "AudioInput")
		click_counter = chain.add(Module.AUDIO_EFFECT, "ClickCounter")
		let sucker = chain.add(Module.PLUMBING, "AudioSucker")
		source = chain.add(Module.MIDI_SOURCE, "Click")
		let synth = chain.add(Module.SYNTHESIZER, "")
		let out = chain.add(Module.STREAM, "AudioOutput")
		chain.connect(input, 0, click_counter, 0)
		chain.connect(click_counter, 0, sucker, 0)
		chain.connect(source, 0, synth, 0)
		chain.connect(synth, 0, out, 0)
		
		chain.start()
		runner = hui.run_repeated(0.05, self, on_update)
		
	override void on_stop()
		hui.cancel_runner(runner)
		del chain
	
	void on_update()
		if click_counter.emit
			source.click()
			click_counter.emit = false
		if panel
			panel.redraw("drawing")

	
	override ConfigPanel* create_panel()
		return new ClickCounterPanel(self)
