// Image = hui:find
// Title[Deutsch] = Tonerkennung
use "../api.kaba"
use "../tone.kaba"

const float THRESHOLD1 = 0.20
const float THRESHOLD2 = 0.15
const float RECOVER_TIME = 0.40

class ClickSource : MidiSource
	bool emit_click
	override void __init__()
		emit_click = false
	override int read(MidiRawData midi)
		if emit_click
			midi.add(_MidiEvent(0, 80, 1))
			midi.add(_MidiEvent(1, 80, 0))
			emit_click = false
		return midi.samples
	void click()
		emit_click = true

class ClickCounterDialog : Dialog
	MicrophoneClickCounter *counter
	void __init__(MicrophoneClickCounter *_counter)
		super.__init__("Click Counter", 300, 175, _counter.win, false)
		addGrid("", 0, 0, 1, 2, "grid")
		setTarget("grid", 0)
		addDrawingArea("", 0, 0, 0, 0, "drawing")
		addGrid("", 0, 1, 3, 1, "grid2")
		setTarget("grid2", 0)
		addButton("+", 0, 0, 0, 0, "inc")
		addButton("-", 1, 0, 0, 0, "dec")
		addButton("Close", 2, 0, 0, 0, "close")
		setImage("close", "hui:close")
		
		counter = _counter
	
		//eventX("drawing", "hui:draw", &onDraw)
		event("inc", &onIncrease)
		event("dec", &onDecrease)
		event("hui:close", &onClose)
		event("close", &onClose)


	void drawVolume(Painter *c)
		c.setColor(color(1, 0.8, 0.8, 0.8))
		float y0 = 30
		float y1 = c.height - 5
		float h = y1 - y0
		c.drawRect(5, y0 + h * (1 - counter.Volume), 5, h)
		c.setColor(color(1, 0.6, 0.6, 0.6))
		c.drawLine(2, (y0 + y1) / 2, 13, (y0 + y1) / 2)

	override void onDraw(Painter *c)
		c.setColor(White)
		c.setFontSize(12)
		c.drawRect(0, 0, c.width, c.height)
	
		drawVolume(c)
	
		c.setColor(Black)
		c.drawStr(100, 100, counter.counter.str())

	void onClose()
		counter.end()

	void onIncrease()
		counter.counter ++
		redraw("drawing")

	void onDecrease()
		counter.counter --
		redraw("drawing")

class MicrophoneClickCounter : TsunamiPlugin

	InputStreamAudio *input
	OutputStream *stream
	Synthesizer *synth
	MidiRenderer *renderer
	ClickSource *source

	float Volume
	int counter

	bool active
	int active_ttl
	Dialog *dlg
	
	override void onStart()

		counter = 2265
		active = false
		active_ttl = -1
	
		source = new ClickSource
		synth = CreateSynthesizer("")
		renderer = new MidiRenderer(synth, source)
		stream = new OutputStream(renderer)
		stream.setBufferSize(2048)
		stream.play()
		
		dlg = new ClickCounterDialog(self)
		dlg.show()
		
		input = new InputStreamAudio(DEFAULT_SAMPLE_RATE)
		input.start()
		input.addObserver(self, &onInput)
		
	override void onEnd()
		input.removeObserver(self)
		input.stop()
		
		delete dlg
		delete input
	
		delete stream
		delete renderer
		delete synth

	void onInput()
		int available = input.current_buffer.available()
	
		BufferBox buf
		input.current_buffer.readRef(buf, available)
	
		float[] temp
		temp = buf.r + buf.l
	
		int recover_samples = DEFAULT_SAMPLE_RATE * RECOVER_TIME
	
		Volume = 0
		for f,i in temp
			if f > Volume
				Volume = f
			if f > THRESHOLD1
				if !active
					print("start")
					active = true
					source.click()
					if !stream.isPlaying()
						stream.play()
					counter ++
					print(counter)
					active_ttl = recover_samples
			if active and (active_ttl > 0)
				if f > THRESHOLD2
					active_ttl = recover_samples
				else
					active_ttl --
			if active and (active_ttl <= 0)
				print("end")
				active = false
				active_ttl = -1
	
		dlg.redraw("drawing")
