# Image = hui:find
# Title[Deutsch] = Tonerkennung
use hui
use "../api.kaba"
use "../helper/tone.kaba"
use "../MidiSource/Click.kaba"

const float THRESHOLD1 = 0.20
const float THRESHOLD2 = 0.15
const float RECOVER_TIME = 0.40

class ClickCounterDialog extends ConfigPanel
	override MicrophoneClickCounter* c
	override void __init__(Module *_c)
		#super.__init__("Click Counter", 300, 175, _counter.session.win, false)
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_drawing_area("", 0, 0, "drawing")
		add_grid("", 0, 1, "grid2")
		set_target("grid2")
		add_button("+", 0, 0, "inc")
		add_button("-", 1, 0, "dec")
	
		event_x("drawing", "hui:draw", &on_draw)
		event("inc", &on_increase)
		event("dec", &on_decrease)
		
		id = HuiRunRepeated(0.05, self, &poll)
	
	override void __delete__()
		HuiCancelRunner(id)
	void poll()
		redraw("drawing")
	int id
	


	void draw_volume(Painter *p)
		p.set_color(colors.text_soft3)
		float y0 = 30
		float y1 = p.height - 5
		float h = y1 - y0
		p.draw_rect(5, y0 + h * (1 - c.Volume), 5, h)
		p.set_color(colors.text_soft2)
		p.draw_line(2, (y0 + y1) / 2, 13, (y0 + y1) / 2)

	void on_draw(Painter *p)
		p.set_color(colors.background)
		p.set_font_size(12)
		p.draw_rect(0, 0, p.width, p.height)
	
		draw_volume(p)
	
		p.set_color(colors.text)
		p.draw_str(100, 100, c.counter.str())

	void on_increase()
		c.counter ++
		redraw("drawing")

	void on_decrease()
		c.counter --
		redraw("drawing")

class MicrophoneClickCounter extends TsunamiPlugin

	AudioInput *input
	AudioOutput *stream
	Synthesizer *synth
	ClickSource *source

	float Volume
	int counter

	bool active
	int active_ttl
	
	ARGH.... need AudioRecorder exported
	
	override void on_start()

		counter = 2265
		active = false
		active_ttl = -1
	
		source = new ClickSource
		synth = CreateSynthesizer(session, "")
		synth.plug(0, source, 0)
		stream = new OutputStream(session)
		stream.plug(0, synth, 0)
		stream.set_buffer_size(2048)
		stream.play()
		
		#dlg = new ClickCounterDialog(self)
		#dlg.show()
		
		input = new InputStreamAudio(session)
		input.start()
		input.subscribe(self, &on_input, "")
	
	override ConfigPanel* create_panel()
		return new ClickCounterDialog(self)
		
	override void on_stop()
		input.unsubscribe(self)
		input.stop()
		
		delete input
	
		delete stream
		delete synth

	void on_input()
		int available = input.current_buffer.available()
	
		AudioBuffer buf
		input.current_buffer.read_ref(buf, available)
	
		float[] temp
		temp = buf.r + buf.l
		
		input.current_buffer.read_ref_done(buf)
	
		int recover_samples = DEFAULT_SAMPLE_RATE * RECOVER_TIME
	
		Volume = 0
		for f,i in temp
			if f > Volume
				Volume = f
			if f > THRESHOLD1
				if !active
					print("start")
					active = true
					source.click()
					stream.play()
					counter ++
					print(counter)
					active_ttl = recover_samples
			if active and (active_ttl > 0)
				if f > THRESHOLD2
					active_ttl = recover_samples
				else
					active_ttl --
			if active and (active_ttl <= 0)
				print("end")
				active = false
				active_ttl = -1
	
		#dlg.redraw("drawing")
