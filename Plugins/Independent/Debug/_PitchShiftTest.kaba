# Image = hui:properties
# Title[Deutsch] = Pitch Shift

use tsunami

class PitchShift extends TsunamiPlugin

	var buf1: complex[]
	var buf2: complex[]
	
	
	func mut shift_buf_bad(b: float[], out _out: float[], factor: float)
		fft_r2c(b, buf1)
		float f = 1.0 / len(b)
		int N = len(b)
		int NN = len(buf1)
		buf2.resize(NN)
		for i in 0:NN
			buf2[i] = complex(0, 0)
			
		for i in 0:NN
			float i_s = float(i) / factor
			int ii_s = int(i_s)
			float di_s = i_s - float(ii_s)
			if ii_s < N
				buf2[i] = f*(buf1[ii_s])# * (1 - di_s) + buf[ii_s + 1] * di_s)

		_out.resize(N)
		fft_c2r_inv(buf2, _out)

	func mut shift_buf(b: float[], out _out: float[], factor: float)
		fft_r2c(b, buf1)
		int N = len(b)
		int NN = len(buf1)
		buf2.resize(NN)
		for i in 0:NN
			buf2[i] = complex(0, 0)

		#print("-----")
		for i in 0:NN
			float kk = factor * i
			#float x0 = pi * (N * kk)
			int j0 = 0#max(kk - 100, 0)
			int j1 = NN#min(kk + 100, NN)
			#complex M0 = complex(cos(x0), sin(x0)) * sin(x0)
			for j in j0:j1
				float dk = kk - j
				float x = pi * dk
				if x == 0
					buf2[j] += buf1[i]
				else
					complex M = complex(cos(x), sin(x)) * (sin(x) / x)
					buf2[j] += M * buf1[i]


		_out.resize(N)
		fft_c2r_inv(buf2, _out)
		_out /= N
		
	func mut shift_buf_fast(b: float[], out _out: float[], factor: float)
		fft_r2c(b, buf1)
		int N = len(b)
		int NN = len(buf1)
		buf2.resize(NN)
		for i in 0:NN
			buf2[i] = complex(0, 0)

		int D = max(100, sqrt(N)*2)
		for i in 0:NN
			float kk = factor * i
			float x0 = pi * kk
			int j0 = max(kk - D, 0)
			int j1 = min(kk + D, NN)
			complex M0 = complex(cos(x0), sin(x0)) * sin(x0)
			for j in j0:j1
				float dk = kk - j
				float x = pi * dk
				if x == 0
					buf2[j] += buf1[i]
				else
					complex M = M0 * (1/x)
					buf2[j] += M * buf1[i]

		_out.resize(N)
		fft_c2r_inv(buf2, _out)
		_out /= N

	func override on_start()
		bool show_val = false
		bool show_fft = false
		
		int N = 256*32
		float k = 100
		print("----------- orig ------------")
		print("k={{k}}")
		var buf = [for i in 0:N sin(2*pi*k*i / float(N))]
#		print(buf)
#		print("fft:")
		
		complex[] z, z2
		fft_r2c(buf, z)
#		print(str(map(complex.abs, z)))
		
		
		print("----------- off-grid ------------")
		float k2 = k + 0.42341
		print("k={{k2}}")
		var buf_off = [for i in 0:N sin(2*pi*k2*i / float(N))]
		if show_val
			print(buf_off)
		
		fft_r2c(buf_off, z2)
		#print(str(map(complex.abs, z2)))
		if show_fft
			print(str(z2))
		
	#	var c = [for i in 0:N/2+1 sin(pi*(k2-i2f(i))) / (pi*(k2-i))]
	#	#let c = [for i in 0:N/2 200 / (pi*(k-i))]
	#	print("guess....")
	#	print(c)
	#	print(str([for zz,i in z2 zz.abs() * (1/c[i])]))
		
		float factor = k2 / k
		print("factor {{factor}}")
		float[] output
		
		
		print("----------- shift bad ------------")
		shift_buf_bad(buf, output, factor)
		print("diff:  {{(output-buf_off).sum2()}}")
		print("diff spec:  {{(z2-buf2).sum2()}}")
		if show_val
			print(str(output))
		if show_fft
			print(str(buf2))
		#print(str(map(complex.abs, buf2)))
		
		print("----------- shift good ------------")
		shift_buf(buf, output, factor)
		print("diff:  {{(output-buf_off).sum2()}}")
		print("diff spec:  {{(z2-buf2).sum2()}}")
		if show_val
			print(str(output))
		if show_fft
			print(str(buf2))
		#print(str(map(complex.abs, buf2)))
		
		print("----------- shift fast ------------")
		shift_buf_fast(buf, output, factor)
		print("diff:  {{(output-buf_off).sum2()}}")
		print("diff spec:  {{(z2-buf2).sum2()}}")
		if show_val
			print(str(output))
		if show_fft
			print(str(buf2))
		#print(str(map(complex.abs, buf2)))
		
		#stop()

