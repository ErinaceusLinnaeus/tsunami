use tsunami
use hui

class _StreamTest extends TsunamiPlugin
	var chain: shared![SignalChain]
	var input: shared![AudioInput]
	var recorder: shared![AudioAccumulator]
	var runner = -1
	var nn = 0
	var acc = false
	func override on_start()
		chain = session.create_signal_chain("test")
		input = chain.add[AudioInput]()
		recorder = chain.add[AudioAccumulator]()
		var sucker = chain.add_basic(Module.Type.PLUMBING, "AudioSucker")
		chain.connect(input, 0, recorder, 0)
		chain.connect(recorder, 0, sucker, 0)
	
		runner = hui.run_repeated(0.1, on_tick)
	
		chain.start()

	func override on_stop()
		hui.cancel_runner(runner)
		chain = nil
	
	func mut on_tick()
		print("{{input.samples_recorded()}}\t{{recorder.samples_skipped}}")
		nn ++
		if nn > 100
			acc = !acc
			if acc
				print("-------start")
				chain.command(Module.Command.ACCUMULATION_START, 0)
			else
				print("-------stop")
				chain.command(Module.Command.ACCUMULATION_STOP, 0)
				chain.command(Module.Command.ACCUMULATION_CLEAR, 0)
			nn = 0
