// Image = hui:find
// Title[Deutsch] = Tonerkennung
use "../api.kaba"
use "../tone.kaba"
use "../PitchRecognizer.kaba"

const int F_MIN = 50
const int F_MAX = 2000

const float THRESHOLD = 0.1


const int BUFFER_SIZE = 32768


class MyPitchRecognizer extends PitchRecognizer
	Dialog* dlg
	void __init__(Dialog* _dlg)
		dlg = _dlg
	override void onUpdate()
		dlg.redraw("drawing")

class PitchRecognitionDialog extends Dialog
	PitchRecognition* plugin
	
	void __init__(PitchRecognition* _plugin)
		super.__init__("Tonerkennung", 300, 175, _plugin.win, false)
		addGrid("", 0, 0, "grid")
		setTarget("grid")
		addDrawingArea("", 5, 5, "drawing")
		addButton("Schlie√üen", 5, 145, "close")
		setImage("close", "hui:close")
		
		plugin = _plugin
	
		//eventX("drawing", "hui:draw", &Draw)
		event("hui:close", &onClose)
		event("close", &onClose)
	
	float note_error

	string get_note(float f)
		float pitch = log(f / 440.0) / log(2.0) * 12 + 69
		int rel = f2i(pitch + 0.5) % 12
		note_error = loop(pitch, -0.5, 0.5)
		return rel_pitch_name(rel)
		//loopf(fl, 0, 1)
		//note = i2s(n)

	void drawVolume(Painter *c)
		c.setColor(color(1, 0.8, 0.8, 0.8))
		float y0 = 30
		float y1 = c.height - 5
		float h = y1 - y0
		c.drawRect(5, y0 + h * (1 - plugin.pitch_recognizer.volume), 5, h)
		c.setColor(color(1, 0.6, 0.6, 0.6))
		c.drawLine(2, (y0 + y1) / 2, 13, (y0 + y1) / 2)

	override void onDraw(Painter *c)
		c.setColor(White)
		c.setFontSize(12)
		c.drawRect(0, 0, c.width, c.height)
	
		drawVolume(c)
	
		float r = min(c.width / 2 - 40, c.height - 40)
		float r1 = r - 5
		float r2 = r + 5
		float x = c.width / 2
		float y = c.height - 10
	
		c.setColor(color(1, 0.4, 0.4, 0.4))
		for i in 0:9
			float w = i * 0.125 * pi - pi / 2
			c.drawLine(x + r1 * sin(w), y - r1 * cos(w), x + r2 * sin(w), y - r2 * cos(w))
	
		c.setColor(Black)
		if plugin.pitch_recognizer.loud_enough
			c.drawStr(x - 8, y - r2 - 22, get_note(plugin.pitch_recognizer.frequency))
			c.drawStr(x + r2 * 0.7 + 6, y - r2 * 0.7 - 22, "#")
			c.drawStr(x - r2 * 0.7 - 10, y - r2 * 0.7 - 22, "b")
			c.drawStr(5, 5, plugin.pitch_recognizer.frequency.str2(1) + " Hz")
			c.drawLine(x, y, x + r * sin(note_error * pi), y - r * cos(note_error * pi))
		else
			c.drawStr(x - 30, y - 20, "zu leise")

	void onClose()
		plugin.stop()

class PitchRecognition extends TsunamiPlugin
	Dialog* dlg
	
	PitchRecognizer* pitch_recognizer
	
	override void onStart()
		
		dlg = new PitchRecognitionDialog(self)
		dlg.show()
	
		pitch_recognizer = new MyPitchRecognizer(dlg)
		
	override void onStop()
		delete dlg
		delete pitch_recognizer
	
