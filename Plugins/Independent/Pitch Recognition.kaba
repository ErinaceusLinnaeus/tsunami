// Image = hui:find
// Title[Deutsch] = Tonerkennung
use "../api.kaba"
use "../tone.kaba"
use "../PitchRecognizer.kaba"

const int F_MIN = 50
const int F_MAX = 2000

const float THRESHOLD = 0.1


const int BUFFER_SIZE = 32768


class MyPitchRecognizer extends PitchRecognizer
	PitchRecognition *pr
	void __init__(Session* session, PitchRecognition* _pr)
		super.__init__(session)
		pr = _pr
	override void on_update()
		pr.on_pitch_update()

class PitchRecognitionPanel extends ConfigPanel
	PitchRecognition* plugin
	
	override void __init__(PitchRecognition* _plugin)
		add_drawing_area("", 5, 5, "drawing")
		
		plugin = _plugin
	
		event_x("drawing", "hui:draw", &on_draw)
	
	float note_error

	string get_note(float f)
		float pitch = log(f / 440.0) / log(2.0) * 12 + 69
		int rel = f2i(pitch + 0.5) % 12
		note_error = loop(pitch, -0.5, 0.5)
		return rel_pitch_name(rel)
		//loopf(fl, 0, 1)
		//note = i2s(n)

	void drawVolume(Painter *c)
		c.set_color(color(1, 0.8, 0.8, 0.8))
		float y0 = 30
		float y1 = c.height - 5
		float h = y1 - y0
		c.draw_rect(5, y0 + h * (1 - plugin.pitch_recognizer.volume), 5, h)
		c.set_color(color(1, 0.6, 0.6, 0.6))
		c.draw_line(2, (y0 + y1) / 2, 13, (y0 + y1) / 2)

	void on_draw(Painter *c)
		c.set_color(colors.background)
		c.set_font_size(12)
		c.draw_rect(0, 0, c.width, c.height)
	
		drawVolume(c)
	
		float r = min(c.width / 2 - 40, c.height - 40)
		float r1 = r - 5
		float r2 = r + 5
		float x = c.width / 2
		float y = c.height - 10
	
		c.set_color(colors.text_soft1)
		for i in 0:9
			float w = i * 0.125 * pi - pi / 2
			c.draw_line(x + r1 * sin(w), y - r1 * cos(w), x + r2 * sin(w), y - r2 * cos(w))
	
		c.set_color(colors.text)
		if plugin.pitch_recognizer.loud_enough
			c.draw_str(x - 8, y - r2 - 22, get_note(plugin.pitch_recognizer.frequency))
			c.draw_str(x + r2 * 0.7 + 6, y - r2 * 0.7 - 22, "#")
			c.draw_str(x - r2 * 0.7 - 10, y - r2 * 0.7 - 22, "b")
			c.draw_str(5, 5, plugin.pitch_recognizer.frequency.str2(1) + " Hz")
			c.draw_line(x, y, x + r * sin(note_error * pi), y - r * cos(note_error * pi))
		else
			c.draw_str(x - 30, y - 20, "zu leise")

class PitchRecognition extends TsunamiPlugin
	
	PitchRecognizer* pitch_recognizer
	PitchRecognitionPanel* panel
	
	override void on_start()
		panel = nil
		pitch_recognizer = new MyPitchRecognizer(session, self)
		
	override void on_stop()
		delete pitch_recognizer
	
	void on_pitch_update()
		if panel
			panel.redraw("drawing")
	
	override ConfigPanel* create_panel()
		panel = new PitchRecognitionPanel(self)
		return panel
	
