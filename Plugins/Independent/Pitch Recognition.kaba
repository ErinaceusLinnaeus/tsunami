# Image = hui:find
# Title[Deutsch] = Tonerkennung
use hui
use "../api.kaba"
use "../helper/tone.kaba"


class PitchRecognitionPanel extends ConfigPanel
	override PitchRecognition* c
	float note_error
	
	override void __init__(Module* _p)
		add_drawing_area("", 5, 5, "drawing")
	
		event_x("drawing", "hui:draw", &on_draw)

	string get_note(float f)
		float pitch = log(f / 440.0) / log(2.0) * 12 + 69
		int rel = f2i(pitch + 0.5) % 12
		note_error = loop(pitch, -0.5, 0.5)
		return rel_pitch_name(rel)
		#loopf(fl, 0, 1)
		#note = i2s(n)

	void draw_volume(Painter *p)
		p.set_color(color(1, 0.8, 0.8, 0.8))
		float y0 = 30
		float y1 = p.height - 5
		float h = y1 - y0
		p.draw_rect(5, y0 + h * (1 - c.pitch_detector.volume), 5, h)
		p.set_color(color(1, 0.6, 0.6, 0.6))
		p.draw_line(2, (y0 + y1) / 2, 13, (y0 + y1) / 2)

	void on_draw(Painter *p)
		p.set_color(colors.background)
		p.set_font_size(12)
		p.draw_rect(0, 0, p.width, p.height)
	
		draw_volume(p)
	
		float r = min(p.width / 2 - 40, p.height - 40)
		float r1 = r - 5
		float r2 = r + 5
		float x = p.width / 2
		float y = p.height - 10
	
		p.set_color(colors.text_soft1)
		for i in 0:9
			float w = i * 0.125 * pi - pi / 2
			p.draw_line(x + r1 * sin(w), y - r1 * cos(w), x + r2 * sin(w), y - r2 * cos(w))
	
		p.set_color(colors.text)
		if c.pitch_detector.loud_enough
			p.draw_str(x - 8, y - r2 - 22, get_note(c.pitch_detector.frequency))
			p.draw_str(x + r2 * 0.7 + 6, y - r2 * 0.7 - 22, "#")
			p.draw_str(x - r2 * 0.7 - 10, y - r2 * 0.7 - 22, "b")
			p.draw_str(5, 5, c.pitch_detector.frequency.str2(1) + " Hz")
			p.draw_line(x, y, x + r * sin(note_error * pi), y - r * cos(note_error * pi))
		else
			p.draw_str(x - 30, y - 20, "too quiet")

class PitchRecognition extends TsunamiPlugin
	
	SignalChain* chain
	PitchDetector* pitch_detector
	PitchRecognitionPanel* panel
	int runner
	
	override void on_start()
		panel = nil
		chain = session.add_signal_chain("pitch-recognition")
		let input = chain.add(MODULE_STREAM, "AudioInput")
		pitch_detector = chain.add(MODULE_PITCH_DETECTOR, "")
		let out = chain.add(MODULE_PLUMBING, "MidiSucker")
		chain.connect(input, 0, pitch_detector, 0)
		chain.connect(pitch_detector, 0, out, 0)
		
		chain.start()
		runner = HuiRunRepeated(0.05, self, &on_update)
		
	override void on_stop()
		HuiCancelRunner(runner)
		delete chain
	
	void on_update()
		if panel
			panel.redraw("drawing")
	
	override ConfigPanel* create_panel()
		panel = new PitchRecognitionPanel(self)
		return panel
	
