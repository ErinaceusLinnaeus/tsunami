use hui
use tsunami
use AudioVisualizer.Shader

enum
	MODE_FORWARD
	MODE_LOOP

TrackMarker* get_part(Song* s, int offset)
	let t = s.time_track()
	if !t
		return nil
	for m in t.layers[0].markers
		if m.range.inside(offset)
			return m
	return nil



class PPPanel extends ConfigPanel
	Looper* looper
	
	void __init__(Looper l)
		super.__init__(l)
		from_source("
Button forward 'Forward' expandx expandy")
		looper = &l

		event("forward", on_forward)
	
	void on_forward()
		looper.go_forward()
		

class Looper extends TsunamiPlugin
	int runner
	int mode
	SignalChain* chain
	SongRenderer* renderer
	Song* song
	TrackMarker* cur_part
	ShaderVis* shader_vis
	ShaderPanel* shader_panel
	Dialog* shader_win
	
	override void on_start()
		cur_part = nil
		song = session.song
		chain = session.view.signal_chain
		renderer = session.view.renderer
		runner = hui.run_repeated(0.05, self, on_update)
		mode = MODE_FORWARD
		
		shader_vis = chain.add(Module.AUDIO_VISUALIZER, "Shader")
		chain.connect(renderer, 0, shader_vis, 0)
		chain.connect(shader_vis, 0, session.view.output_stream, 0) # almost ...
		
		shader_win = new Dialog("Shader", 800, 800, session.win, true)
		shader_panel = shader_vis.create_panel()
		shader_win.embed(shader_panel, "", 0,0)
		shader_win.show()
		
		
	override void on_stop()
		print("stop 1")
		del shader_panel
		print("stop 2")
		del shader_win
		print("stop 3")
		del shader_vis
		hui.cancel_runner(runner)
			
	override ConfigPanel* create_panel()
		return new PPPanel(self)
	
	void on_leave_part()
		print("leaving " + cur_part.text)
		#go_forward
	void on_enter_part()
		print("entering " + cur_part.text)
		renderer.set_range(cur_part.range)
		renderer.set_loop(true)
		mode = MODE_LOOP
	void go_forward()
		renderer.set_range(song.range())
		renderer.set_loop(false)
		mode = MODE_FORWARD
	
	void on_update()
		int pos = renderer.get_pos(0)
		let p = get_part(song, pos)
		if p != cur_part
			if cur_part
				on_leave_part()
			cur_part = p
			if cur_part
				on_enter_part()
