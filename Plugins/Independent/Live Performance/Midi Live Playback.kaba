use tsunami

class MLPPanel extends ConfigPanel
	var override c: MidiLivePlayback*
	var session: Session*
	var synth_panel: ConfigPanel*
	func __init__(_session: Session, _mlp: MidiLivePlayback)
		super.__init__(_mlp)
		session = &_session
		from_source("Grid grid ''
	Button select-synth 'select synthesizer...' expandx image=hui:open")
		event("select-synth", on_select_synth)
		
		synth_panel = nil
		
	
	func on_select_synth()
		if synth_panel
			del synth_panel
		string name = ChooseModule(self, session, Module.Type.SYNTHESIZER, c.synth.name)
		c.set_synth(name)
		set_string("select-synth", name)
		
		synth_panel = c.synth.create_panel()
		if synth_panel
			embed(synth_panel, "grid", 0, 1)
			synth_panel.update()
		

class MidiLivePlayback extends TsunamiPlugin
	var m_in, m_out: Module*
	var synth: Synthesizer*
	var chain: SignalChain*
	func override on_start()
		chain = session.create_signal_chain("midi-live")
		m_in = chain.add(Module.Type.STREAM, "MidiInput")
		m_out = chain.add(Module.Type.STREAM, "AudioOutput")
		synth = chain.add(Module.Type.SYNTHESIZER, "")
		chain.connect(m_in, 0, synth, 0)
		chain.connect(synth, 0, m_out, 0)
		chain.start()
	
	func set_synth(name: string)
		chain.stop()
		chain.reset_state()
		chain.delete(synth)
		
		synth = chain.add(Module.Type.SYNTHESIZER, name)
		chain.connect(m_in, 0, synth, 0)
		chain.connect(synth, 0, m_out, 0)
		
		chain.start()
		
	func override on_stop()
		del chain
	
	func override create_panel() -> ConfigPanel*
		return new MLPPanel(session, self)