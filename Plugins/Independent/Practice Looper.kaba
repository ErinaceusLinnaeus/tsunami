use hui
use tsunami


func get_part(s: Song, offset: int) -> TrackMarker*
	var t = s.time_track()
	if !t
		return nil
	for m in weak(t.layers[0].markers)
		if m.range.inside(offset)
			return m
	return nil



class PLPanel extends ConfigPanel
	var looper: PracticeLooper*
	
	func __init__(l: PracticeLooper)
		super.__init__(l)
		from_source("
Grid ? '' vertical
	Label ? 'Do not edit the file (even adjusting volumes)!' bold italic
	Grid ? ''
		Button play 'Play' expandx expandy
		Button pause 'Pause' expandx expandy
	Grid ? ''
		Label ? 'Speed'
		SpinButton speed '1.0' range=0:1:0.01
		Button set 'Set'")
		looper = &l

		event("play", on_play)
		event("pause", on_pause)
		event("set", on_set_speed)
	
	func on_play()
		looper.play()
	func on_pause()
		looper.pause()
	func on_set_speed()
		looper.set_speed(get_float("speed"))


func scale_range(r: Range, s: float) -> Range
	return RangeTo(r.start() * s, r.end() * s)


class PracticeLooper extends TsunamiPlugin
	var runner: int
	var chain: SignalChain*
	var renderer: SongRenderer*
	var song: Song*
	var altered_speed = false
	var current_speed = 1.
	var old_sel: Range
	
	func override on_start()
		song = session.song
		chain = session.view.signal_chain
		renderer = session.view.renderer
#		runner = hui.run_repeated(0.05, self, on_update)
		
	func override on_stop()
#		hui.cancel_runner(runner)
		reset()
			
	func override create_panel() -> ConfigPanel*
		return new PLPanel(self)
	
	func play()
		session.view.play()
		return
		print(session.view.sel.range())
		session.view.prepare_playback(session.view.sel.range(), true)
		#renderer.set_range(session.view.sel.range())
		renderer.set_loop(true)
		#chain.command(Module.Command.PREPARE_START, 0)
		chain.start()
	
	func pause()
		chain.stop()
	
	func reset()
		if not altered_speed
			return
		session.view.sel.range_raw = scale_range(session.view.sel.range_raw, current_speed)
		session.view.cam.set_range(scale_range(session.view.cam.range(), current_speed))
		song.undo()
		altered_speed = false
		current_speed = 1
	
	func set_speed(speed: float)
		if altered_speed
			reset()
		song.begin_action_group()
		for b,i in song.bars
			Bar bb
			bb.beats = b.beats
			bb.divisor = b.divisor
			bb.length = b.length / speed
			song.edit_bar(i, bb, Bar.EditMode.STRETCH_AND_SCALE_AUDIO)
		song.end_action_group()
		old_sel = session.view.sel.range_raw
		session.view.cam.set_range(scale_range(session.view.cam.range(), 1. / speed))
		session.view.sel.range_raw = scale_range(session.view.sel.range_raw, 1. / speed)
		session.view.update_selection()
		altered_speed = true
		current_speed = speed
