# Image = hui:media-play
# Title[Deutsch] = Song Metronom
use hui
use "../api.kaba"

enum
	MODE_CIRCLE
	MODE_BOUNCE
	MODE_BOUNCE_WALK

const float UPDATE_DT = 1.0 / 50
const float MAX_BACKGROUND_REDNESS = 0.7
const int MOTION_BLUR_COUNT = 20

# part uncertainty...
const int DELTA = 400

class BlurredDot
	complex pos, pos0
	bool has_prev
	void __init__()
		has_prev = false
	void move(float x, float y)
		pos0 = pos
		pos.x = x
		pos.y = y
		has_prev = true
	void jump(float x, float y)
		pos.x = x
		pos.y = y
		has_prev = false
	void draw(Painter *p, color c, float r)
		if has_prev
			float dt = 1.0 / MOTION_BLUR_COUNT
			color cc = c
			cc.a = sqrt(dt)
			p.set_color(cc)
			for t in 0.0:1.0:dt
				float tt = pow(t-0.5, 3)*4+0.5
				p.draw_circle(pos.x * tt + pos0.x * (1-tt), pos.y * tt + pos0.y * (1-tt), r)
		else
			p.set_color(c)
			p.draw_circle(pos.x, pos.y, r)

class MetronomePanel extends ConfigPanel
	Metronome *metro
	float fraction_prev
	
	bool fullscreen
	bool allow_blink_background
	bool allow_blink_number
	int mode
	Menu *popup_menu
	
	BlurredDot dot
	int sr_id
	
	void __init__(Session *session, Metronome *_metro)
		super.__init__(_metro)
		from_source("
Grid ? '' vertical
	DrawingArea area ''")

		metro = _metro
		fraction_prev = 0
		
		fullscreen = false
		mode = HuiConfig.get_int("Plugins/Metronome/Mode", MODE_BOUNCE_WALK)
		allow_blink_background = HuiConfig.get_bool("Plugins/Metronome/AllowBlinkBackground", true)
		allow_blink_number = HuiConfig.get_bool("Plugins/Metronome/AllowBlinkNumber", true)
		
		popup_menu = new Menu
		popup_menu.add_checkable("Blink background", "blink-background")
		popup_menu.add_checkable("Blink number", "blink-number")
		Menu *sub_mode = new Menu
		sub_mode.add_checkable("Circle", "mode-circle")
		sub_mode.add_checkable("Bounce", "mode-bounce")
		sub_mode.add_checkable("Bounce walk", "mode-bounce-walk")
		popup_menu.add_sub_menu("Animation", "sub-menu-mode", sub_mode)
	
		event_x("area", "hui:draw", &on_draw)
		event_x("area", "hui:right-button-down", &on_area_right_button_down)
		
		event("blink-background", &on_blink_background)
		event("blink-number", &on_blink_number)
		event("mode-circle", &on_mode_circle)
		event("mode-bounce", &on_mode_bounce)
		event("mode-bounce-walk", &on_mode_bounce_walk)
		#event("fullscreen", &on_fullscreen)
		
		sr_id = HuiRunRepeated(UPDATE_DT, self, &on_update)
	
	override void __delete__()
		HuiCancelRunner(sr_id)
		delete popup_menu
	
	void on_update()
		redraw("area")
	
	void on_draw(Painter *p)
		float w = p.width
		float h = p.height
		float x0 = w / 2
		float y0 = h / 2
		float r = min(x0, y0) * 0.9
		
		BeatSource* source = metro.session.view.renderer.get_beat_source()
		if !source
			return
		
		int cur_bar = source.cur_bar()
		float beat_fraction = source.beat_fraction()
		int cur_beat = source.cur_beat()
		int num_beats = source.beats_per_bar()
		
		float closeness = beat_fraction*2-1
		if beat_fraction < 0.5
			closeness = 1 - beat_fraction*2
		float bar_fraction = (cur_beat + beat_fraction) / num_beats
		
		# background
		color bg = colors.background
		if allow_blink_background
			bg = color.interpolate(Red, colors.background, 1 - MAX_BACKGROUND_REDNESS*pow(closeness, 15))
		p.set_color(bg)
		p.draw_rect(0, 0, w, h)
		
		if mode == MODE_CIRCLE
			# circle
			p.set_line_width(r*0.05)
			p.set_color(color.interpolate(colors.grid, colors.background, 0.5))
			p.set_fill(false)
			p.draw_circle(x0, y0, r)
		
			# top point
			p.set_fill(true)
			p.set_color(colors.text_soft3)
			p.draw_circle(x0, y0 - r, r*0.07)
		
			# moving point
			float t = beat_fraction - 0.5
			float phi = 2 *pi * (2*t*t*t + t/2)
			dot.move(x0 - sin(phi) * r, y0 + cos(phi) * r)
			dot.draw(p, colors.text, r*0.1)
		else if mode == MODE_BOUNCE
			float t = beat_fraction
			dot.move(x0 + r, y0 + r - 2*abs(sin(t*pi)) * r)
			dot.draw(p, colors.text, r*0.1)
		else if mode == MODE_BOUNCE_WALK
			p.set_color(colors.text_soft3)
			for i in 0:num_beats
				float tx = loop((i + 0.5)/num_beats, 0, 1)
				if i == 0
					p.draw_circle(w * tx, y0 + r, r*0.05)
				else
					p.draw_circle(w * tx, y0 + r, r*0.03)
			
			float t = beat_fraction
			float tx = loop(bar_fraction + 0.5/num_beats, 0, 1)
			if w*tx < dot.pos.x
				dot.jump(w*tx, y0 + r - 2*abs(sin(t*pi)) * r)
			else
				dot.move(w*tx, y0 + r - 2*abs(sin(t*pi)) * r)
			dot.draw(p, colors.text, r*0.1)
		
		# beat number
		float fs = r * 0.5
		if allow_blink_number
			fs *= (1 + pow(closeness,5) * 0.2)
		if cur_beat == 0
			p.set_color(colors.text)
		else
			fs *= 0.8
			p.set_color(colors.text_soft2)
		p.set_font_size(fs)
		p.draw_str(x0-fs*0.4, y0-fs/2, cur_beat + 1)
		
		draw_part_info(p, cur_bar)
		
		fraction_prev = beat_fraction
	
	void draw_part_info(Painter* p, int cur_bar_index)
		float w = p.width
		float h = p.height
		
		Song* song = metro.session.song
		Track* t = song.time_track()
		if !t
			return
		
		Bar* cur_bar = song.bars[cur_bar_index]
		Bar* next_bar = nil
		if cur_bar_index + 1 < song.bars.num
			next_bar = song.bars[cur_bar_index + 1]
		
		int offset = cur_bar.offset
		TrackMarker *cur_part = get_part(t, offset + DELTA)
		TrackMarker *next_part = get_part(t, offset + cur_bar.length + DELTA)
		p.set_color(colors.text_soft2)
		float fs = h * 0.08
		p.set_font_size(fs)
		if cur_part
			p.draw_str(10, 5, cur_part.text)
			int first_bar = bar_index(song, cur_part.range.offset + DELTA)
			p.draw_str(w - 5 - fs*3, 5, (cur_bar.index - first_bar) + 2)
	
		string change
		if next_part and next_part != cur_part
			change = next_part.text
		if next_bar
			if next_bar.beats.num != cur_bar.beats.num
				change += "  " + next_bar.beats.num + "/â‚„"
			float cur_bpm = cur_bar.bpm(song.sample_rate)
			float next_bpm = next_bar.bpm(song.sample_rate)
			if abs(cur_bpm - next_bpm) > 2
				change += "  " + next_bpm.str2(0) + " bpm"
		if change.num > 0
			p.set_color(colors.text)
			p.draw_str(20, 5 + fs*1.2 + 5, "> " + change)
				
	
	void on_area_right_button_down()
		popup_menu.check("blink-background", allow_blink_background)
		popup_menu.check("blink-number", allow_blink_number)
		popup_menu.check("mode-circle", mode == MODE_CIRCLE)
		popup_menu.check("mode-bounce", mode == MODE_BOUNCE)
		popup_menu.check("mode-bounce-walk", mode == MODE_BOUNCE_WALK)
		popup_menu.popup(self)
	
	void on_blink_background()
		allow_blink_background = !allow_blink_background
		HuiConfig.set_bool("Plugins/Metronome/AllowBlinkBackground", allow_blink_background)
	
	void on_blink_number()
		allow_blink_number = !allow_blink_number
		HuiConfig.set_bool("Plugins/Metronome/AllowBlinkNumber", allow_blink_number)
	
	void on_mode_circle()
		mode = MODE_CIRCLE
		HuiConfig.set_int("Plugins/Metronome/Mode", mode)
	
	void on_mode_bounce()
		mode = MODE_BOUNCE
		HuiConfig.set_int("Plugins/Metronome/Mode", mode)
	
	void on_mode_bounce_walk()
		mode = MODE_BOUNCE_WALK
		HuiConfig.set_int("Plugins/Metronome/Mode", mode)
	
	#void on_fullscreen()
#		fullscreen = !fullscreen
#		set_fullscreen(fullscreen)
#		#show_control()


int bar_index(Song* song, int offset)
	for b,i in song.bars
		if b.offset >= offset
			return i
	return 0


TrackMarker* get_part(Track* t, int offset)
	for m in t.layers[0].markers
		if m.range.inside(offset)
			return m
	return nil

class Metronome extends TsunamiPlugin
	
	override void on_start()
		
		session.view.signal_chain.set_update_dt(UPDATE_DT)
		session.view.signal_chain.set_buffer_size(1024)
			
	override ConfigPanel* create_panel()
		return new MetronomePanel(session, self)
		
	override void on_stop()
		pass
