// Image = hui:media-play
// Title[Deutsch] = Metronom
use "../api.kaba"

class MetronomeSource : MidiSource
	float length
	float freq
	float bpm
	int num_beats
	float volume

	int offset
	int cur_beat
	Window* win
	float fraction
	int sm_m
	float sample_rate
	
	void __init__(Window* _win, float _bpm, int _beats, int _sample_rate)
		win = _win
		sample_rate = _sample_rate
		
		freq = 880.0
		length = 0.02
		volume = 1
		bpm = _bpm
		num_beats = _beats

		offset = 0
		cur_beat = 0
		fraction = 0
		float dt_m = 60.0 / bpm
//		sm_m = dt_m * sample_rate
		
	overwrite int read(MidiRawData midi)
		float dt_m = 60.0 / bpm
		sm_m = dt_m * sample_rate
	
		// render clicks
		while offset < midi.samples
			if cur_beat == 0
				midi.addMetronomeClick(offset, 0, volume)
			else
				midi.addMetronomeClick(offset, 1, volume)
			cur_beat = loopi(cur_beat + 1, 0, num_beats - 1)
			offset += sm_m
		offset -= midi.samples
		
		fraction = 1 - i2f(offset) / i2f(sm_m)
		
		win.redraw("area")
		return midi.samples
	
	void setBpm(float bpm_new)
		bpm = bpm_new
		
		float dt_m = 60.0 / bpm
		sm_m = dt_m * sample_rate
		
		offset = (1 - fraction) * sm_m


class MetronomeDialog : Dialog
	OutputStream *stream
	MidiRenderer *renderer
	MetronomeSource *source
	DummySynthesizer synth
	AudioView *view
	TsunamiPlugin *plugin
	
	overwrite void __init__(TsunamiPlugin *_plugin)
		super.__init__("Metronome", 300, 250, _plugin.win, false)
		fromSource("
Grid ? '' 1 3
	DrawingArea area ''
	Grid ? '' 3 2
		Text ? 'Speed'
		SpinButton bpm '0\\1' expandx
		Text ? '/min'
		Text ? 'Beats'
		SpinButton num_beats '4\\1\\99'
		.
	Grid ? '' 2 1 buttonbar
		Button close 'Close' image=hui:close")
		
		plugin = _plugin
		view = plugin.view
	
		source = new MetronomeSource(self, 90, 4, synth.sample_rate)
		renderer = new MidiRenderer(&synth, source)
	
		setFloat("bpm", source.bpm)
	
		event("hui:close", &onClose)
		event("close", &onClose)
		event("bpm", &onBpm)
		event("num_beats", &onNumBeats)
	
		stream = new OutputStream(renderer)
		stream.setBufferSize(1024)
		stream.play()
	
	overwrite void __delete__()
		delete stream
		delete renderer
		delete source
	
	overwrite void onDraw(Painter *p)
		float w = p.width
		float h = p.height
		float x0 = w / 2
		float y0 = h / 2
		float r = min(x0, y0) * 0.9
		
		// background
		p.setColor(view.colors.background)
		p.drawRect(0, 0, w, h)
		
		// circle
		p.setColor(ColorInterpolate(view.colors.grid, view.colors.background, 0.5))
		p.setFill(false)
		p.drawCircle(x0, y0, r)
		
		// top point
		p.setFill(true)
		p.setColor(view.colors.text_soft3)
		p.drawCircle(x0, y0 - r, 3)
		
		// moving point
		p.setColor(view.colors.text)
		float t = source.fraction - 0.5
		float phi = 2 *pi * (2*t*t*t + t/2)
		p.drawCircle(x0 - sin(phi) * r, y0 + cos(phi) * r, 5)
		
		// beat number
		int n = loopi(source.cur_beat - 1, 0, source.num_beats - 1) + 1
		p.drawStr(x0-7, y0-11, n)

	void onBpm()
		source.setBpm(getFloat(""))

	void onNumBeats()
		source.num_beats = getInt("")
		//source.cur_beat = 0
		//source.offset = 0

	void onClose()
		plugin.end()

class Metronome : TsunamiPlugin
	Dialog *dlg
	overwrite void onStart()
		dlg = new MetronomeDialog(self)
		dlg.show()
	overwrite void onEnd()
		delete dlg
