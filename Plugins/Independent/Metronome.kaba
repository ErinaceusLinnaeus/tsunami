// Image = hui:media-play
// Title[Deutsch] = Metronom
use "../api.kaba"
use "../MidiSource/Metronome.kaba"

enum
	MODE_CIRCLE
	MODE_BOUNCE

class MetronomeDialog extends Dialog
	Metronome *metro
	Timer timer
	float fraction_prev
	
	void __init__(Metronome *_metro)
		super.__init__("Metronome", 400, 520, _metro.session.win, true)
		from_source("
Grid ? '' vertical
	DrawingArea area ''
	Grid ? ''
		Text ? 'Speed'
		SpinButton bpm '0' range=1: expandx
		Text ? '/min'
		---|
		Text ? 'Beats'
		SpinButton num_beats '4' range=1:99
		---|
		Text ? 'Sub Beats'
		SpinButton num_sub_beats '1' range=1:99
	Grid ? '' buttonbar
		Button close 'Close' image=hui:close")
		
		metro = _metro
		fraction_prev = 0
	
		set_float("bpm", metro.source.config.bpm)
		set_int("num_beats", metro.source.config.beats)
	
		event("hui:close", &on_close)
		event("close", &on_close)
		event("bpm", &on_bpm)
		event("num_beats", &on_num_beats)
		event("num_sub_beats", &on_num_beats)
		event_x("area", "hui:left-button-down", &on_area_left_button_down)
	
	override void on_draw(Painter *p)
		float w = p.width
		float h = p.height
		float x0 = w / 2
		float y0 = h / 2
		float r = min(x0, y0) * 0.9
		
		float closeness = metro.source.fraction_beat*2-1
		if metro.source.fraction_beat < 0.5
			closeness = 1 - metro.source.fraction_beat*2
		
		bool crossed_beat = fraction_prev > metro.source.fraction_beat
		if crossed_beat
			pass
		
		// background
		p.set_color(ColorInterpolate(Red, colors.background, 1 - pow(closeness, 20)))
		p.draw_rect(0, 0, w, h)
		
		// circle
		p.set_line_width(r*0.05)
		p.set_color(ColorInterpolate(colors.grid, colors.background, 0.5))
		p.set_fill(false)
		p.draw_circle(x0, y0, r)
		
		// top point
		p.set_fill(true)
		p.set_color(colors.text_soft3)
		p.draw_circle(x0, y0 - r, r*0.07)
		
		// moving point
		p.set_color(colors.text)
		float t = metro.source.fraction_beat - 0.5
		float phi = 2 *pi * (2*t*t*t + t/2)
		p.draw_circle(x0 - sin(phi) * r, y0 + cos(phi) * r, r*0.1)
		
		// beat number
		float fs = r * (1 + pow(closeness,5) * 0.5) * 0.5
		p.set_font_size(fs)
		if metro.source.pause
			p.set_color(ColorInterpolate(colors.grid, colors.background, 0.2))
			p.draw_str(x0-fs*0.4, y0-fs*0.75, "‚è∏")
		else
			int n = metro.source.cur_beat + 1
			p.draw_str(x0-fs*0.4, y0-fs*0.75, n)
		
		fraction_prev = metro.source.fraction_beat
		//t_blink *= exp(-dt*20)
	
	void on_area_left_button_down()
		metro.source.set_pause(!metro.source.pause)
		redraw("area")

	void on_bpm()
		metro.source.set_bpm(get_float(""))

	void on_num_beats()
		int beats = get_int("num_beats")
		int sub_beats = get_int("num_sub_beats")
		metro.source.set_beats(beats, sub_beats)

	void on_close()
		metro.stop()

class Metronome extends TsunamiPlugin
	OutputStream *stream
	MetronomeSource *source
	Synthesizer *synth
	Dialog *dlg
	
	override void on_start()
		synth = CreateSynthesizer(session, "")
		source = new MetronomeSource
		source.session = session
		source.reset_config()
		synth.set_source(source.out)
		
		dlg = new MetronomeDialog(self)
		dlg.show()
	
		stream = new OutputStream(session, synth.out)
		stream.set_buffer_size(1024)
		stream.set_update_dt(1.0 / 50)
		stream.play()
		
		stream.subscribe(self, &onUpdate, "Update")
		
	
	void onUpdate()
		dlg.redraw("area")
		
	override void on_stop()
		stream.unsubscribe(self)
		delete dlg
		delete stream
		delete synth
		delete source
