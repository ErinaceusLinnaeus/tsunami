// Image = hui:media-play
// Title[Deutsch] = Metronom
use "../api.kaba"

class MetronomeRenderer : AudioRendererInterface
	float length
	float freq
	float bpm
	int num_beats
	float volume

	DummySynthesizer synth
	int offset
	int cur_beat
	
	void __init__()
		//synth.setSampleRate(getSampleRate())
		synth.resetState()

		offset = 0
		cur_beat = 0

	overwrite int read(BufferBox buf)
		float dt_m = 60.0 / bpm
		int sm_m = dt_m * synth.sample_rate
	
		// clear buffer
		buf.r = 0
		buf.l = 0
		MidiData midi
		midi.samples = buf.num
		synth.feed(midi)
	
		// render clicks
		while offset < buf.num
			if cur_beat == 0
				synth.addMetronomeClick(offset, 0, volume)
			else
				synth.addMetronomeClick(offset, 1, volume)
			cur_beat = loopi(cur_beat + 1, 0, num_beats - 1)
			offset += sm_m
		offset -= buf.num
		
		synth.read(buf)
		return buf.num

class MetronomeDialog : Dialog
	AudioStream *stream
	MetronomeRenderer *renderer
	
	void __init__(Window *parent)
		super.__init__("Metronome", 200, 80, parent, false)
		fromSource("
Grid ? '' 1 2
	Grid ? '' 3 2
		Text ? 'Speed'
		SpinButton bpm '0\\1' expandx
		Text ? '/min'
		Text ? 'Beats'
		SpinButton num_beats '4\\1\\99'
		.
	Grid ? '' 2 1 buttonbar
		Button close 'Close' image=hui:close")
	
		renderer = new MetronomeRenderer
	
		renderer.freq = 880.0
		renderer.length = 0.02
		renderer.volume = 1
		renderer.bpm = 90.0
		renderer.num_beats = 4
		setFloat("bpm", renderer.bpm)
	
		event("hui:close", &onClose)
		event("close", &onClose)
		event("bpm", &onBpm)
		event("num_beats", &onNumBeats)
	
		stream = new AudioStream(renderer)
		stream.play()
	
	virtual void __delete__()
		delete stream
		delete renderer

	void onBpm()
		renderer.bpm = getFloat("")

	void onNumBeats()
		renderer.num_beats = getInt("")
		renderer.cur_beat = 0
		renderer.offset = 0
		stream.play()

	void onClose()
		delete self

void main()
	Dialog *dlg = new MetronomeDialog(MainWin)
	dlg.run()
