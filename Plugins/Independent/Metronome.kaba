// Image = hui:media-play
// Title[Deutsch] = Metronom
use "../api.kaba"
use "../Midi/Source/Metronome.kaba"

class MetronomeDialog extends Dialog
	Metronome *metro
	
	void __init__(Metronome *_metro)
		super.__init__("Metronome", 300, 250, _metro.win, true)
		fromSource("
Grid ? '' 1 3
	DrawingArea area ''
	Grid ? '' 3 3
		Text ? 'Speed'
		SpinButton bpm '0\\1' expandx
		Text ? '/min'
		Text ? 'Beats'
		SpinButton num_beats '4\\1\\99'
		.
		Text ? 'Sub Beats'
		SpinButton num_sub_beats '1\\1\\99'
		.
	Grid ? '' 2 1 buttonbar
		Button close 'Close' image=hui:close")
		
		metro = _metro
	
		setFloat("bpm", metro.source.bpm)
		setInt("num_beats", metro.source.num_beats)
	
		event("hui:close", &onClose)
		event("close", &onClose)
		event("bpm", &onBpm)
		event("num_beats", &onNumBeats)
		event("num_sub_beats", &onNumBeats)
		eventX("area", "hui:left-button-down", &onAreaLeftButtonDown)
	
	override void onDraw(Painter *p)
		float w = p.width
		float h = p.height
		float x0 = w / 2
		float y0 = h / 2
		float r = min(x0, y0) * 0.9
		
		// background
		p.setColor(colors.background)
		p.drawRect(0, 0, w, h)
		
		
		if metro.source.pause
			p.setFontSize(r * 1.8)
			p.setColor(ColorInterpolate(colors.grid, colors.background, 0.2))
			p.drawStr(x0-r*1.0, y0-r*1.2, "‚è∏")
			p.setFontSize(16)
		
		// circle
		p.setColor(ColorInterpolate(colors.grid, colors.background, 0.5))
		p.setFill(false)
		p.drawCircle(x0, y0, r)
		
		// top point
		p.setFill(true)
		p.setColor(colors.text_soft3)
		p.drawCircle(x0, y0 - r, 3)
		
		// moving point
		p.setColor(colors.text)
		float t = metro.source.fraction_beat - 0.5
		float phi = 2 *pi * (2*t*t*t + t/2)
		p.drawCircle(x0 - sin(phi) * r, y0 + cos(phi) * r, 5)
		
		// beat number
		int n = metro.source.cur_beat + 1
		p.drawStr(x0-7, y0-11, n)
	
	void onAreaLeftButtonDown()
		metro.source.setPause(!metro.source.pause)
		redraw("area")

	void onBpm()
		metro.source.setBpm(getFloat(""))

	void onNumBeats()
		int beats = getInt("num_beats")
		int sub_beats = getInt("num_sub_beats")
		metro.source.setBeats(beats, sub_beats)

	void onClose()
		metro.stop()

class Metronome extends TsunamiPlugin
	OutputStream *stream
	MidiRenderer *renderer
	MetronomeSource *source
	DummySynthesizer synth
	Dialog *dlg
	
	override void onStart()
		source = new MetronomeSource(90, 4, synth.sample_rate)
		renderer = new MidiRenderer(&synth, source)
		
		dlg = new MetronomeDialog(self)
		dlg.show()
		source.win = dlg
	
		stream = new OutputStream(renderer)
		stream.setBufferSize(1024)
		stream.play()
		
	override void onStop()
		source.win = nil
		delete dlg
		delete stream
		delete renderer
		delete source
