// Image = hui:media-play
// Title[Deutsch] = Metronom
use "../api.kaba"
use "../MidiSource/Metronome.kaba"

class MetronomeDialog extends Dialog
	Metronome *metro
	float fraction_prev
	float t_blink
	
	void __init__(Metronome *_metro)
		super.__init__("Metronome", 300, 320, _metro.session.win, true)
		fromSource("
Grid ? '' vertical
	DrawingArea area ''
	Grid ? ''
		Text ? 'Speed'
		SpinButton bpm '0' range=1: expandx
		Text ? '/min'
		---|
		Text ? 'Beats'
		SpinButton num_beats '4' range=1:99
		---|
		Text ? 'Sub Beats'
		SpinButton num_sub_beats '1' range=1:99
	Grid ? '' buttonbar
		Button close 'Close' image=hui:close")
		
		metro = _metro
		fraction_prev = 0
		t_blink = 0
	
		setFloat("bpm", metro.source.bpm)
		setInt("num_beats", metro.source.num_beats)
	
		event("hui:close", &onClose)
		event("close", &onClose)
		event("bpm", &onBpm)
		event("num_beats", &onNumBeats)
		event("num_sub_beats", &onNumBeats)
		eventX("area", "hui:left-button-down", &onAreaLeftButtonDown)
	
	override void onDraw(Painter *p)
		float w = p.width
		float h = p.height
		float x0 = w / 2
		float y0 = h / 2
		float r = min(x0, y0) * 0.9
		
		bool crossed_beat = fraction_prev > metro.source.fraction_beat
		if crossed_beat
			t_blink = 1
		
		// background
		p.setColor(colors.background)
		if crossed_beat
			p.setColor(ColorInterpolate(Red, colors.background, 0.5*sqrt(t_blink)))
		p.drawRect(0, 0, w, h)
		
		
		if metro.source.pause
			p.setFontSize(r * 1.8)
			p.setColor(ColorInterpolate(colors.grid, colors.background, 0.2))
			p.drawStr(x0-r*1.0, y0-r*1.2, "‚è∏")
			//p.setFontSize(16)
		
		// circle
		p.setColor(ColorInterpolate(colors.grid, colors.background, 0.5))
		p.setFill(false)
		p.drawCircle(x0, y0, r)
		
		// top point
		p.setFill(true)
		p.setColor(colors.text_soft3)
		p.drawCircle(x0, y0 - r, 3)
		
		// moving point
		p.setColor(colors.text)
		float t = metro.source.fraction_beat - 0.5
		float phi = 2 *pi * (2*t*t*t + t/2)
		p.drawCircle(x0 - sin(phi) * r, y0 + cos(phi) * r, 5)
		
		// beat number
		float fs = r * (1 + t_blink * 0.5) * 0.5
		p.setFontSize(fs)
		int n = metro.source.cur_beat + 1
		p.drawStr(x0-fs*0.4, y0-fs*0.75, n)
		
		fraction_prev = metro.source.fraction_beat
		t_blink *= 0.9
	
	void onAreaLeftButtonDown()
		metro.source.setPause(!metro.source.pause)
		redraw("area")

	void onBpm()
		metro.source.setBpm(getFloat(""))

	void onNumBeats()
		int beats = getInt("num_beats")
		int sub_beats = getInt("num_sub_beats")
		metro.source.setBeats(beats, sub_beats)

	void onClose()
		metro.stop()

class Metronome extends TsunamiPlugin
	OutputStream *stream
	MetronomeSource *source
	Synthesizer *synth
	Dialog *dlg
	
	override void onStart()
		synth = CreateSynthesizer(session, "")
		source = new MetronomeSource
		synth.set_source(source)
		
		dlg = new MetronomeDialog(self)
		dlg.show()
		source.win = dlg
	
		stream = new OutputStream(session, synth.out)
		stream.set_buffer_size(1024)
		stream.play()
		
	override void onStop()
		source.win = nil
		delete dlg
		delete stream
		delete synth
		delete source
