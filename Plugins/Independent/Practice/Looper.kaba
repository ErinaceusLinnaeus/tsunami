
use hui
use tsunami

#class LoopSource extends AudioSource
#	int offset
#	Looper* looper
#	void __init__(Looper l)
#		looper = &l
#	override void reset_state()
#		offset = 0
#	override int read(AudioBuffer buf)
#		if len(looper.buffers) > 0
#			buf.set(*looper.buffers[0], -offset, 1.0)
#			offset += len(buf)
#			if offset >= len(*looper.buffers[0])
#				offset = 0
#		#print("read {{len(buf)}}")
#		return len(buf)



class LooperPanel extends ConfigPanel
	var override c: Looper*
	func override __init__(_c: Module)
		from_source("
Grid ? ''
	Label rec-time '' expandx
	---|
	Button button 'X'")
		activate("button")
		event("button", on_button)
		c.panel = &self
	
	func mut _update()
		set_string("rec-time", c.session.song.get_time_str_long(len(c.recorder.buffer)))
			
	
	func mut on_button()
		c.tab()

class Looper extends TsunamiPlugin
	var chain: SignalChain*
	var recorder: AudioAccumulator*
	var panel: LooperPanel*
	var song: Song*
	
	var length: int
	
	var runner: int
	var mode: int
	
	func override on_start()
		panel = nil
		length = 0
		mode = 0
		song = session.song
		chain = session.create_signal_chain("click-counter")
		var input = chain.add(Module.Type.STREAM, "AudioInput")
		recorder = chain.add(Module.Type.PLUMBING, "AudioAccumulator")
		var sucker = chain.add(Module.Type.PLUMBING, "AudioSucker")
		chain.connect(input, 0, recorder, 0)
		chain.connect(recorder, 0, sucker, 0)
		
		runner = hui.run_repeated(0.05, on_update)
		#chain.subscribe(self, on_update, "Click")
		
		chain.start()
		
	func override on_stop()
		hui.cancel_runner(runner)
		#chain.unsubscribe(&self)
		del chain
	
	func mut on_update()
		if panel
			panel._update()
	func mut tab()
		if mode == 0
			rec_start()
		else if mode == 1
			rec_stop()
	
	func mut rec_start()
		recorder.command(Module.Command.ACCUMULATION_START, 0)
		mode = 1
	func mut rec_stop()
		recorder.command(Module.Command.ACCUMULATION_STOP, 0)
		
		length = len(recorder.buffer)
		var t = song.add_track(SignalType.AUDIO, 0)
		var tbuf: AudioBuffer
		var a = t.layers[0].edit_buffers(tbuf, Range(0, length))
		tbuf.set(recorder.buffer, 0, 1.0)
		t.layers[0].edit_buffers_finish(a)
		
		recorder.command(Module.Command.ACCUMULATION_CLEAR, 0)
		mode = 2
		
		session.view.sel.range_raw = Range(0, length)
		session.view.set_playback_loop(true)
		session.view.play()
		session.view.optimize_view()

	func override create_panel() -> ConfigPanel*
		return new LooperPanel(self)
