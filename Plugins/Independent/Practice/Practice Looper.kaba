use hui
use tsunami


func get_part(s: Song, offset: int) -> TrackMarker*
	for t in s.time_track()
		for m in t.layers[0].markers
			if m.range.inside(offset)
				return weak(m)
	return nil



class PLPanel extends ConfigPanel
	var looper: PracticeLooper&
	
	func __init__(l: PracticeLooper)
		super.__init__(l)
		looper := &l
		from_source("
Grid ? '' vertical
	Label ? 'Do not edit the file (even adjusting volumes)!' bold italic
	Grid ? ''
		Button play 'Play' expandx expandy
		Button pause 'Pause' expandx expandy
	Grid ? ''
		Label ? 'Speed'
		SpinButton speed '{{looper.config.speed}}' range=0:2:0.01
		Button set 'Set'")

		event("play", on_play)
		event("pause", on_pause)
		event("set", on_set_speed)

	func override update()
		set_float("speed", looper.config.speed)
	
	func mut on_play()
		looper.play()
	func mut on_pause()
		looper.pause()
	func mut on_set_speed()
		looper.set_speed(get_float("speed"))


func scale_range(r: Range, s: float) -> Range
	return RangeTo(int(r.start() * s), int(r.end() * s))


class PracticeLooper extends TsunamiPlugin
	var runner: int
	var chain: shared![SignalChain]
	var renderer: shared![SongRenderer]
	var song: shared![Song]
	var altered_speed = false
	var current_speed = 1.0
#	var old_sel: Range

	class Config extends Module.Config
		var speed: float
		func override reset()
			speed = 1.0
	var config: Config
	
	func override on_start()
		song = session.song
		chain = session.view.signal_chain
		renderer = session.view.renderer
#		runner = hui.run_repeated(0.05, self, on_update)
		
	func override on_stop()
#		hui.cancel_runner(runner)
		reset()
			
	func override create_panel() -> xfer[ConfigPanel]
		return new PLPanel(self)
	
	func mut play()
		session.view.play()
		return
		print(session.view.sel.range())
		session.view.prepare_playback(session.view.sel.range(), true)
		#renderer.set_range(session.view.sel.range())
		renderer.set_loop(true)
		#chain.command(Module.Command.PREPARE_START, 0)
		chain.start()
	
	func mut pause()
		chain.stop()
	
	func mut reset()
		if not altered_speed
			return
#		session.view.sel.range_raw = scale_range(session.view.sel.range_raw, current_speed)
		session.view.cam.set_range(scale_range(session.view.cam.range(), current_speed))
		song.undo()
		altered_speed = false
		current_speed = 1.0
	
	func mut set_speed(speed: float)
		config.speed = speed
		changed()
	
	func override on_config()
		if altered_speed
			reset()
		if config.speed != current_speed
			song.begin_action_group("set speed")
			for i=>_b in song.bars
				for b in _b
					var bb: Bar
					bb.beats = b.beats
					bb.divisor = b.divisor
					bb.length = int(b.length / config.speed)
					song.edit_bar(i, bb, Bar.EditMode.STRETCH_AND_SCALE_AUDIO)
			song.end_action_group()
	#		old_sel = session.view.sel.range_raw
			session.view.cam.set_range(scale_range(session.view.cam.range(), 1. / config.speed))
	#		session.view.sel.range_raw = scale_range(session.view.sel.range_raw, 1. / config.speed)
	#		session.view.update_selection()
			altered_speed = true
			current_speed = config.speed
