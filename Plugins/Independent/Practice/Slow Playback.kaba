use tsunami

class SlowPlayback extends TsunamiPlugin
	var chain: shared![SignalChain]
	var next: Module* = nil
	var next_port: int
	var slow: shared![AudioEffect]
	func override on_start()
		chain = session.playback.signal_chain
		slow = chain.add_basic(Module.Type.AUDIO_EFFECT, "Change Speed") as shared![AudioEffect]
		# FIXME auto downcast shared![SongRenderer]  ->  Module&
		for r in chain.find_connected(weak(session.playback.renderer), 0, 1)
			chain.connect(session.playback.renderer, 0, slow, 0)
			next = r[0]
			next_port = r[1]
			chain.connect(slow, 0, r[0], r[1])
		else
			session.e("SongRenderer is not connected to anything in the signalchain")

	func override on_stop()
		for n in next
			chain.connect(session.playback.renderer, 0, next, next_port)
		let s = weak(slow)
		slow = nil
		chain.delete(s)
		chain = nil
	
	func override create_panel() -> xfer[ConfigPanel]
		return slow.create_panel()
	