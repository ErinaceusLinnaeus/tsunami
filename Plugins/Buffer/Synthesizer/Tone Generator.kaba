// Image = hui:add
// Title[Deutsch] = Sinus Generator

use "../../api.kaba"
use "../../tone.kaba"


class PluginData
	int Pitch
	float Frequency
	float Volume

PluginData data

DummySynthesizer synth

ConfigDialog *dlg

void ProcessTrack(BufferBox buf)
	AudioFile *a = audio
	synth.sample_rate = a.sample_rate
	Range r
	r.offset = 0
	r.length = buf.num
	synth.RenderNote(buf, r, freq_to_pitch(data.Frequency), data.Volume)

	/*float f = data.Frequency

	float w_f = 1.0 / a.sample_rate * f * 2.0 * pi

	for int i, 0, buf.num
		float tt = i * w_f
		float d = sin(tt) * data.Volume
		buf.r[i] = clamp(buf.r[i] + d, -1, 1)
		buf.l[i] = clamp(buf.l[i] + d, -1, 1)*/

class ConfigDialog : Dialog
	void __init__()
		super.__init__("Ton Generator", 420, 135, MainWin, false)
		AddGrid("", 0, 0, 1, 2, "table1")
		SetTarget("table1", 0)
		AddGrid("", 0, 0, 3, 3, "table2")
		SetTarget("table2", 0)
		AddRadioButton("Ton", 0, 0, 0, 0, "type:pitch")
		AddRadioButton("Frequenz", 0, 1, 0, 0, "type:freq")
		AddSpinButton("\\0\\100000\\0.1", 1, 1, 0, 0, "frequency")
		AddText("Hz", 2, 1, 0, 0, "")
		AddText("LautstÃ¤rke:", 0, 2, 0, 0, "")
		AddText("%", 2, 2, 0, 0, "")
		AddGrid("", 1, 0, 2, 1, "table3")
		AddGrid("", 1, 2, 2, 1, "table4")
		SetTarget("table3", 0)
		AddComboBox("", 0, 0, 0, 0, "pitch_rel")
		AddSpinButton("\\0\\8", 1, 0, 0, 0, "octave")
		SetTarget("table4", 0)
		AddSlider("", 0, 0, 0, 0, "volume_slider")
		AddSpinButton("\\0\\100\\0.1", 1, 0, 0, 0, "volume")
		
		PutCommandBar(self, "table1", 0, 1)
	
		Reset("pitch_rel")
		for int i, 0, 12
			SetString("pitch_rel", rel_pitch_name(i))
	
		CreateSliderM(self, "volume_slider", "volume", 0, 1, 100, &OnVolume, data.Volume)
		EventM("pitch_rel", &OnPitch)
		EventM("octave", &OnPitch)
		EventM("frequency",  &OnFrequency)
		EventM("type:freq",  &OnTypeFreq)
		EventM("type:pitch", &OnTypePitch)

		fill()

	void OnFrequency()
		data.Pitch = -1
		data.Frequency = GetFloat("")

	void ReadPitchFromDialog()
		data.Pitch = pitch_from_octave_and_rel(GetInt("pitch_rel"),
		                                       GetInt("octave"))

	void OnPitch()
		ReadPitchFromDialog()
		data.Frequency = pitch_to_freq(data.Pitch)
		SetFloat("frequency", data.Frequency)

	void OnVolume()
		data.Volume = SliderGet(self, "volume")

	void fill()
		bool by_pitch = data.Pitch >= 0
		if by_pitch
			SetInt("pitch_rel", data.Pitch % 12)
			SetInt("octave", pitch_get_octave(data.Pitch))
			Check("type:pitch", true)
		else
			Check("type:freq", true)
		SetFloat("frequency", data.Frequency)
		SliderSet(self, "volume", data.Volume)

		Enable("frequency", !by_pitch)
		Enable("octave", by_pitch)
		Enable("pitch_rel", by_pitch)

	void OnTypeFreq()
		data.Pitch = -1
		fill()

	void OnTypePitch()
		ReadPitchFromDialog()
		data.Frequency = pitch_to_freq(data.Pitch)
		fill()
	
	
void DataToDialog()
	dlg.fill()

void ResetData()
	data.Pitch = 81
	data.Volume = 0.3
	data.Frequency = pitch_to_freq(data.Pitch)

void Configure()
	dlg = new ConfigDialog
	dlg.Run()

