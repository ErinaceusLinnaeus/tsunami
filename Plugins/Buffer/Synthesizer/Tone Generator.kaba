// Image = hui:add
// Title[Deutsch] = Sinus Generator

use "../../api.kaba"
use "../../tone.kaba"


class Config : PluginData
	int Pitch
	float Frequency
	float Volume
	overwrite void reset()
		Pitch = 81
		Volume = 0.3
		Frequency = pitch_to_freq(Pitch)

class ToneGenerator : AudioEffect
	Config config
	ConfigPanel *panel
	DummySynthesizer synth

	overwrite void processTrack(BufferBox buf)
		AudioFile *a = audio
		synth.sample_rate = a.sample_rate
		Range r
		r.offset = 0
		r.length = buf.num
		synth.renderNote(buf, r, freq_to_pitch(config.Frequency), config.Volume)

		/*float f = config.Frequency

		float w_f = 1.0 / a.sample_rate * f * 2.0 * pi

		for int i, 0, buf.num
			float tt = i * w_f
			float d = sin(tt) * config.Volume
			buf.r[i] = clamp(buf.r[i] + d, -1, 1)
			buf.l[i] = clamp(buf.l[i] + d, -1, 1)*/
	
	
	overwrite void updateDialog()
		panel.fill()

	overwrite Panel *createPanel()
		panel = new ConfigPanel(self)
		return panel

class ConfigPanel : Panel
	ToneGenerator *t
	void __init__(ToneGenerator *_t)
		addGrid("!width=350", 0, 0, 3, 3, "table2")
		setTarget("table2", 0)
		addRadioButton("Ton", 0, 0, 0, 0, "type:pitch")
		addRadioButton("Frequenz", 0, 1, 0, 0, "type:freq")
		addSpinButton("\\0\\100000\\0.1", 1, 1, 0, 0, "frequency")
		addText("Hz", 2, 1, 0, 0, "")
		addText("LautstÃ¤rke:", 0, 2, 0, 0, "")
		addText("%", 2, 2, 0, 0, "")
		addGrid("", 1, 0, 2, 1, "table3")
		addGrid("", 1, 2, 2, 1, "table4")
		setTarget("table3", 0)
		addComboBox("", 0, 0, 0, 0, "pitch_rel")
		addSpinButton("\\0\\8", 1, 0, 0, 0, "octave")
		setTarget("table4", 0)
		addSlider("", 0, 0, 0, 0, "volume_slider")
		addSpinButton("\\0\\100\\0.1", 1, 0, 0, 0, "volume")
		
		t = _t
	
		reset("pitch_rel")
		for int i, 0, 12
			setString("pitch_rel", rel_pitch_name(i))
	
		CreateSliderM(self, "volume_slider", "volume", 0, 1, 100, &onVolume, t.config.Volume)
		eventM("pitch_rel", self, &onPitch)
		eventM("octave", self, &onPitch)
		eventM("frequency",  self, &onFrequency)
		eventM("type:freq",  self, &onTypeFreq)
		eventM("type:pitch", self, &onTypePitch)

		fill()

	void onFrequency()
		t.config.Pitch = -1
		t.config.Frequency = getFloat("")
		t.notify()

	void readPitchFromDialog()
		t.config.Pitch = pitch_from_octave_and_rel(getInt("pitch_rel"),
		                                           getInt("octave"))

	void onPitch()
		readPitchFromDialog()
		t.config.Frequency = pitch_to_freq(t.config.Pitch)
		setFloat("frequency", t.config.Frequency)
		t.notify()

	void onVolume()
		t.config.Volume = SliderGet(self, "volume")
		t.notify()

	void fill()
		bool by_pitch = t.config.Pitch >= 0
		if by_pitch
			setInt("pitch_rel", t.config.Pitch % 12)
			setInt("octave", pitch_get_octave(t.config.Pitch))
			check("type:pitch", true)
		else
			check("type:freq", true)
		setFloat("frequency", t.config.Frequency)
		SliderSet(self, "volume", t.config.Volume)

		enable("frequency", !by_pitch)
		enable("octave", by_pitch)
		enable("pitch_rel", by_pitch)

	void onTypeFreq()
		t.config.Pitch = -1
		fill()
		t.notify()

	void onTypePitch()
		readPitchFromDialog()
		t.config.Frequency = pitch_to_freq(t.config.Pitch)
		fill()
		t.notify()

