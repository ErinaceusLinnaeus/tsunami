// Image = hui:add
// Title[Deutsch] = Metronom

use "../../api.kaba"


class PluginData
	float BeatsPerMinute
	float Volume
	int BeatsPerMeasure


class PluginState
	int beat
	int dpos


DummySynthesizer synth


class Metronome : AudioEffect
	PluginState state
	PluginData config
	ConfigDialog *dlg

	overwrite void ProcessTrack(BufferBox buf)
		AudioFile *a = audio

		float dt_m = 60.0 / config.BeatsPerMinute
		int sm_m = dt_m * a.sample_rate
	
		synth.sample_rate = a.sample_rate

		while true
			if state.beat == 0
				synth.RenderMetronomeClick(buf, state.dpos, 0, config.Volume)
			else
				synth.RenderMetronomeClick(buf, state.dpos, 1, config.Volume)
		
			state.beat ++
			if state.beat >= config.BeatsPerMeasure
				state.beat = 0
			state.dpos += sm_m
			if state.dpos >= buf.num
				state.dpos -= buf.num
				break

	overwrite void ResetState()
		state.beat = 0
		state.dpos = 0

	overwrite void ResetConfig()
		config.Volume = 0.3
		config.BeatsPerMinute = 90
		config.BeatsPerMeasure = 4

	overwrite void UpdateDialog()
		dlg.fill()
		
	overwrite void Configure()
		dlg = new ConfigDialog(self)
		dlg.Run()

	
class ConfigDialog : Dialog
	Metronome *m
	void __init__(Metronome *_m)
		super.__init__("Metronom", 305, 135, MainWin, false)
		AddGrid("", 0, 0, 1, 2, "table1")
		SetTarget("table1", 0)
		AddGrid("", 0, 0, 2, 3, "table2")
		SetTarget("table2", 0)
		AddText("Geschwindigkeit:", 0, 0, 0, 0, "")
		AddSpinButton("!expandx\\\\0\\1000\\0.1", 1, 0, 0, 0, "beats_per_minute")
		AddText("/min", 2, 0, 0, 0, "")
		AddText("Schläge pro Takt:", 0, 1, 0, 0, "")
		AddSpinButton("\\1\\32\\1", 1, 1, 0, 0, "beats_per_measure")
		AddText("Lautstärke:", 0, 2, 0, 0, "")
		AddSpinButton("\\0\\100\\0.1", 1, 2, 0, 0, "volume")
		AddText("%", 2, 2, 0, 0, "")
		PutCommandBar(self, "table1", 0, 1)
	
		EventM("beats_per_minute", &OnMetroBeats)
		EventM("beats_per_measure", &OnMetroMeasure)
		EventM("volume", &OnMetroVolume)
		
		m = _m
	
		fill()

	void fill()
		SetFloat("beats_per_minute", m.config.BeatsPerMinute)
		SetInt("beats_per_measure", m.config.BeatsPerMeasure)
		SetFloat("volume", m.config.Volume * 100)
		//SliderSet(self, "volume", m.config.Volume)

	void OnMetroBeats()
		m.config.BeatsPerMinute = GetFloat("")

	void OnMetroMeasure()
		m.config.BeatsPerMeasure = GetInt("")

	void OnMetroVolume()
		m.config.Volume = GetFloat("") / 100
		//m.config.Volume = SliderGet(self, "volume")

