// Image = hui:add
// Title[Deutsch] = Akkordfolge

use "../../api.kaba"
use "../../tone.kaba"


class PluginConfig : PluginData
	string Chords
	float Volume
	bool DurationByBeats
	float Duration
	int Beats

	overwrite void reset()
		Volume = 0.2
		Chords = "aeFa"
		DurationByBeats = false
		Duration = 2.0
		Beats = 1


class ChordProgression : AudioEffect
	PluginConfig config
	DummySynthesizer synth
	ConfigDialog *dlg

	overwrite void ProcessTrack(BufferBox buf)
		Chord chord[]
		AudioFile *a = audio
		ParseChords(config.Chords, chord)
	
		int p0 = a.GetNextBeat(buf.offset)
		synth.sample_rate = a.sample_rate
	
		for int i, 0, chord.num
			int pos0 = f2i(a.sample_rate * config.Duration * i2f(i))
			int pos1 = f2i(a.sample_rate * config.Duration * i2f(i + 1))
			if config.DurationByBeats
				pos0 = p0 - buf.offset
				for int j, 0, config.Beats
					p0 = a.GetNextBeat(p0)
				pos1 = p0 - buf.offset
			AddChord(synth, buf, pos0, pos1, chord[i], config.Volume)

	overwrite void UpdateDialog()
		dlg.fill()

	overwrite void Configure()
		dlg = new ConfigDialog(self)
		dlg.Run()

class ConfigDialog : Dialog
	ChordProgression *c
	void __init__(ChordProgression *_c)
		super.__init__("Akkord Generator", 415, 185, MainWin, false)
		AddGrid("", 0, 0, 1, 3, "table1")
		SetTarget("table1", 0)
		AddGrid("", 0, 1, 4, 4, "table2")
		SetTarget("table2", 0)
		AddText("Akkorde:", 0, 0, 0, 0, "")
		AddEdit("", 1, 0, 0, 0, "chords")
		AddText("Lautstärke:", 0, 1, 0, 0, "")
		AddSlider("", 1, 1, 0, 0, "volume_slider")
		AddSpinButton("\\0\\100\\0.1", 2, 1, 0, 0, "volume")
		AddText("%", 3, 1, 0, 0, "")
		AddText("Dauer:", 0, 2, 0, 0, "")
		AddRadioButton("Sekunden", 1, 2, 0, 0, "duration_type:time")
		AddSpinButton("\\0\\100\\0.01", 2, 2, 0, 0, "duration")
		AddRadioButton("Schläge", 1, 3, 0, 0, "duration_type:beats")
		AddSpinButton("\\1\\100\\1", 2, 3, 0, 0, "beats")
		
		PutCommandBar(self, "table1", 0, 2)
		PutFavoriteBar(self, "table1", 0, 0)
	
		c = _c
	
		CreateSliderM(self, "volume_slider", "volume", 0, 1, 100, &OnVolume, c.config.Volume)
		EventM("chords", self, &OnChords)
		EventM("duration_type:beats", self, &OnDurationTypeBeats)
		EventM("duration_type:time", self, &OnDurationTypeTime)
		EventM("duration", self, &OnDuration)
		EventM("beats", self, &OnBeats)

		fill()
	
	void fill()
		SetString("chords", c.config.Chords)
		SliderSet(self, "volume", c.config.Volume)
		Check("duration_by_beats", c.config.DurationByBeats)
		SetFloat("duration", c.config.Duration)
		SetInt("beats", c.config.Beats)
		Enable("duration", !c.config.DurationByBeats)
		Enable("beats", c.config.DurationByBeats)

	void OnChords()
		c.config.Chords = GetString("")

	void OnVolume()
		c.config.Volume = SliderGet(self, "volume")

	void OnDurationTypeBeats()
		c.config.DurationByBeats = true
		Enable("duration", false)
		Enable("beats", true)

	void OnDurationTypeTime()
		c.config.DurationByBeats = false
		Enable("duration", true)
		Enable("beats", false)

	void OnDuration()
		c.config.Duration = GetFloat("")

	void OnBeats()
		c.config.Beats = GetInt("")

