// Image = hui:properties
// Title[Deutsch] = Equalizer

use "../../api.kaba"
use "../../grid.kaba"



const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int MIN_VOL = 0-45
const int MAX_VOL = 45

class Config extends PluginData
	vector[] curve

	void fill_inter(FloatInterpolator fi)
		fi.setType("cubic-spline-notang")
		fi.add3(curve[0].y, 0.0, exp(curve[0].z), 0.0)
		for i in 1:curve.num
			fi.add3(curve[i].y, 0.0, exp(curve[i].z), log(curve[i].x / curve[i - 1].x))
		fi.normalize()

	override void reset()
		curve.clear()
		curve.add(vector(MIN_FREQ, 0, 0))
		curve.add(vector(MAX_FREQ, 0, 0))
		//MouseOver = -1
		//Selected = -1

class Equalizer extends AudioEffect

	Config config

	void equalize(float[] b)
		complex[] f
	
	
		// transform
		int len2 = b.num / 2 + 1
		f.resize(len2)
		fft_r2c(b, f)
	
		FloatInterpolator fi
		config.fill_inter(fi)
	
		// equalize
		f *= (1.0 / b.num)
		float w = i2f(b.num) / song.sample_rate
		for i in 1:f.num
			float freq = i2f(i) / w
			float param = lin2log(freq, MIN_FREQ, MAX_FREQ)
			float db = fi.get(param)
			f[i] = f[i] * pow(10, db / 20)
		
		// transform back
		fft_c2r_inv(f, b)

	override void process(BufferBox buf)
		equalize(buf.r)
		equalize(buf.l)

	override ConfigPanel *createPanel()
		return new EqualizerPanel(self)


class EqualizerGrid extends Grid
	Config *c
	ConfigPanel *cp
	int MouseOver, Selected
	override void onDraw(Painter *p)
		// curve + area below
		FloatInterpolator fi
		c.fill_inter(fi)
		drawCurve(p, fi, true)
	
		// points
		for i in 0:c.curve.num
			drawPoint3(p, c.curve[i], i == Selected, i == MouseOver)
			

	// left button down -> select
	override void onLeftButtonDown()
		Selected = MouseOver
		redraw()

	override void onMouseWheel()
		if MouseOver >= 0
			if HuiGetEvent().wheel > 0
				c.curve[MouseOver].z += 0.2
			else
				c.curve[MouseOver].z -= 0.2
			cp.notify()
			redraw()

	// right button down -> new point
	override void onRightButtonDown()
		vector m = getMouse3(0)
		for i in 1:c.curve.num
			if (m.x > c.curve[i - 1].x) and (m.x < c.curve[i].x)
				c.curve.insert(m, i)
				cp.notify()
				Selected = i
				MouseOver = i
				redraw()
				break

	override void onMouseMove()
		// move
		if HuiGetEvent().button_l and (Selected >= 0)
			c.curve[Selected] = getMouse3(c.curve[Selected].z)
			float xmin = MIN_FREQ
			float xmax = MAX_FREQ
			if Selected > 0
				xmin = c.curve[Selected - 1].x
			if Selected < c.curve.num - 1
				xmax = c.curve[Selected + 1].x
			c.curve[Selected].x = clamp(c.curve[Selected].x, xmin, xmax)
			c.curve[Selected].y = clamp(c.curve[Selected].y, MIN_VOL, MAX_VOL)
			if Selected == c.curve.num - 1
				c.curve[Selected].x = MAX_FREQ
			if Selected == 0
				c.curve[Selected].x = MIN_FREQ
			cp.notify()
		else
		// mouse over?
			MouseOver = -1
			for i in 0:c.curve.num
				if mouseOverPoint3(c.curve[i])
					MouseOver = i
		redraw()

	// [Delete] -> remove point
	override void onKeyDown()
		if HuiGetEvent().key_code == KeyDelete
			if Selected > 0 and Selected < c.curve.num-1
				c.curve.remove(Selected)
				cp.notify()
				Selected = -1
				redraw()

class EqualizerPanel extends ConfigPanel
	EqualizerGrid grid
	override void __init__(Equalizer *e)
		super.__init__(e)
		addDrawingArea("!grabfocus,height=250", 0, 0, 0, 0, "drawing")
	
		grid.init(self, "drawing")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp = self
		grid.c = &e.config
	
		grid.redraw()
		
	override void update()
		grid.redraw()

