// Image = hui:properties
// Title[Deutsch] = Equalizer

use "../../api.kaba"
use "../../grid.kaba"



const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int MIN_VOL = 0-45
const int MAX_VOL = 45

class Config : PluginData
	vector curve[]

	void fill_inter(FloatInterpolator fi)
		fi.setType("cubic-spline-notang")
		fi.add3(curve[0].y, 0.0, exp(curve[0].z), 0.0)
		for int i, 1, curve.num
			fi.add3(curve[i].y, 0.0, exp(curve[i].z), log(curve[i].x / curve[i - 1].x))

	overwrite void reset()
		curve.clear()
		curve.add(vector(MIN_FREQ, 0, 0))
		curve.add(vector(MAX_FREQ, 0, 0))
		//MouseOver = -1
		//Selected = -1

class Equalizer : AudioEffect

	Config config
	ConfigDialog *dlg


	void equalize(float b[])
		complex f[]
	
	
		// transform
		int len2 = b.num / 2 + 1
		f.resize(len2)
		fft_r2c(b, f)
	
		FloatInterpolator fi
		config.fill_inter(fi)
	
		// equalize
		f *= (1.0 / b.num)
		float w = i2f(b.num) / audio.sample_rate
		for int i, 1, f.num
			float freq = i2f(i) / w
			float param = lin2log(freq, MIN_FREQ, MAX_FREQ)
			float db = fi.get(param)
			f[i] = f[i] * pow(10, db / 20)
		
		// transform back
		fft_c2r_inv(f, b)

	overwrite void ProcessTrack(BufferBox buf)
		equalize(buf.r)
		equalize(buf.l)

	overwrite void UpdateDialog()
		dlg.Redraw("drawing")

	overwrite void Configure()
		dlg = new ConfigDialog(self)
		dlg.Run()

class ConfigDialog : Dialog
	int MouseOver, Selected
	GridData grid
	Equalizer *e
	void __init__(Equalizer *_e)
		super.__init__("Equalizer", 600, 400, MainWin, false)
		AddGrid("", 0, 0, 1, 3, "table")
		SetTarget("table", 0)
		AddDrawingArea("", 0, 1, 0, 0, "drawing")

		PutFavoriteBar(self, "table", 0, 0)
		PutCommandBar(self, "table", 0, 2)
		
		e = _e
	
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
	
		Redraw("drawing")
	
	overwrite void OnDraw()
		Painter *c = BeginDraw("drawing")
		float w = c.width
		float h = c.height
	
		grid.Draw(c, 0, 0, w, h)
	
		// curve + area below
		FloatInterpolator fi
		e.config.fill_inter(fi)
		grid.DrawCurve(c, fi, true)
	
		// points
		for int i, 0, e.config.curve.num
			grid.DrawPoint3(c, e.config.curve[i], i == Selected, i == MouseOver)
		c.End()

	// left button down -> select
	overwrite void OnLeftButtonDown()
		Selected = MouseOver
		Redraw("drawing")

	// left button up -> if moved to a neighbour -> remove point
	overwrite void OnLeftButtonUp()
		/*if Selected >= 0
			bool del = false//(data.curve[Selected] == data.curve[Selected - 1])
			if Selected < data.curve.num - 1
				del = del or (data.curve[Selected] == data.curve[Selected + 1])
			if del
				data.curve.remove(Selected)
				Selected = -1
				Redraw("drawing")*/

	overwrite void OnMouseWheel()
		if MouseOver >= 0
			if HuiGetEvent().wheel > 0
				e.config.curve[MouseOver].z += 0.2
			else
				e.config.curve[MouseOver].z -= 0.2
			Redraw("drawing")

	// right button down -> new point
	overwrite void OnRightButtonDown()
		vector m = grid.GetMouse3(0)
		for int i, 1, e.config.curve.num
			if (m.x > e.config.curve[i - 1].x) and (m.x < e.config.curve[i].x)
				e.config.curve.insert(m, i)
				Selected = i
				MouseOver = i
				Redraw("drawing")
				break

	overwrite void OnMouseMove()
		// move
		if HuiGetEvent().button_l and (Selected >= 0)
			e.config.curve[Selected] = grid.GetMouse3(e.config.curve[Selected].z)
			float xmin = MIN_FREQ
			float xmax = MAX_FREQ
			if Selected > 0
				xmin = e.config.curve[Selected - 1].x
			if Selected < e.config.curve.num - 1
				xmax = e.config.curve[Selected + 1].x
			e.config.curve[Selected].x = clamp(e.config.curve[Selected].x, xmin, xmax)
			e.config.curve[Selected].y = clamp(e.config.curve[Selected].y, MIN_VOL, MAX_VOL)
			if Selected == e.config.curve.num - 1
				e.config.curve[Selected].x = MAX_FREQ
			if Selected == 0
				e.config.curve[Selected].x = MIN_FREQ
		else
		// mouse over?
			MouseOver = -1
			for int i, 0, e.config.curve.num
				if grid.MouseOverPoint3(e.config.curve[i])
					MouseOver = i
		Redraw("drawing")

