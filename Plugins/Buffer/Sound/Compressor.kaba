// Image = hui:properties
// Title[Deutsch] = Kompressor

use "../../api.kaba"
use "../../grid.kaba"

const float MIN_DB = 0.0 - 60.0

class CompressorConfig : PluginData
	complex curve[]
	float attack, release

	void fill_inter(FloatInterpolator fi)
		fi.setType("lerp")
		fi.add(curve[0].y, 0)
		for int i, 1, curve.num
			fi.add(curve[i].y, curve[i].x - curve[i - 1].x)
		fi.normalize()

	overwrite void reset()
		curve.clear()
		curve.add(complex(MIN_DB, MIN_DB))
		curve.add(complex(0, 0))
		attack = 0.01
		release = 0.1
		//MouseOver = -1
		//Selected = -1

class CompressorState : PluginData
	float gain_r, gain_l
	float squares_r[]
	float squares_l[]
	overwrite void reset()
		gain_r = 1
		gain_l = 1
		squares_r.clear()
		squares_r.resize(70)
		squares_l.clear()
		squares_l.resize(70)


class Compressor : AudioEffect
	CompressorConfig config
	CompressorState state

	ConfigPanel *panel

	float dgain_attack, dgain_release

	void compress(float b[], float squares[], float *gain)
		float bmin = pow(10, MIN_DB/20)
		for int i, 0, b.num
		
			// in level (filtered)
			squares[i%squares.num] = b[i]*b[i]
			float rms = sqrt(squares.sum() / squares.num * 2)
			if config.attack < 0.00005 // = 0
				rms = abs(b[i])
			float in_level = MIN_DB
			if rms > bmin
				in_level = log(rms) / log(10) * 20
		
			// out level
			float out_level = in_level
			for int j, 1, config.curve.num
				if (in_level >= config.curve[j - 1].x) and (in_level <= config.curve[j].x)
					out_level = config.curve[j - 1].y + (config.curve[j].y - config.curve[j - 1].y) * (in_level - config.curve[j - 1].x) / (config.curve[j].x - config.curve[j - 1].x)
					break
			
			// slow gain changes
			float cur_gain = out_level - in_level
			if cur_gain > *gain
				if config.release < 0.00005
					*gain = cur_gain
				else
					*gain += dgain_release
			else if cur_gain < *gain
				if config.attack < 0.00005
					*gain = cur_gain
				else
					*gain -= dgain_attack
			
			// apply gain
			b[i] *= pow(10, *gain / 20)

	overwrite void updateDialog()
		panel.fill()

	overwrite Panel *createPanel()
		panel = new ConfigPanel(self)
		return panel

	overwrite void processTrack(BufferBox buf)
		AudioFile *a = audio
		
		dgain_attack = 10 / (config.attack * a.sample_rate)
		dgain_release = 10 / (config.release * a.sample_rate)
		
		compress(buf.r, state.squares_r, &state.gain_r)
		compress(buf.l, state.squares_l, &state.gain_l)

class CompressorGrid : Grid
	int MouseOver, Selected
	CompressorConfig *config
	Compressor *c

	overwrite void onDraw(Painter *p)
		FloatInterpolator fi
		config.fill_inter(fi)
	
		// curve
		drawCurve(p, fi, true)
		for int i, 1, config.curve.num
			drawPoint2(p, config.curve[i], i == Selected, i == MouseOver)

	// left button down -> select
	overwrite void onLeftButtonDown()
		Selected = MouseOver
		redraw()

	// right button down -> new point
	overwrite void onRightButtonDown()
		complex m = getMouse2()
		for int i, 1, config.curve.num
			complex q = config.curve[i - 1]
			complex p = config.curve[i]
			if (m.x > q.x) and (m.x < p.x)
				config.curve.insert(m, i)
				c.notify()
				Selected = i
				redraw()
				break

	overwrite void onMouseMove()
		// move
		if HuiGetEvent().button_l and (Selected > 0)
			config.curve[Selected] = getMouse2()
			float xmin = config.curve[Selected - 1].x
			float xmax = 0
			if Selected < config.curve.num - 1
				xmax = config.curve[Selected + 1].x
			config.curve[Selected].x = clamp(config.curve[Selected].x, xmin, xmax)
			if Selected == config.curve.num - 1
				config.curve[Selected].x = 0
			c.notify()
		else
		// mouse over?
			MouseOver = -1
			for int i, 1, config.curve.num
				if mouseOverPoint2(config.curve[i])
					MouseOver = i
		redraw()

	overwrite void onKeyDown()
		int k = HuiGetEvent().key

		// [Delete] -> remove point
		if (k == KeyDelete) and (Selected > 0) and (Selected < config.curve.num - 1)
			config.curve.remove(Selected)
			c.notify()
			Selected = -1
			redraw()

class ConfigPanel : Panel
	CompressorGrid grid
	void __init__(Compressor *_fx)
		addGrid("!width=300,height=320", 0, 0, 1, 2, "table1")
		setTarget("table1", 0)
		addDrawingArea("!grabfocus", 0, 0, 0, 0, "drawing_area")
		addGrid("!noexpandy", 0, 1, 6, 1, "table2")
		setTarget("table2", 0)
		addText("Attack", 0, 0, 0, 0, "")
		addSpinButton("\\0\\100\\0.1", 1, 0, 0, 0, "attack")
		addText("ms", 2, 0, 0, 0, "")
		addText("Release", 3, 0, 0, 0, "")
		addSpinButton("\\0\\1000\\0.1", 4, 0, 0, 0, "release")
		addText("ms", 5, 0, 0, 0, "")
		
		grid.config = &_fx.config
		grid.c = _fx
		
		eventM("attack", self, &onEdit)
		eventM("release", self, &onEdit)
	
		grid.init(self, "drawing_area")
		grid.x_axis.set(MIN_DB, 0, false, "dB")
		grid.y_axis.set(MIN_DB, 0, false, "dB")
	
		fill()
	
	void fill()
		grid.redraw()
		setFloat("attack", grid.config.attack * 1000)
		setFloat("release", grid.config.release * 1000)

	void onEdit()
		grid.config.attack = getFloat("attack") / 1000.0
		grid.config.release = getFloat("release") / 1000.0
		grid.c.notify()
		