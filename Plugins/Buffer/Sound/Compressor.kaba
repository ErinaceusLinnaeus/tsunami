// Image = hui:properties
// Title[Deutsch] = Kompressor

use "../../api.kaba"
use "../../grid.kaba"

const float MIN_DB = 0.0 - 60.0

class Config : PluginData
	complex curve[]
	float attack, release

	void fill_inter(FloatInterpolator fi)
		fi.setType("lerp")
		fi.add(curve[0].y, 0)
		for int i, 1, curve.num
			fi.add(curve[i].y, curve[i].x - curve[i - 1].x)

	overwrite void reset()
		curve.clear()
		curve.add(complex(MIN_DB, MIN_DB))
		curve.add(complex(0, 0))
		attack = 0.01
		release = 0.1
		//MouseOver = -1
		//Selected = -1


class Compressor : AudioEffect
	Config config

	ConfigDialog *win

	float dgain_attack, dgain_release

	void compress(float b[])
		float gain = 1
		float bmin = pow(10, MIN_DB/20)
		float squares[]
		squares.resize(70)
		for int i, 0, b.num
		
			// in level (filtered)
			squares[i%squares.num] = b[i]*b[i]
			float rms = sqrt(squares.sum() / squares.num * 2)
			float in_level = MIN_DB
			if rms > bmin
				in_level = log(rms) / log(10) * 20
		
			// out level
			float out_level = in_level
			for int j, 1, config.curve.num
				if (in_level >= config.curve[j - 1].x) and (in_level <= config.curve[j].x)
					out_level = config.curve[j - 1].y + (config.curve[j].y - config.curve[j - 1].y) * (in_level - config.curve[j - 1].x) / (config.curve[j].x - config.curve[j - 1].x)
					break
			
			// slow gain changes
			float cur_gain = out_level - in_level
			if cur_gain > gain
				gain += dgain_release
			else if cur_gain < gain
				gain -= dgain_attack
			
			// apply gain
			b[i] *= pow(10, gain / 20)

	overwrite void UpdateDialog()
		win.fill()

	overwrite void Configure()
		win = new ConfigDialog(self)
		win.Run()

	overwrite void ProcessTrack(BufferBox buf)
		AudioFile *a = audio
		
		dgain_attack = 10 / (config.attack * a.sample_rate)
		dgain_release = 10 / (config.release * a.sample_rate)
		
		compress(buf.r)
		compress(buf.l)

class CompressorGrid : Grid
	int MouseOver, Selected
	Config *config

	overwrite void onDraw(Painter *c)
		FloatInterpolator fi
		config.fill_inter(fi)
	
		// curve
		drawCurve(c, fi, true)
		for int i, 1, config.curve.num
			drawPoint2(c, config.curve[i], i == Selected, i == MouseOver)

	// left button down -> select
	overwrite void onLeftButtonDown()
		Selected = MouseOver
		redraw()

	// right button down -> new point
	overwrite void onRightButtonDown()
		complex m = getMouse2()
		for int i, 1, config.curve.num
			complex q = config.curve[i - 1]
			complex p = config.curve[i]
			if (m.x > q.x) and (m.x < p.x)
				config.curve.insert(m, i)
				Selected = i
				redraw()
				break

	overwrite void onMouseMove()
		// move
		if HuiGetEvent().button_l and (Selected > 0)
			config.curve[Selected] = getMouse2()
			float xmin = config.curve[Selected - 1].x
			float xmax = 0
			if Selected < config.curve.num - 1
				xmax = config.curve[Selected + 1].x
			config.curve[Selected].x = clamp(config.curve[Selected].x, xmin, xmax)
			if Selected == config.curve.num - 1
				config.curve[Selected].x = 0
		else
		// mouse over?
			MouseOver = -1
			for int i, 1, config.curve.num
				if mouseOverPoint2(config.curve[i])
					MouseOver = i
		redraw()

	overwrite void onKeyDown()
		int k = HuiGetEvent().key

		// [Delete] -> remove point
		if (k == KeyDelete) and (Selected > 0) and (Selected < config.curve.num - 1)
			config.curve.remove(Selected)
			Selected = -1
			redraw()

class ConfigDialog : Dialog
	CompressorGrid grid
	void __init__(Compressor *_fx)
		super.__init__("Compressor", 500, 600, MainWin, false)
		AddGrid("", 0, 0, 1, 4, "table1")
		SetTarget("table1", 0)
		AddDrawingArea("!grabfocus", 0, 1, 0, 0, "drawing_area")
		AddGrid("!noexpandy", 0, 2, 6, 1, "table2")
		SetTarget("table2", 0)
		AddText("Attack", 0, 0, 0, 0, "")
		AddSpinButton("\\1\\100\\0.1", 1, 0, 0, 0, "attack")
		AddText("ms", 2, 0, 0, 0, "")
		AddText("Release", 3, 0, 0, 0, "")
		AddSpinButton("\\1\\1000\\0.1", 4, 0, 0, 0, "release")
		AddText("ms", 5, 0, 0, 0, "")
		
		PutFavoriteBar(self, "table1", 0, 0)
		PutCommandBar(self, "table1", 0, 3)
		grid.config = &_fx.config
		
		EventM("attack", self, &OnEdit)
		EventM("release", self, &OnEdit)
	
		grid.init(self, "drawing_area")
		grid.x_axis.set(MIN_DB, 0, false, "dB")
		grid.y_axis.set(MIN_DB, 0, false, "dB")
	
		fill()
	
	void fill()
		grid.redraw()
		SetFloat("attack", grid.config.attack * 1000)
		SetFloat("release", grid.config.release * 1000)

	void OnEdit()
		grid.config.attack = GetFloat("attack") / 1000.0
		grid.config.release = GetFloat("release") / 1000.0
		