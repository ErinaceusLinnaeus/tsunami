// Image = hui:properties
// Title[Deutsch] = Band Pass Filter
use "../../api.kaba"

const string AutoConfigFrequency = "0:5000:0.1:1:Hz"

class Config : PluginData
	float Frequency
	overwrite void reset()
		Frequency = 1000

class State : PluginData
	float in_r, in_l, out_r, out_l
	bool used
	overwrite void reset()
		used = false

class LowPassFilter : AudioEffect
	Config config
	State state

	overwrite void process(BufferBox buf)
		float RC = 1 / (2 * pi * config.Frequency)
		float dt = 1.0 / audio.sample_rate
		float aa = dt / (RC + dt)
		float bb = 1 - aa
		float prev_in_r = 0
		float prev_in_l = 0
		if state.used
			float tr = buf.r[0]
			float tl = buf.l[0]
			buf.r[0] = bb * (buf.r[0] + state.out_r - state.in_r)
			buf.l[0] = bb * (buf.l[0] + state.out_l - state.in_l)
			prev_in_r = tr
			prev_in_l = tl
			//buf.r[0] = aa * buf.r[0] + bb * state.out_r
			//buf.l[0] = aa * buf.l[0] + bb * state.out_l
		
		// y[i] := b * (y[i-1] + x[i] - x[i-1])
		// z[i] := Î± * y[i] + b * z[i-1]
	
		for int i, 1, buf.num
			tr = buf.r[i]
			tl = buf.l[i]
			buf.r[i] = bb * (buf.r[i] + buf.r[i-1] - prev_in_r)
			buf.l[i] = bb * (buf.l[i] + buf.l[i-1] - prev_in_l)
			prev_in_r = tr
			prev_in_l = tl
			//buf.r[i] = aa * buf.r[i] + bb * buf.r[i-1]
			//buf.l[i] = aa * buf.l[i] + bb * buf.l[i-1]
		
		state.used = true
		state.in_r = prev_in_r
		state.in_l = prev_in_l
		state.out_r = buf.r[buf.num - 1]
		state.out_l = buf.l[buf.num - 1]
