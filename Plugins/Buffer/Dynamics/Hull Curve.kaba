// Image = hui:zoom-in
// Title[Deutsch] = HÃ¼llkurve

use "../../api.kaba"
use "../../grid.kaba"



const int MIN_VOL = 0-55
const int MAX_VOL = 35

class PluginData
	complex curve[]

PluginData data


ConfigDialog *dlg
int MouseOver, Selected

GridData grid

void fill_inter(FloatInterpolator fi)
	fi.setType("cubic-spline-notang")
	fi.add(data.curve[0].y, 0)
	for int i, 1, data.curve.num
		fi.add(data.curve[i].y, data.curve[i].x - data.curve[i - 1].x)


void hull(float b[])
	
	FloatInterpolator fi
	fill_inter(fi)
	
	// hull curve
	for int i, 1, b.num
		float param = i2f(i) / b.num
		float db = fi.get(param)
		b[i] = b[i] * pow(10, db / 20)

void ProcessTrack(BufferBox buf)
	hull(buf.r)
	hull(buf.l)

void ResetData()
	data.curve.clear()
	data.curve.add(complex(0, 0))
	data.curve.add(complex(1, 0))
	MouseOver = -1
	Selected = -1

void DataToDialog()
	dlg.Redraw("drawing")

class ConfigDialog : Dialog
	void __init__()
		super.__init__("Hull Curve", 600, 420, MainWin, false)
		AddGrid("", 0, 0, 1, 4, "table")
		SetTarget("table", 0)
		AddDrawingArea("", 0, 1, 0, 0, "drawing")
		AddGrid("!noexpandy", 0, 2, 2, 1, "table2")
		SetTarget("table2", 0)
		AddComboBox("linear\\log", 0, 0, 0, 0, "type")
		AddCheckBox("show buffer", 1, 0, 0, 0, "preview")
	
		//EventMX("drawing", "hui:draw", self, &OnDraw)

		PutFavoriteBar(self, "table", 0, 0)
		PutCommandBar(self, "table", 0, 3)
	
		grid.x_axis.set(0, 1, false, "")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
	
		Redraw("drawing")

	overwrite void OnDraw()
		Painter *c = BeginDraw("drawing")
		float w = c.width
		float h = c.height
	
		grid.Draw(c, 0, 0, w, h)
	
		// curve + area below
		FloatInterpolator fi
		fill_inter(fi)
		grid.DrawCurve(c, fi, true)
	
		// points
		for int i, 0, data.curve.num
			grid.DrawPoint2(c, data.curve[i], i == Selected, i == MouseOver)
		c.End()

	// left button down -> select
	overwrite void OnLeftButtonDown()
		Selected = MouseOver
		Redraw("drawing")

	// left button up -> if moved to a neighbour -> remove point
	overwrite void OnLeftButtonUp()
		if Selected >= 0
			bool del = (data.curve[Selected] == data.curve[Selected - 1])
			if Selected < data.curve.num - 1
				del = del or (data.curve[Selected] == data.curve[Selected + 1])
			if del
				data.curve.remove(Selected)
				Selected = -1
				Redraw("drawing")

	// right button down -> new point
	overwrite void OnRightButtonDown()
		int mx = HuiGetEvent().mouse_x
		int my = HuiGetEvent().mouse_y
		for int i, 1, data.curve.num
			complex q = grid.project2(data.curve[i - 1])
			complex p = grid.project2(data.curve[i])
			if (mx > q.x) and (mx < p.x)
				data.curve.insert(grid.unproject2(complex(mx, my)), i)
				Selected = i
				Redraw("drawing")
				i = data.curve.num
				break

	overwrite void OnMouseMove()
		int mx = HuiGetEvent().mouse_x
		int my = HuiGetEvent().mouse_y
		// move
		if HuiGetEvent().button_l and (Selected >= 0)
			data.curve[Selected] = grid.unproject2(complex(mx, my))
			float xmin = 0
			float xmax = 1
			if Selected > 0
				xmin = data.curve[Selected - 1].x
			if Selected < data.curve.num - 1
				xmax = data.curve[Selected + 1].x
			data.curve[Selected].x = clamp(data.curve[Selected].x, xmin, xmax)
			data.curve[Selected].y = clamp(data.curve[Selected].y, MIN_VOL, MAX_VOL)
			if Selected == data.curve.num - 1
				data.curve[Selected].x = 1
			if Selected == 0
				data.curve[Selected].x = 0
		else
		// mouse over?
			MouseOver = -1
			for int i, 0, data.curve.num
				complex p = grid.project2(data.curve[i])
				if (mx > p.x - 5) and (mx < p.x + 5) and (my > p.y - 5) and (my < p.y + 5)
					MouseOver = i
		Redraw("drawing")

void Configure()
	dlg = new ConfigDialog
	dlg.Run()

