// Image = hui:zoom-in
// Title[Deutsch] = HÃ¼llkurve

use "../../api.kaba"
use "../../grid.kaba"



const int MIN_VOL = 0-55
const int MAX_VOL = 35

class Config : PluginData
	complex curve[]

	void fill_inter(FloatInterpolator fi)
		fi.setType("cubic-spline-notang")
		fi.add(curve[0].y, 0)
		for int i, 1, curve.num
			fi.add(curve[i].y, curve[i].x - curve[i - 1].x)
		fi.normalize()

	overwrite void reset()
		curve.clear()
		curve.add(complex(0, 0))
		curve.add(complex(1, 0))
		//MouseOver = -1
		//Selected = -1


class HullCurve : AudioEffect

	Config config
	ConfigDialog *dlg


	void hull(float b[])
	
		FloatInterpolator fi
		config.fill_inter(fi)
	
		// hull curve
		for int i, 1, b.num
			float param = i2f(i) / b.num
			float db = fi.get(param)
			b[i] = b[i] * pow(10, db / 20)

	overwrite void processTrack(BufferBox buf)
		hull(buf.r)
		hull(buf.l)

	overwrite void updateDialog()
		dlg.redraw("drawing")

	overwrite void configure()
		dlg = new ConfigDialog(self)
		dlg.run()

class HullGrid : Grid
	Config *config
	int MouseOver, Selected

	overwrite void onDraw(Painter *c)
	
		// curve + area below
		FloatInterpolator fi
		config.fill_inter(fi)
		drawCurve(c, fi, true)
	
		// points
		for int i, 0, config.curve.num
			drawPoint2(c, config.curve[i], i == Selected, i == MouseOver)

	// left button down -> select
	overwrite void onLeftButtonDown()
		Selected = MouseOver
		redraw()

	// [Delete] -> remove point
	overwrite void onKeyDown()
		if HuiGetEvent().key_code == KeyDelete
			if Selected > 0 and Selected < config.curve.num-1
				config.curve.remove(Selected)
				Selected = -1
				redraw()

	// right button down -> new point
	overwrite void onRightButtonDown()
		for int i, 1, config.curve.num
			complex q = project2(config.curve[i - 1])
			complex p = project2(config.curve[i])
			if (mx > q.x) and (mx < p.x)
				config.curve.insert(getMouse2(), i)
				Selected = i
				redraw()
				i = config.curve.num
				break

	overwrite void onMouseMove()
		// move
		if HuiGetEvent().button_l and (Selected >= 0)
			config.curve[Selected] = getMouse2()
			float xmin = 0
			float xmax = 1
			if Selected > 0
				xmin = config.curve[Selected - 1].x
			if Selected < config.curve.num - 1
				xmax = config.curve[Selected + 1].x
			config.curve[Selected].x = clamp(config.curve[Selected].x, xmin, xmax)
			config.curve[Selected].y = clamp(config.curve[Selected].y, MIN_VOL, MAX_VOL)
			if Selected == config.curve.num - 1
				config.curve[Selected].x = 1
			if Selected == 0
				config.curve[Selected].x = 0
		else
		// mouse over?
			MouseOver = -1
			for int i, 0, config.curve.num
				complex p = project2(config.curve[i])
				if (mx > p.x - 5) and (mx < p.x + 5) and (my > p.y - 5) and (my < p.y + 5)
					MouseOver = i
		redraw()

class ConfigDialog : Dialog
	HullGrid grid
	void __init__(HullCurve *_h)
		super.__init__("Hull Curve", 600, 420, MainWin, false)
		addGrid("", 0, 0, 1, 4, "table")
		setTarget("table", 0)
		addDrawingArea("!grabfocus", 0, 1, 0, 0, "drawing")
		addGrid("!noexpandy", 0, 2, 2, 1, "table2")
		setTarget("table2", 0)
		addComboBox("linear\\log", 0, 0, 0, 0, "type")
		addCheckBox("show buffer", 1, 0, 0, 0, "preview")
	
		//EventMX("drawing", "hui:draw", self, &OnDraw)

		PutFavoriteBar(self, "table", 0, 0)
		PutCommandBar(self, "table", 0, 3)
	
		grid.config = &_h.config
		grid.init(self, "drawing")
		grid.x_axis.set(0, 1, false, "")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
	
		grid.redraw()

