use tsunami

const AUTO_CONFIG_BPM = "1:360:1:1:/min"
const AUTO_CONFIG_BEATS = ""
const AUTO_CONFIG_SUB_BEATS = "1:20"

class Config extends Module.Config
	
	# rhythm
	var bpm: float
	var beats: string
	var sub_beats: int
	
	func override reset()
		bpm = 90
		beats = "x--x--x-x-"
		sub_beats = 1

class MetronomeSource extends BeatSource
	var config: Config
	
	# state/output
	var next_beat: int
	var next_sub_beat: int

	var offset_sub_beat: int
	var fraction_beat: float
	var samples_beat: int
	var samples_sub_beat: int
	

	func override reset_state()

		offset_sub_beat = 0
		next_beat = 0
		next_sub_beat = 0
		fraction_beat = 1
		
		on_config()
		
	func override read(out beats: Beat[], samples: int) -> int
	
		# render clicks
		while offset_sub_beat < samples
			
			# render
			int level = 2
			if next_sub_beat == 0
				if config.beats[next_beat] == 'x'
					level = 0
				else
					level = 1
			beats.add(Beat(offset_sub_beat, level))
			
			if next_sub_beat == 0
				next_beat ++
				if next_beat >= len(config.beats)
					next_beat = 0
			next_sub_beat ++
			if next_sub_beat >= config.sub_beats
				next_sub_beat = 0

			offset_sub_beat += samples_sub_beat
		offset_sub_beat -= samples
		float fraction_sub_beat = 1 - float(offset_sub_beat) / float(samples_sub_beat)
		fraction_beat = (float(cur_sub_beat()) + fraction_sub_beat) / float(config.sub_beats)
		
		return samples
	
	func override beats_per_bar() -> int
		return len(config.beats)
	
	func override cur_beat() -> int
		if next_beat == 0
			return len(config.beats) - 1
		return next_beat - 1
	
	func override beat_fraction() -> float
		return fraction_beat

	func cur_sub_beat() -> int
		if next_sub_beat == 0
			return config.sub_beats - 1
		return next_sub_beat - 1
	
	func set_bpm(bpm: float)
		config.bpm = bpm
		changed()
	
	func set_beats(beats: string, sub_beats: int)
		config.beats = beats
		config.sub_beats = sub_beats
		changed()
	
	func override on_config()
		float sample_rate = session.sample_rate()
		float dt_b = 60.0 / config.bpm
		float dt_s = dt_b / config.sub_beats
		samples_beat = dt_b * sample_rate
		samples_sub_beat = dt_s * sample_rate
		
		#if cur_beat >
		
		int _cur_sub_beat = config.sub_beats * fraction_beat
		next_sub_beat = _cur_sub_beat + 1
		if next_sub_beat >= config.sub_beats
			next_sub_beat = 0
		offset_sub_beat = (1 + _cur_sub_beat - fraction_beat * config.sub_beats) * samples_sub_beat
