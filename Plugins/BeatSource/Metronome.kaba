use tsunami

const string AUTO_CONFIG_BPM = "1:360:1:1:/min"
const string AUTO_CONFIG_BEATS = "1:20"
const string AUTO_CONFIG_SUB_BEATS = "1:20"

class Config extends Module.Config
	
	# rhythm
	float bpm
	int beats
	int sub_beats
	
	override void reset()
		bpm = 90
		beats = 4
		sub_beats = 1

class MetronomeSource extends BeatSource
	Config config
	
	# state/output
	int next_beat
	int next_sub_beat

	int offset_sub_beat
	float fraction_beat
	int samples_beat
	int samples_sub_beat
	
	override void __init__()
		print("MetronomeSource.init...")
	

	override void reset_state()

		offset_sub_beat = 0
		next_beat = 0
		next_sub_beat = 0
		fraction_beat = 1
		
		on_config()
		
	override int read(out Beat[] beats, int samples)
	
		# render clicks
		while offset_sub_beat < samples
			
			# render
			int level = 2
			if next_sub_beat == 0
				if next_beat == 0
					level = 0
				else
					level = 1
			beats.add(Beat(offset_sub_beat, level))
			
			if next_sub_beat == 0
				next_beat ++
				if next_beat >= config.beats
					next_beat = 0
			next_sub_beat ++
			if next_sub_beat >= config.sub_beats
				next_sub_beat = 0

			offset_sub_beat += samples_sub_beat
		offset_sub_beat -= samples
		float fraction_sub_beat = 1 - float(offset_sub_beat) / float(samples_sub_beat)
		fraction_beat = (float(cur_sub_beat()) + fraction_sub_beat) / float(config.sub_beats)
		
		return samples
	
	override int beats_per_bar()
		return config.beats
	
	override int cur_beat()
		if next_beat == 0
			return config.beats - 1
		return next_beat - 1
	
	override float beat_fraction()
		return fraction_beat

	int cur_sub_beat()
		if next_sub_beat == 0
			return config.sub_beats - 1
		return next_sub_beat - 1
	
	void set_bpm(float bpm)
		config.bpm = bpm
		changed()
	
	void set_beats(int beats, int sub_beats)
		config.beats = beats
		config.sub_beats = sub_beats
		changed()
	
	override void on_config()
		float sample_rate = session.sample_rate()
		float dt_b = 60.0 / config.bpm
		float dt_s = dt_b / config.sub_beats
		samples_beat = dt_b * sample_rate
		samples_sub_beat = dt_s * sample_rate
		
		#if cur_beat >
		
		int _cur_sub_beat = config.sub_beats * fraction_beat
		next_sub_beat = _cur_sub_beat + 1
		if next_sub_beat >= config.sub_beats
			next_sub_beat = 0
		offset_sub_beat = (1 + _cur_sub_beat - fraction_beat * config.sub_beats) * samples_sub_beat
