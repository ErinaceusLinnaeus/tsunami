use tsunami

const AUTO_CONFIG_VOLUME = "0:1:0.1:100:%"
const AUTO_CONFIG_BPM = "1:360:1:1:/min"
const AUTO_CONFIG_BEATS = "1:20"
const AUTO_CONFIG_SUB_BEATS = "1:20"

class Config extends Module.Config
	
	# sound
	var volume: float
	
	# rhythm
	var bpm: float
	var beats: int
	var sub_beats: int
	
	func override reset()
		volume = 1
		bpm = 90
		beats = 4
		sub_beats = 1

class MetronomeSource extends MidiSource
	var config: Config
	
	var pause: bool
	
	# state/output
	var cur_beat: int
	var cur_sub_beat: int

	var offset_sub_beat: int
	var fraction_beat: float
	#float fraction_sub_beat
	var samples_beat: int
	var samples_sub_beat: int
	

	func override reset_state()
		offset_sub_beat = 0
		cur_beat = 0
		cur_sub_beat = -1
		fraction_beat = 0
#		fraction_sub_beat = 0

		pause = false
		
		on_config()
		
	func override read(out midi: MidiEventBuffer) -> int
		if pause
			return midi.samples
	
		# render clicks
		while offset_sub_beat < midi.samples
			cur_sub_beat ++
			if cur_sub_beat >= config.sub_beats
				cur_sub_beat = 0
				cur_beat ++
			if cur_beat >= config.beats
				cur_beat = 0
			
			# render
			if cur_sub_beat == 0
				if cur_beat == 0
					midi.add_metronome_click(offset_sub_beat, 0, config.volume)
				else
					midi.add_metronome_click(offset_sub_beat, 1, config.volume)
			else
				midi.add_metronome_click(offset_sub_beat, 2, config.volume)

			offset_sub_beat += samples_sub_beat
		offset_sub_beat -= midi.samples
		let fraction_sub_beat = 1 - float(offset_sub_beat) / float(samples_sub_beat)
		fraction_beat = (float(cur_sub_beat) + fraction_sub_beat) / float(config.sub_beats)
		
		return midi.samples
	
	func mut set_bpm(bpm: float)
		config.bpm = bpm
		changed()
	
	func mut set_beats(beats: int, sub_beats: int)
		config.beats = beats
		config.sub_beats = sub_beats
		changed()
	
	func mut set_pause(_pause: bool)
		pause = _pause
		changed()
	
	func override on_config()
		let sample_rate = session.sample_rate()
		let dt_b = 60.0 / config.bpm
		let dt_s = dt_b / config.sub_beats
		samples_beat = int(dt_b * sample_rate)
		samples_sub_beat = int(dt_s * sample_rate)
		
		#if cur_beat >
		
		cur_sub_beat = int(config.sub_beats * fraction_beat)
		offset_sub_beat = int((1 + cur_sub_beat - fraction_beat * config.sub_beats) * samples_sub_beat)



