use "../api.kaba"

const string AUTO_CONFIG_VOLUME = "0:1:0.1:100:%"
const string AUTO_CONFIG_BPM = "1:360:1:1:/min"
const string AUTO_CONFIG_BEATS = "1:20"
const string AUTO_CONFIG_SUB_BEATS = "1:20"

class Config extends PluginData
	
	// sound
	float volume
	
	// rhythm
	float bpm
	int beats
	int sub_beats
	
	override void reset()
		volume = 1
		bpm = 90
		beats = 4
		sub_beats = 1

class MetronomeSource extends MidiSource
	Config config
	
	bool pause
	
	// state/output
	int cur_beat
	int cur_sub_beat

	int offset_sub_beat
	float fraction_beat
	//float fraction_sub_beat
	int samples_beat
	int samples_sub_beat
	
	
	float sample_rate
	Window* win
	
	override void __init__()
		win = nil
		sample_rate = session.sample_rate()

		offset_sub_beat = 0
		cur_beat = 0
		cur_sub_beat = -1
		fraction_beat = 0
//		fraction_sub_beat = 0
		
		pause = false
		
		on_config()
		
	override int read(MidiEventBuffer midi)
		if pause
			return midi.samples
	
		// render clicks
		while offset_sub_beat < midi.samples
			cur_sub_beat ++
			if cur_sub_beat >= config.sub_beats
				cur_sub_beat = 0
				cur_beat ++
			if cur_beat >= config.beats
				cur_beat = 0
			
			// render
			if cur_sub_beat == 0
				if cur_beat == 0
					midi.addMetronomeClick(offset_sub_beat, 0, config.volume)
				else
					midi.addMetronomeClick(offset_sub_beat, 1, config.volume)
			else
				midi.addMetronomeClick(offset_sub_beat, 2, config.volume)

			offset_sub_beat += samples_sub_beat
		offset_sub_beat -= midi.samples
		float fraction_sub_beat = 1 - i2f(offset_sub_beat) / i2f(samples_sub_beat)
		fraction_beat = (i2f(cur_sub_beat) + fraction_sub_beat) / i2f(config.sub_beats)
		
		if win
			win.redraw("area")
		return midi.samples
	
	void setBpm(float bpm)
		config.bpm = bpm
		changed()
	
	void setBeats(int beats, int sub_beats)
		config.beats = beats
		config.sub_beats = sub_beats
		changed()
	
	void setPause(bool _pause)
		pause = _pause
		changed()
	
	override void on_config()
		float dt_b = 60.0 / config.bpm
		float dt_s = dt_b / config.sub_beats
		samples_beat = dt_b * sample_rate
		samples_sub_beat = dt_s * sample_rate
		
		//if cur_beat >
		
		cur_sub_beat = config.sub_beats * fraction_beat
		offset_sub_beat = (1 + cur_sub_beat - fraction_beat * config.sub_beats) * samples_sub_beat



