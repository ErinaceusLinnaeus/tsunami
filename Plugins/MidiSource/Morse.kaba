use tsunami

const AUTO_CONFIG_PITCH = "0:127:1:1:"
const AUTO_CONFIG_TEXT = ""
const AUTO_CONFIG_BEAT_PARTITION = "1:8"

func append(out a: int[], b: int[])
	for x in b
		a.add(x)

func morse(s: string) -> int[]
	var l: int[]
	for c in s
		if c == 'a'
			append(l, [1, 2])
		if c == 'b'
			append(l, [2, 1, 1, 1])
		if c == 'c'
			append(l, [2,1,2,1])
		if c == 'd'
			append(l, [2,1,1])
		if c == 'e'
			append(l, [1])
		if c == 'f'
			append(l, [1,1,2,1])
		if c == 'g'
			append(l, [2,2,1])
		if c == 'h'
			append(l, [1,1,1,1])
		if c == 'i'
			append(l, [1,1])
		if c == 'j'
			append(l, [1,2,2,2])
		if c == 'k'
			append(l, [2,1,2])
		if c == 'l'
			append(l, [1,2,1,1])
		if c == 'm'
			append(l, [2,2])
		if c == 'n'
			append(l, [2,1])
		if c == 'o'
			append(l, [2,2,2])
		if c == 'p'
			append(l, [1,2,2,1])
		if c == 'q'
			append(l, [2,2,1,2])
		if c == 'r'
			append(l, [1,2,1])
		if c == 's'
			append(l, [1,1,1])
		if c == 't'
			append(l, [2])
		if c == 'u'
			append(l, [1,1,2])
		if c == 'v'
			append(l, [1,1,1,2])
		if c == 'w'
			append(l, [1,2,2])
		if c == 'x'
			append(l, [2,1,1,2])
		if c == 'y'
			append(l, [2,1,2,2])
		if c == 'z'
			append(l, [2,2,1,1])
	return l


class Config extends Module.Config
	var pitch: float
	var text: string
	var beat_partition: int
	
	func override reset()
		pitch = 60
		text = "test"
		beat_partition = 2

class Morse extends MidiSource
	var config: Config
	var pos: int
	
	func override reset_state()
		pos = 0
	
	func override on_produce(out data: MidiProduceData) -> bool
		if pos >= len(config.text)
			return false
		var c = config.text[pos:pos+1]
		var l = morse(c)
		for ll in l
			note_x(config.pitch, 1.0, 0, ll, config.beat_partition)
			skip_x(0, ll+1, config.beat_partition)
		pos ++
		return true
