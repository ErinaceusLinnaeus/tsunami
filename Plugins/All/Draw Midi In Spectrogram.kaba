// Image = hui:find
// Title[Deutsch] = Midi in Spektrum malen
use hui
use "../api.kaba"
use "../helper/grid.kaba"
use "../helper/tone.kaba"

//#show
//#disasm

const int N = 4096*2 // fft size
const int NT = 512 // time bins
const int NF = 512*2 // freq bins
const float MIN_FREQ = 60.0
const float MAX_FREQ = 3000.0
const float MIN_VOL = 0.0 - 60.0
const float MAX_VOL = 0.0

float[NF][NT] sg
Image im0

class SpecGrid extends Grid
	DrawMidiInSpectrogram *plugin
	float x_offset, x_scale
	int x_to_sample(float x)
		return x_scale * x
	float sample_to_x(int s)
		return s / x_scale
	int create_pitch
	float create_x
	override void on_draw(Painter *c)
		rect r = plot_rect
		int w = r.width()
		int h = r.height()
		
		float fy = im0.height / r.height()
		float ya = (log(y_axis.val_max) - log(y_axis.val_min)) / (log(y_axis.val_max_max) - log(y_axis.val_min_min)) * fy
		float yb = (log(y_axis.val_max_max) - log(y_axis.val_max)) / (log(y_axis.val_max_max) - log(y_axis.val_min_min)) * im0.height
		float fx = im0.width / r.width()
		float xa = (x_axis.val_max - x_axis.val_min) / (x_axis.val_max_max - x_axis.val_min_min) * fx
		float xb = (x_axis.val_min - x_axis.val_min_min) / (x_axis.val_max_max - x_axis.val_min_min) * im0.width
		
		Image im
		im.create(w, h, Black)
		for x in 0:w
			for y in 0:h
				im.set_pixel(x, y, im0.get_pixel(x * xa + xb, y * ya + yb))
		c.draw_image(r.x1, r.y1, im)
	
		/*Image *im = im0.scale(r.width(), r.height())
		c.DrawImage(r.x1, r.y1, *im)
		delete(im)*/
		
		c.set_line_width(3)
		complex z = get_mouse2()
		int mouse_pitch = freq_to_pitch(z.y+0.5)
		for n in plugin.midi
			float y = pitch_to_freq(n.pitch)
			draw_line2(c, complex(sample_to_x(n.range.offset), y), complex(sample_to_x(n.range.end()), y), false, false)
		if create_pitch >= 0
			float y = pitch_to_freq(create_pitch)
			draw_line2(c, complex(create_x, y), complex(z.x, y), false, true)
			mouse_pitch = create_pitch
		else
			float y = pitch_to_freq(mouse_pitch)
			draw_point2(c, complex(z.x, y), false, false)
		
		c.set_color(colors.text)
		c.draw_str(120, 20, pitch_name(mouse_pitch))
		c.set_line_width(1)
		
			
			
			
	
	override void on_left_button_down()
		complex z = get_mouse2()
		create_x = z.x
		create_pitch = freq_to_pitch(z.y+0.5)
		redraw()
	override void on_left_button_up()
		complex z = get_mouse2()
		plugin.midi.add(new MidiNote(RangeTo(x_to_sample(create_x), x_to_sample(z.x)), create_pitch, 1.0))
		create_pitch = -1
		redraw()
	override void on_mouse_move()
		redraw()
		

class SpectrumDialog extends Dialog
	SpecGrid grid
	Song* song
	Track*[] tracks
	DrawMidiInSpectrogram* dmis
	void __init__(SongPlugin* plugin, Song* song)
		super.__init__("Spectrum", 600, 460, plugin.session.win, true)
		from_source("
Grid ? ''
	DrawingArea drawing_area ''
	---|
	Grid ? '' buttonbar
		ComboBox target ''
		Button export 'Export' image=hui:save
		DefButton close 'Close' image=hui:close")
		
		AudioView* view = plugin.session.view
		
		grid.init(self, "drawing_area")
		grid.x_axis.set(view.sel.range().offset / i2f(song.sample_rate), view.sel.range().end() / i2f(song.sample_rate), false, "s")
		grid.y_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		//grid.allow_bg = false
		grid.plugin = plugin
		grid.create_pitch = -1
		grid.x_offset = view.sel.range().offset
		grid.x_scale = song.sample_rate
		
		dmis = plugin
		song = plugin.session.song
		for t in song.tracks
			if t.type == TYPE_MIDI
				tracks.add(t)
				set_string("target", t.nice_name())
		set_int("target", 0)
	
		event("close", &on_close)
		event("export", &on_export)

	void on_close()
		destroy()
		
	void on_export()
		int n = get_int("target")
		if n < 0
			return
		Track* t = tracks[n]
		t.layers[0].insert_midi_data(0, dmis.midi)
		
		destroy()

color f2col(float f)
	f = sqrt(f)
	if f < 0.333
		return color(f * 3, 0, 0, f * 3)
	else if f < 0.6666
		return color(1, f * 3 - 1, 0, 2 - f * 3)
	return color(1, 1, f * 3 - 2, 0)

class DrawMidiInSpectrogram extends SongPlugin

	SpectrumDialog *dlg
	MidiNoteBuffer midi

	void show_spec(Song *song)
		dlg = new SpectrumDialog(self, song)
	
		AudioBuffer buf
		SongRenderer* renderer = new SongRenderer(song)
		renderer.render(session.view.sel.range(), buf)
		delete renderer
	
		complex[] f
		float[] sub
		sub.resize(N)
	
		float _max = 0
	
		float log_max_min = log(MAX_FREQ / MIN_FREQ)
	
		for t in 0:NT
			// time slice
			int offset = (buf.length - N) * t / NT
		
			for j in 0:N
				sub[j] = buf.r[offset + j]
			fft_r2c(sub, f)
			float ww = i2f(N) / song.sample_rate
			for i in 0:NF
				// frequency slice
				float fmin = MIN_FREQ * exp( log_max_min / (NF - 1) * i)
				float fmax = MIN_FREQ * exp( log_max_min / (NF - 1) * (i + 1))
				int j0 = fmin * ww
				int j1 = fmax * ww + 1
				j0 = clamp(j0, 0, f.num)
				j1 = clamp(j1, 0, f.num)
				
				// find maximum amplitude in that frequency interval
				float bmaxr = 0
				for j in j0:j1
					float amp = f[j].x * f[j].x + f[j].y * f[j].y
					if bmaxr < amp
						bmaxr = amp
				_max = max(_max, bmaxr)
				sg[t][i] = bmaxr
	
		im0.create(NT, NF, Black)
		for t in 0:NT
			for i in 0:NF
				float ff = sg[t][i] / _max
				im0.set_pixel(t, NF - i - 1, f2col(ff))
	

		dlg.redraw("drawing_area")

		dlg.run()
		delete dlg

	override void apply()
	
		if session.view.sel.range().length > 0
			show_spec(song)
		else
			session.e("'Draw Midi In Spectrogram.kaba': Needs some selection!")
