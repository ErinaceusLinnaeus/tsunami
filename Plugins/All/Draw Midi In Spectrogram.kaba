# Image = hui:find
# Title[Deutsch] = Midi in Spektrum malen
use hui
use image
use tsunami
use helper.grid
use helper.tone

##show
##disasm

const N = 4096*2 # fft size
const NT = 512 # time bins
const NF = 512*2 # freq bins
const MIN_FREQ = 60.0
const MAX_FREQ = 3000.0
const MIN_VOL = -60.0
const MAX_VOL = 0.0

var im0: Image

class SpecGrid extends Grid
	var plugin: DrawMidiInSpectrogram*
	var x_offset, x_scale: float
	func x_to_sample(x: float) -> int
		return x_scale * x
	func sample_to_x(s: int) -> float
		return s / x_scale
	var create_pitch: int
	var create_x: float
	func override on_draw(c: Painter)
		rect r = plot_area
		int w = r.width()
		int h = r.height()
		
		float fy = im0.height / r.height()
		float ya = (log(y_axis.val_max) - log(y_axis.val_min)) / (log(y_axis.val_max_max) - log(y_axis.val_min_min)) * fy
		float yb = (log(y_axis.val_max_max) - log(y_axis.val_max)) / (log(y_axis.val_max_max) - log(y_axis.val_min_min)) * im0.height
		float fx = im0.width / r.width()
		float xa = (x_axis.val_max - x_axis.val_min) / (x_axis.val_max_max - x_axis.val_min_min) * fx
		float xb = (x_axis.val_min - x_axis.val_min_min) / (x_axis.val_max_max - x_axis.val_min_min) * im0.width
		
		Image im
		im.create(w, h, color.BLACK)
		for x in 0:w
			for y in 0:h
				im.set_pixel(x, y, im0.get_pixel(x * xa + xb, y * ya + yb))
		c.draw_image([r.x1, r.y1], im)
	
		#Image *im = im0.scale(r.width(), r.height())
#		c.DrawImage(r.x1, r.y1, *im)
#		delete(im)
		
		c.set_line_width(3)
		var z = get_mouse2()
		int mouse_pitch = freq_to_pitch(z.y+0.5)
		for n in plugin.midi
			float y = pitch_to_freq(n.pitch)
			draw_line2(c, vec2(sample_to_x(n.range.offset), y), vec2(sample_to_x(n.range.end()), y), false, false)
		if create_pitch >= 0
			float y = pitch_to_freq(create_pitch)
			draw_line2(c, vec2(create_x, y), vec2(z.x, y), false, true)
			mouse_pitch = create_pitch
		else
			float y = pitch_to_freq(mouse_pitch)
			draw_point2(c, vec2(z.x, y), false, false)
		
		c.set_color(colors.text)
		c.draw_str([120, 20], pitch_name(mouse_pitch))
		c.set_line_width(1)
		
			
			
			
	
	func override on_left_button_down()
		var z = get_mouse2()
		create_x = z.x
		create_pitch = freq_to_pitch(z.y+0.5)
		redraw()
	func override on_left_button_up()
		var z = get_mouse2()
		plugin.midi.add(new MidiNote(RangeTo(x_to_sample(create_x), x_to_sample(z.x)), create_pitch, 1.0))
		create_pitch = -1
		redraw()
	func override on_mouse_move()
		redraw()
		

class SpectrumDialog extends Dialog
	var grid: SpecGrid
	var song: Song*
	var tracks: shared Track[]
	var dmis: DrawMidiInSpectrogram*
	func __init__(plugin: SongPlugin, _song: Song)
		super.__init__("Spectrum", 600, 460, plugin.session.win, true)
		set_options("", "headerbar,resizable,closebutton=no")
		from_source("
Grid ? ''
	DrawingArea drawing_area ''
	---|
	Grid ? '' buttonbar
		ComboBox target ''
		---|
		Button close 'Close' image=hui:close default
		Button export 'Export' image=hui:save")
		
		var view = plugin.session.view
		dmis = &plugin
		song = plugin.session.song
		
		grid.init(self, "drawing_area")
		grid.x_axis.set(view.sel.range().offset / float(song.sample_rate), view.sel.range().end() / float(song.sample_rate), false, "s")
		grid.y_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		#grid.allow_bg = false
		grid.plugin = &plugin
		grid.create_pitch = -1
		grid.x_offset = view.sel.range().offset
		grid.x_scale = song.sample_rate
		
		for t in song.tracks
			if t.type == SignalType.MIDI
				tracks.add(t)
				set_string("target", t.nice_name())
		set_int("target", 0)
	
		event("close", on_close)
		event("export", on_export)
	func override __delete__()

	func on_close()
		destroy()
		
	func on_export()
		int n = get_int("target")
		if n < 0
			return
		var t = tracks[n]
		t.layers[0].insert_midi_data(0, dmis.midi)
		
		destroy()

func f2col(_f: float) -> color
	var f = sqrt(_f)
	if f < 0.333
		return color(0, 0, f * 3, f*0.3)
	else if f < 0.6666
		return color(f * 3 - 1, 0, 2 - f * 3, 1)
	return color(1, f * 3 - 2, 0, 1)

class DrawMidiInSpectrogram extends SongPlugin

	var dlg: SpectrumDialog*
	var midi: MidiNoteBuffer
	var sg: float[NF][NT]

	func show_spec(song: Song)
		dlg = new SpectrumDialog(self, song)
	
		AudioBuffer buf
		var renderer = new SongRenderer(song)
		renderer.render(session.view.sel.range(), buf)
		del renderer
	
		complex[] f
		float[] sub
		sub.resize(N)
	
		float _max = 0
	
		float log_max_min = log(MAX_FREQ / MIN_FREQ)
	
		for t in 0:NT
			# time slice
			int offset = (buf.length - N) * t / NT
		
			for j in 0:N
				sub[j] = buf.c[0][offset + j]
			fft_r2c(sub, f)
			float ww = float(N) / song.sample_rate
			for i in 0:NF
				# frequency slice
				float fmin = MIN_FREQ * exp( log_max_min / (NF - 1) * i)
				float fmax = MIN_FREQ * exp( log_max_min / (NF - 1) * (i + 1))
				int j0 = fmin * ww
				int j1 = fmax * ww + 1
				j0 = clamp(j0, 0, len(f))
				j1 = clamp(j1, 0, len(f))
				
				# find maximum amplitude in that frequency interval
				float bmaxr = 0
				for j in j0:j1
					float amp = f[j].x * f[j].x + f[j].y * f[j].y
					if bmaxr < amp
						bmaxr = amp
				_max = max(_max, bmaxr)
				sg[t][i] = bmaxr
	
		im0.create(NT, NF, color.BLACK)
		for t in 0:NT
			for i in 0:NF
				float ff = sg[t][i] / _max
				im0.set_pixel(t, NF - i - 1, f2col(ff))
	

		dlg.redraw("drawing_area")

		hui.fly(dlg, nil)

	func override apply()
	
		if session.view.sel.range().length > 0
			show_spec(song)
		else
			session.e("'Draw Midi In Spectrogram.kaba': Needs some selection!")
