use tsunami
use Synthesizer.Sample
use AudioEffect.Pitch.PitchShift
use hui

func get_instruments(p: any, i: any) -> int
	int ins = 0
	for z in p["zones"].as_array()
		if z.has("instrument")
			ins ++
			#keys += int(z["keys"][1]) - int(z["keys"][0]) + 1
	return ins

func get_samples(p: any, i: any) -> int
	int samples = 0
	for z in p["zones"].as_array()
		if z.has("instrument")
			var ii = i[int(z["instrument"])]
			for zz in ii["zones"].as_array()
				if zz.has("sample")
					samples ++
	return samples

class PresetDialog extends hui.Dialog
	var selected: int
	func __init__(plug: SongPlugin)
		super.__init__("Presets", 500, 700, plug.session.win, false)
		set_options("", "headerbar,closebutton=no,resizable")
		from_source("
Grid ? ''
	ListView presets 'Name\\Instruments\\Samples'
	---|
	Grid ? '' buttonbar
		Button cancel 'Cancel'
		---|
		Button ok 'Ok' default")
		#for i in plug.song.secret_data["instruments"].as_array()
		#	dlg.add_string("instrument", "{{i["name"]}}\\{{get_keys(i)}}\\{{get_samples(i)}}")
		var ii = plug.song.secret_data["instruments"]
		for p in plug.song.secret_data["presets"].as_array()
			add_string("presets", "{{p["name"]}}\\{{get_instruments(p, ii)}}\\{{get_samples(p, ii)}}")
		selected = 0
		set_int("presets", selected)
		
		event("ok", on_ok)
		event("presets", on_ok)
		event("cancel", on_cancel)
	func on_ok()
		selected = get_int("presets")
		destroy()
	func on_cancel()
		selected = -1
		destroy()

func choose_preset(plug: SongPlugin, f: int->void)
	var dlg = new PresetDialog(plug)
	var ff = func()
		f(dlg.selected)
	hui.fly(dlg, ff)

class XXX extends SongPlugin
	func override apply()
		if not song.secret_data.has("instruments")
			session.e("no sf2 data found")
			return

		choose_preset(self, lambda(pre: int) self.set_preset(pre))
		
	func set_preset(pre: int)
		
	#	var prog = new ProgressX("generating sound font", session.win)

		print("creating track")
		var track = song.add_track(SignalType.MIDI, 0)
		print("creating synth")
		track.synth = CreateSynthesizer(session, "Sample")
		print("set synth")
		var synth: SampleSynthesizer* = weak(track.synth)
		track.set_synthesizer(synth)
		

		print("make")
		var p = song.secret_data["presets"][pre]
		for z in p["zones"].as_array()
			if z.has("instrument")
				var ii = song.secret_data["instruments"][int(z["instrument"])]
				for zz in ii["zones"].as_array()
					if not zz.has("sample")
						continue
					if not zz.has("keys")
						continue
					int k0 = int(zz["keys"][0])
					int k1 = int(zz["keys"][1]) + 1
					var s = song.samples[int(zz["sample"])]
					if zz.has("root-key")
						s.set_value("pitch", str(zz["root-key"]))
					if zz.has("start-loop")
						s.set_value("start-loop", str(zz["start-loop"]))
					if zz.has("end-loop")
						s.set_value("end-loop", str(zz["end-loop"]))
					if s.get_value("pitch") == ""
						continue
					int root = int(s.get_value("pitch"))
					for pitch in k0:k1
						if pitch >= len(synth.config.samples)
							synth.config.samples.resize(pitch+1)

						if weak(synth.config.samples[pitch]) == nil
							if pitch == root
								synth.config.samples[pitch] = s.create_ref()
							else
								shift(song, synth, weak(s), root, pitch)
	#							prog.set("pitch shift", 0.2)

	#	prog.set("remove samples", 0.7)
		var to_del = [for s in weak(session.song.samples) s if s.ref_count == 0]
		for s in to_del
			session.song.delete_sample(s)
	#	del prog
		
		

	
	func shift(out song: Song, out synth: SampleSynthesizer, source: Sample, from: int, to: int)
		print("shift {{from}} -> {{to}}")
		#let buf = *source.origin.buf
		
		AudioBuffer buf
		buf.resize(len(source.buf) * pow(2, (from - to)/12.0))
		print("   {{len(source.buf)}} {{len(buf)}}")
	#	PitchShift* ps = CreateAudioEffect(session, "Pitch Shift")
	#	ps.config.factor = pow(2, (to - from)/12.0)
	#	ps.process(buf)
		interpolate_buffer(*source.buf, buf, 0)
		
		var t = new Sample("new", buf)
		song.add_sample(t)
		
		synth.config.samples[to] = t.create_ref()
		
		#del ps
		
