// Image = hui:find
// Title[Deutsch] = Spektrum zeigen
use "../api.kaba"
use "../grid.kaba"

//#show
//#disasm

const int N = 4096
const int NT = 512
const int NF = 512
const float MIN_FREQ = 80.0
const float MAX_FREQ = 10000.0
const float MIN_VOL = 0.0 - 60.0
const float MAX_VOL = 0.0

SpectrumDialog *dlg

float[NT][NF] sg
Image im0

class SpecGrid : Grid
	overwrite void onDraw(Painter *c)
		rect r = plot_rect
		int w = r.width()
		int h = r.height()
		
		float fy = im0.height / r.height()
		float ya = (log(y_axis.val_max) - log(y_axis.val_min)) / (log(y_axis.val_max_max) - log(y_axis.val_min_min)) * fy
		float yb = (log(y_axis.val_max_max) - log(y_axis.val_max)) / (log(y_axis.val_max_max) - log(y_axis.val_min_min)) * im0.height
		float fx = im0.width / r.width()
		float xa = (x_axis.val_max - x_axis.val_min) / (x_axis.val_max_max - x_axis.val_min_min) * fx
		float xb = (x_axis.val_min - x_axis.val_min_min) / (x_axis.val_max_max - x_axis.val_min_min) * im0.width
		
		Image im
		im.create(w, h, Black)
		for x in 0:w
			for y in 0:h
				im.setPixel(x, y, im0.getPixel(x * xa + xb, y * ya + yb))
		c.drawImage(r.x1, r.y1, im)
	
		/*Image *im = im0.scale(r.width(), r.height())
		c.DrawImage(r.x1, r.y1, *im)
		delete(im)*/

class SpectrumDialog : Dialog
	SpecGrid grid
	void __init__()
		super.__init__("Spectrum", 600, 460, MainWin, true)
		fromSource("
Grid ? '' 1 2
	DrawingArea drawing_area ''
	Grid ? '' 2 1 noexpandy
		Text ? ''
		Button close 'Close' width=120 image=hui:close")
		
		grid.init(self, "drawing_area")
		grid.x_axis.set(view.sel.range.offset / i2f(song.sample_rate), view.sel.range.end() / i2f(song.sample_rate), false, "s")
		grid.y_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		//grid.allow_bg = false
	
		event("close", &onClose)

	void onClose()
		delete self

color f2col(float f)
	f = sqrt(f)
	if f < 0.333
		return color(f * 3, 0, 0, f * 3)
	else if f < 0.6666
		return color(1, f * 3 - 1, 0, 2 - f * 3)
	return color(1, 1, f * 3 - 2, 0)

void show_spec()
	dlg = new SpectrumDialog
	
	BufferBox buf
	SongRenderer* renderer = new SongRenderer(song, &view.sel)
	renderer.render(view.sel.range, buf)
	delete renderer
	
	complex[] f
	float[] sub
	sub.resize(N)
	
	float _max = 0
	
	float log_max_min = log(MAX_FREQ / MIN_FREQ)
	
	for t in 0:NT
		int offset = (buf.length - N) * t / NT
		
		for j in 0:N
			sub[j] = buf.r[offset + j]
		fft_r2c(sub, f)
		float ww = i2f(N) / song.sample_rate
		for i in 0:NF
			float fmin = MIN_FREQ * exp( log_max_min / (NF - 1) * i)
			float fmax = MIN_FREQ * exp( log_max_min / (NF - 1) * (i + 1))
			int j0 = fmin * ww
			int j1 = fmax * ww + 1
			j0 = clamp(j0, 0, f.num)
			j1 = clamp(j1, 0, f.num)
			float bmaxr = 0
			for j in j0:j1
				float amp = f[j].x * f[j].x + f[j].y * f[j].y
				if bmaxr < amp
					bmaxr = amp
			_max = max(_max, bmaxr)
			sg[t][i] = bmaxr
	
	im0.create(NT, NF, Black)
	for t in 0:NT
		for i in 0:NF
			float ff = sg[t][i] / _max
			im0.setPixel(t, NF - i - 1, f2col(ff))
	

	dlg.redraw("drawing_area")

	dlg.run()

void main()
	
	if view.sel.range.length > 0
		show_spec()
	else
		logging.error("'Show Spectrogram.kaba': Needs some selection!")
