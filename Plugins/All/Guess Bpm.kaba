use tsunami
use hui
use helper.grid

const FRAME_SIZE = 1024
const FRAME_STEP = 512/2
const BPM_MIN = 50.
const BPM_MAX = 180.

const NN = 4

# cut into chunks ("frames")
# novelty function
#   for chunks
#     root of mean square (rms)
# for beat lengths
#   self correlation of novelty
# peak
#   best array element
#   fit parable around best
#   optimize

func rms(b: float[]) -> float
	float r = 0
	for bb in b
		r += bb^2
	return sqrt(r / len(b))

func calc_novelty(buf: AudioBuffer) -> float[]
	float[] novelty
	float prev = 0
	for i in 0:len(buf):FRAME_STEP
		float r = rms(buf[i:i+FRAME_SIZE].c[0])
		float d = r - prev
		if d < 0
			d = 0
		
		novelty.add(d)
		#buf[i:i+FRAME_STEP].c[0] = d
		
		prev = r
	return novelty

func self_correlation(novelty: float[], d: int) -> float
	float corr = 0
	for i in d:len(novelty)
		corr += novelty[i-d] * novelty[i]
	return corr / (len(novelty) - d)

func find_beats(buf: AudioBuffer, sample_rate: int)
	var novelty = calc_novelty(buf)
	int dmin = sample_rate / float(FRAME_STEP) * (60./BPM_MAX)
	int dmax = sample_rate / float(FRAME_STEP) * (60.0/BPM_MIN)
	for d in dmin:dmax
		var c = self_correlation(novelty, d)
		print("{{float(sample_rate)/(d*FRAME_STEP)*60|.1}}   {{c}}")

class CorrelationGrid extends Grid
	var curve: vec2[]
	var bpm_opt: float
	var i_opt: int
	var para: float[]
	var hover_peak = -1
	
	var dlg: SelfCorrelationDialog*
	
	func mouse_index() -> int
		var q = [for c in curve project2(c)]
		int index = 0
		float dmin = m.x
		for c,i in q
			var d = abs(m.x - c.x)
			if d < dmin
				dmin = d
				index = i
		return index
	
	func peak_around_mouse() -> int
		int index = mouse_index()
		int imax = index
		float ymax = 0
		for c,i in curve[index-10:index+10]
			if c.y > ymax
				ymax = c.y
				imax = index-10+i
		return imax
		
	
	func override on_draw(p: Painter)
		if hover_peak >= 0
			p.set_color([1,1,1, 0.1])
			float x0 = x_axis.project(curve[max(hover_peak-10, 0)].x)
			float x1 = x_axis.project(curve[min(hover_peak+10, len(curve)-1)].x)
			p.draw_rect(rect(x0,x1, 0,p.height))
	
		var q = [for c in curve project2(c)]
		p.set_line_width(2)
		p.set_color(colors.text_soft2)
		p.draw_lines(q)
		
		p.set_color(colors.selection)
		var x = x_axis.project(bpm_opt)
		p.draw_line([x, 0], [x, p.height])
		p.set_font_size(8)
		p.draw_str([x+3, plot_area.y2-20], "{{bpm_opt|.1}} bpm")
		
		
		for c,i in curve[i_opt-NN:i_opt+NN+1]
			float y = (para[1] - para[2] * (i-para[0])^2)
			var pp = project2(vec2(curve[i_opt-NN+i].x, y))
			p.draw_circle([pp.x, pp.y], 3)
	
	func override on_mouse_move()
		hover_peak = peak_around_mouse()
		redraw()
	func override on_left_button_down()
		hover_peak = peak_around_mouse()
		float bpm1 = curve[max(hover_peak-10, 0)].x
		float bpm0 = curve[min(hover_peak+10, len(curve)-1)].x
		dlg.create_curve(bpm0, bpm1)

func weight_parable(p: float[], yy: float[]) -> float
	float w = 0
	for y,i in yy
		w += (y - (p[1] - p[2] * (i-p[0])^2))^2
	return w

func optimize_parable(p0: float[], yy: float[]) -> float[]
	var p = p0
	float epsilon = 0.002
	for i in 0:10000
		int d = i % 3
		float w = weight_parable(p, yy)
		#print("{{p}}   {{w}}")
		var pnext = p
		pnext[d] += epsilon
		var wx = weight_parable(pnext, yy)
		if wx < w
			p[d] += epsilon
		else
			p[d] -= epsilon
	return p

class SelfCorrelationDialog extends Dialog
	var grid: CorrelationGrid*
	var beats_per_bar = 4
	var discrete = true
	var fb: GuessBpm*
	var novelty: float[]
	var buf_len: int
	
	func __init__(_fb: GuessBpm, buf: AudioBuffer)
		super.__init__("Beat finder", 800, 500, _fb.session.win, false)
		set_options("", "headerbar,resizable,closebutton=false")
		from_source("
Grid ? '' vertical
	Grid ? ''
		Grid ? ''
			Label l-beats 'Beats per bar' right disabled
			SpinButton beats '' range=1:16
			---|
			.
			CheckBox discrete 'Round to integer'
		DrawingArea area '' expandx
	Grid ? '' buttonbar
		Button cancel Cancel
		---|
		Button ok Create default")
		set_int("beats", beats_per_bar)
		check("discrete", discrete)
		fb = &_fb
		buf_len = len(buf)
		novelty = calc_novelty(buf)
	
		grid = new CorrelationGrid()
		grid.dlg = &self
		
		grid.init(self, "area")
		grid.x_axis.set(BPM_MIN, BPM_MAX, true, "bpm")
		grid.y_axis.set(0, 100, false, "%")
		
		event("hui:close", on_cancel)
		event("cancel", on_cancel)
		event("ok", on_ok)
		event("beats", on_beats)
		event("discrete", on_discrete)
		
		create_curve(BPM_MIN, BPM_MAX)
		
	func on_cancel()
		destroy()
	
	func on_ok()
		var song = fb.session.song
		song.begin_action_group("guess bpm")
		if not song.time_track()
			song.add_track(SignalType.TIME, 0)
		int length = (fb.session.sample_rate() * 60 * beats_per_bar) / grid.bpm_opt
		Bar bar = Bar(length, beats_per_bar, 1)
		for i in 0:buf_len / length
			song.add_bar(i, bar, Bar.EditMode.IGNORE)
		song.end_action_group()
		destroy()
	
	func on_beats()
		beats_per_bar = get_int("")
		create_curve(BPM_MIN, BPM_MAX)
	
	func on_discrete()
		discrete = is_checked("")
		create_curve(BPM_MIN, BPM_MAX)
	
	func d_to_bpm(d: int) -> float
		var sample_rate = fb.session.sample_rate()
		return float(sample_rate * beats_per_bar) / (d * FRAME_STEP) * 60
	
	func bpm_to_d(bpm: float) -> float
		var sample_rate = fb.session.sample_rate()
		return sample_rate * beats_per_bar / FRAME_STEP * (60. / bpm)
	
	func create_curve(peak_bpm_min: float, peak_bpm_max: float)
		grid.curve.clear()
		var sample_rate = fb.session.sample_rate()
		#find_beats(buf, song.sample_rate)
		int dmin = bpm_to_d(BPM_MAX)
		int dmax = bpm_to_d(BPM_MIN)
		float _cmax = 0
		int i_opt = -1
		for d in dmin:dmax
			var c = self_correlation(novelty, d)
			var bpm = d_to_bpm(d)
			grid.curve.add([bpm, c])
			if c > _cmax and bpm >= peak_bpm_min and bpm <= peak_bpm_max
				_cmax = c
				i_opt = d - dmin
		var cmax = [for c in grid.curve c.y].max()
		grid.curve = [for c in grid.curve vec2(c.x, c.y/cmax*100)]
		grid.bpm_opt = d_to_bpm(dmin + i_opt)
		grid.i_opt = i_opt
		
		# parable initial
		grid.para = [NN, 100*_cmax/cmax, 0.2]#((1-grid.curve[i_opt-1].y) + (1-grid.curve[i_opt-1].y)) / 2]
		#grid.para = optimize_parable(grid.para, [for c in grid.curve[i_opt-NN:i_opt+NN+1] c.y])
		grid.bpm_opt = d_to_bpm(dmin + i_opt - NN + grid.para[0])
		if discrete
			grid.bpm_opt = float(int(grid.bpm_opt + 0.5))
		
		grid.redraw()


class GuessBpm extends SongPlugin
	func override apply()
		for t in weak(song.tracks)
			for l in weak(t.layers)
				for buf in l.buffers
					hui.fly(new SelfCorrelationDialog(self, buf), nil)
