use hui
use tsunami

class VolumeChecker extends SongPlugin

	var vol_max: float
	func check() -> bool
		var renderer = new SongRenderer(song)
		
		var p = new ProgressX("checking", self.session.win)
		
		Range range = song.range()
		AudioBuffer buf
		renderer.set_range(range)
		
		buf.resize(1024*16)
		
		vol_max = 0
		int done = 0
		while not p.is_cancelled()
			int n = renderer.read(buf)
			if n < 0
				break
			
			float _max = max(buf.c[0].max(), buf.c[1].max())
			float _min = min(buf.c[0].min(), buf.c[1].min())
			vol_max = max(vol_max, max(abs(_max), abs(_min)))
			done += n
			p.set("checking", float(done) / float(range.length))

		bool cancelled = p.is_cancelled()

		del p
		del renderer
		return !cancelled
		
	func ask()
		string q = "Song reaches a peak volume of {{vol_max * 100.0|.1}}% ({{amp2db(vol_max)|.1}}dB)\n"
		if vol_max > 0.95 and vol_max < 1.0
			hui.info_box(session.win, "Info", "{{q}} seems fine...")
			return
		if vol_max < 1
			q += "increase each track's volume by {{amp2db(1/vol_max)|.1}} dB to reach 100%?"
		else
			q += "decrease each track's volume by {{-amp2db(1/vol_max)|.1}} dB to stay below 100%?"
	
		var f = func(a: string)
			if a == "hui:yes"
				session.song.begin_action_group("set volume")
				for t in session.song.tracks
					t.set_volume(t.volume / vol_max * 0.999)
				session.song.end_action_group()
		hui.question_box(session.win, "Question", q, f, true)

	func override apply()
		if check()
			ask()
		
