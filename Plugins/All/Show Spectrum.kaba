# Image = hui:find
# Title[Deutsch] = Spektrum zeigen
use hui
use tsunami
use helper.grid

const int N = 512
const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const float MIN_VOL = 0.0 - 60.0
const float MAX_VOL = 0.0

SpectrumDialog *dlg

enum
	TYPE_LINEAR
	TYPE_LOG

#float[] x, yr, yl
float[] ffr, ffl

#GridData grid

#int w, h

float todb(float v)
	return log(v) / log(10) * 10

float peak_max

class SpecGrid extends Grid
	int type
	complex[] pr, pl

	void create_lines()
		pr.resize(N)
		pl.resize(N)
		for i in 0:N
			float x = log2lin(float(i) / float(N), MIN_FREQ, MAX_FREQ)
			pr[i].x = x
			pl[i].x = x
			if type == TYPE_LINEAR
				pr[i].y = ffr[i]
				pl[i].y = ffl[i]
			else #if type == TypeLogarithm
				float vol_max = todb(peak_max)
				float vol_min = vol_max - 60
				pr[i].y = clamp(todb(ffr[i]), vol_min, vol_max)
				pl[i].y = clamp(todb(ffl[i]), vol_min, vol_max)
	void set_type(int t)
		type = t
		if type == TYPE_LINEAR
			y_axis.set(0, peak_max, false, "")
		else #if type == TypeLogarithm
			float vol_max = todb(peak_max)
			float vol_min = vol_max - 60
			y_axis.set(vol_min, vol_max, false, "db")
		create_lines()

	override void on_draw(Painter c)
		draw_curve_b(c, pr, true, Red)
		draw_curve_b(c, pl, true, Blue)

class SpectrumDialog extends Dialog
	SpecGrid grid
	void __init__(SongPlugin plugin)
		super.__init__("Spectrum", 600, 460, plugin.session.win, true)
		set_options("", "headerbar,resizable")
		from_source("
Grid ? ''
	DrawingArea drawing_area ''
	---|
	Grid ? '' buttonbar
		ComboBox type 'Linear\\Logarithm'
		Button close 'Close' image=hui:close")
		
		grid.init(self, "drawing_area")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
	
		event("type", on_type)
		event("hui:close", on_close)
		event("close", on_close)
	
		set_int("type", TYPE_LOG)

	void on_type()
		grid.set_type(get_int("type"))
		grid.redraw()

	void on_close()
		destroy()

class ShowSpectrum extends SongPlugin
	void show_spec(Song *song)
		dlg = new SpectrumDialog(self)
	
		AudioBuffer buf
		SongRenderer* renderer = new SongRenderer(song)
		renderer.render(session.view.sel.range(), buf)
		del renderer
	
		complex[] fr, fl
	
		int len2 = len(buf.r) / 2 + 1
		fr.resize(len2)
		fl.resize(len2)
		#ff.clear()
		#fft_r2c(buf.r, fr)
		#fft_r2c(buf.l, fl)
		buf.get_spectrum(fr, fl, 4096)
	
		float ww = float(len(buf.r)) / song.sample_rate
		for i in 0:N
			float fmin = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * i)
			float fmax = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * (i + 1))
			int j0 = fmin * ww
			int j1 = fmax * ww + 1
			j0 = clamp(j0, 0, len2)
			j1 = clamp(j1, 0, len2)
			float bmaxr = 0
			float bmaxl = 0
			for j in j0:j1
				float amp = fr[j].x * fr[j].x + fr[j].y * fr[j].y
				if bmaxr < amp
					bmaxr = amp
				amp = fl[j].x * fl[j].x + fl[j].y * fl[j].y
				if bmaxl < amp
					bmaxl = amp
			ffr.add(bmaxr)
			ffl.add(bmaxl)

		peak_max = max(ffr.max(), ffl.max())
		float mmax = sqr(buf.length) / 4
		if mmax > 0
			ffr /= mmax
			ffl /= mmax
		peak_max /= mmax

		dlg.on_type()

		dlg.run()
		del dlg
	
		ffr.clear()
		ffl.clear()

	override void apply()
		if session.view.sel.range().length > 0
			show_spec(song)
		else
			session.e("'Show Spectrum.kaba': Needs some selection!")
