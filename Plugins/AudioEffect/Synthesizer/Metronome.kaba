// Image = hui:add
// Title[Deutsch] = Metronom

use "../../api.kaba"
use "../../MidiSource/Metronome.kaba"

class MetroConfig extends PluginData
	float beats_per_minute
	float volume
	int beats_per_measure
	override void reset()
		volume = 0.3
		beats_per_minute = 90
		beats_per_measure = 4



class Metronome extends AudioEffect
	MetroConfig config
	Synthesizer *synth
	MetronomeSource *source
	
	override void __init__()
		synth = new DummySynthesizer
		source = new MetronomeSource
		synth.set_source(source.out)
	
	override void __delete__()
		delete source
		delete synth

	override void process(AudioBuffer buf)
		float sample_rate = session.sample_rate()
		synth.set_sample_rate(sample_rate)
		source.sample_rate = sample_rate
		source.config.volume = config.volume
		source.set_beats(config.beats_per_measure, 1)
		source.set_bpm(config.beats_per_minute)
		synth.out.read(buf)
		
	override ConfigPanel *create_panel()
		return new MetronomePanel(self)
	
	override void reset_state()
		synth.reset_state()
		source.reset_state()

	
class MetronomePanel extends ConfigPanel
	override Metronome *c
	override void __init__(Metronome *_m)
		super.__init__(_m)
		add_grid("!width=300", 0, 0, "table2")
		set_target("table2")
		add_label("Geschwindigkeit:", 0, 0, "")
		add_spin_button("!expandx,range=0:1000:0.1\\", 1, 0, "beats_per_minute")
		add_label("/min", 2, 0, "")
		add_label("Schläge pro Takt:", 0, 1, "")
		add_spin_button("!range=1:32:1\\", 1, 1, "beats_per_measure")
		add_label("Lautstärke:", 0, 2, "")
		add_spin_button("!range=0:100:0.1\\", 1, 2, "volume")
		add_label("%", 2, 2, "")
	
		event("beats_per_minute", &onMetroBeats)
		event("beats_per_measure", &onMetroMeasure)
		event("volume", &onMetroVolume)
	
		update()

	override void update()
		set_float("beats_per_minute", c.config.beats_per_minute)
		set_int("beats_per_measure", c.config.beats_per_measure)
		set_float("volume", c.config.volume * 100)
		//SliderSet(self, "volume", c.config.volume)

	void onMetroBeats()
		c.config.beats_per_minute = get_float("")
		changed()

	void onMetroMeasure()
		c.config.beats_per_measure = get_int("")
		changed()

	void onMetroVolume()
		c.config.volume = get_float("") / 100
		//m.config.volume = SliderGet(self, "volume")
		changed()

