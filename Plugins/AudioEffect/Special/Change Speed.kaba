use tsunami

let AutoConfigSpeed = "range=0.01:2:0.001,scale=100,unit=%"

class Config extends Module.Config
	var speed: float
	func override reset()
		speed = 0.5

class ChangeSpeed extends AudioEffect
	var config: Config
	var op: BufferPitchShift.Operator
	var ring_buffer: owned![RingBuffer]
	
	func override __init__()
		ring_buffer = new RingBuffer(65536)
	
	func override reset_state()
		op.reset(1.0/config.speed, 0, 1.0)
	
	func override on_config()
		op.reset(1.0/config.speed, 0, 1.0)
	
	func override read(out buf: AudioBuffer) -> int
		let n_out = len(buf)
		
		let CHUNK_SIZE = 2048
		var chunk_buf: AudioBuffer
		chunk_buf.resize(CHUNK_SIZE)
		while ring_buffer.available() < n_out
			let r = source.read_audio(chunk_buf)
			if r <= 0
				return r
			ring_buffer.write(op.process(chunk_buf))
		
		ring_buffer.read(buf)
		return len(buf)
