use "../../api.kaba"
use "../../helper/filter.kaba"

const string AUTO_CONFIG_FMIN = "0:10000:1:1:Hz"
const string AUTO_CONFIG_FMAX = "0:10000:1:1:Hz"
const string AUTO_CONFIG_LFO = "0:5:0.1:1:Hz"
const string AUTO_CONFIG_Q = "0:20:0.1:1:"
const string AUTO_CONFIG_MIX = "0:1:1:100:%"

class Config extends Module.Config
	float f_min
	float f_max
	float lfo
	float q
	float mix
	override void reset()
		f_min = 60
		f_max = 5000
		lfo = 1
		q = 1
		mix = 0.5

class LowPassFilter extends AudioEffect
	Config config
	BiquadMultiFilter filter1, filter2
	float phase

	override void reset_state()
		filter1.reset()
		filter2.reset()

	override void on_config()
		pass
		
	override void process(out AudioBuffer buf)
		float[] f1, f2, q, gain
		f1.resize(len(buf))
		f2.resize(len(buf))
		q.resize(len(buf))
		gain.resize(len(buf))
		
		q = config.q
		
		float dphi = config.lfo * 2 * pi / session.sample_rate() / 2
		for i in 0:len(buf)
			phase += dphi
			if phase > 2 * pi
				phase -= 2 * pi
			float x = sqr(cos(phase))
			f1[i] = exp(log(config.f_min) + (log(config.f_max) - log(config.f_min)) * x)
			f2[i] = f1[i] * 1.4
		filter1.create(FILTER_ALL_PASS, f1, q, gain, session.sample_rate())
		filter2.create(FILTER_ALL_PASS, f2, q, gain, session.sample_rate())
		AudioBuffer bb = buf
		filter1.apply(bb)
		filter2.apply(bb)
		buf.scale(1 - config.mix)
		buf.add(bb, 0, config.mix)
