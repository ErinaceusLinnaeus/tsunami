use tsunami
use helper.filter

const AUTO_CONFIG_FMIN = "0:10000:1:1:Hz"
const AUTO_CONFIG_FMAX = "0:10000:1:1:Hz"
const AUTO_CONFIG_LFO = "0:5:0.1:1:Hz"
const AUTO_CONFIG_Q = "0:20:0.1:1:"
const AUTO_CONFIG_MIX = "0:1:1:100:%"

class Config extends Module.Config
	var f_min: float
	var f_max: float
	var lfo: float
	var q: float
	var mix: float
	func override reset()
		f_min = 60
		f_max = 5000
		lfo = 1
		q = 1
		mix = 0.5

class LowPassFilter extends AudioEffect
	var config: Config
	var filter1, filter2: BiquadMultiFilter
	var phase: float

	func override reset_state()
		filter1.reset()
		filter2.reset()

	func override on_config()
		pass
		
	func override process(out buf: AudioBuffer)
		var f1, f2, q, gain: float[]
		f1.resize(len(buf))
		f2.resize(len(buf))
		q.resize(len(buf))
		gain.resize(len(buf))
		
		q = config.q
		
		var dphi = config.lfo * 2 * pi / session.sample_rate() / 2
		for i in 0:len(buf)
			phase += dphi
			if phase > 2 * pi
				phase -= 2 * pi
			var x = sqr(cos(phase))
			f1[i] = exp(log(config.f_min) + (log(config.f_max) - log(config.f_min)) * x)
			f2[i] = f1[i] * 1.4
		filter1.create(FilterType.ALL_PASS, f1, q, gain, session.sample_rate())
		filter2.create(FilterType.ALL_PASS, f2, q, gain, session.sample_rate())
		var bb = buf
		filter1.apply(bb)
		filter2.apply(bb)
		buf.scale(1 - config.mix)
		buf.add(bb, 0, config.mix)
