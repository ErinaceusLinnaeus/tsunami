# Image = hui:properties
# Title[Deutsch] = Kompressor
use hui
use tsunami
use helper.grid

let MIN_DB = -60.0
let MAX_DB = 0.0


class Compressor extends AudioEffect
	class Config extends Module.Config
		var curve: vec2[]
		var attack, release: float

		func fill_inter(out fi: FloatInterpolator)
			fi.set_type("lerp")
			fi.add(curve[0].y, 0)
			for i in 1:len(curve)
				fi.add(curve[i].y, curve[i].x - curve[i - 1].x)
			fi.normalize()

		func override reset()
			curve = [[MIN_DB, MIN_DB], [MAX_DB, MAX_DB]]
			attack = 0.01
			release = 0.1
	var config: Config
	
	
	var gain_r, gain_l: float
	var squares_r: float[]
	var squares_l: float[]
	func override reset_state()
		gain_r = 1
		gain_l = 1
		squares_r.clear()
		squares_r.resize(70)
		squares_l.clear()
		squares_l.resize(70)

	var dgain_attack, dgain_release: float

	func compress(out b: float[], out squares: float[], out gain: float)
		var bmin = pow(10, MIN_DB/20)
		for i in 0:len(b)
		
			# in level (filtered)
			squares[i % len(squares)] = b[i]*b[i]
			var rms = sqrt(sum(squares) / len(squares) * 2)
			if config.attack < 0.00005 # = 0
				rms = abs(b[i])
			var in_level = MIN_DB
			if rms > bmin
				in_level = log(rms) / log(10) * 20
		
			# out level
			var out_level = in_level
			for j in 1:len(config.curve)
				if (in_level >= config.curve[j - 1].x) and (in_level <= config.curve[j].x)
					out_level = config.curve[j - 1].y + (config.curve[j].y - config.curve[j - 1].y) * (in_level - config.curve[j - 1].x) / (config.curve[j].x - config.curve[j - 1].x)
					break
			
			# slow gain changes
			var cur_gain = out_level - in_level
			if cur_gain > gain
				if config.release < 0.00005
					gain = cur_gain
				else
					gain += dgain_release
			else if cur_gain < gain
				if config.attack < 0.00005
					gain = cur_gain
				else
					gain -= dgain_attack
			
			# apply gain
			b[i] *= pow(10, gain / 20)

	func override create_panel() -> ConfigPanel*
		return new CompressorPanel(self)

	func override process(out buf: AudioBuffer)
		dgain_attack = 10 / (config.attack * session.sample_rate())
		dgain_release = 10 / (config.release * session.sample_rate())
		
		compress(buf.c[0], squares_l, gain_l)
		if buf.channels >= 2
			compress(buf.c[1], squares_r, gain_r)
		if buf.channels > 2
			session.e("Compressor: channels>2")

class CompressorGrid extends Grid
	var hover, selected: int?
	var config: Compressor.Config*
	var cp: ConfigPanel*

	func override on_draw(p: Painter)
		var fi: FloatInterpolator
		config.fill_inter(fi)
	
		# curve
		draw_curve(p, fi, true)
		for i=>cc in config.curve
			draw_point2(p, cc, selected == i, hover == i)
			
	func override on_left_button_down_outside()
		selected = nil

	# left button down -> select
	func override on_left_button_down()
		hover = get_hover()
		selected = hover
		redraw()

	# right button down -> new point
	func override on_right_button_down()
		let m = get_mouse2()
		for i in 1:len(config.curve)
			let q = config.curve[i - 1]
			let p = config.curve[i]
			if (m.x > q.x) and (m.x < p.x)
				config.curve.insert(m, i)
				cp.changed()
				selected = i
				redraw()
				break
	
	func point_x_constraint(i: int) -> (float,float)
		if i == 0
			return (MIN_DB, MIN_DB)
		if i == len(config.curve) - 1
			return (MAX_DB, MAX_DB)
		return (config.curve[i - 1].x, config.curve[i + 1].x)

	func override on_mouse_move()
		# move
		if hui.get_event().button_l and bool(selected)
			let s = selected()
			config.curve[s] = get_mouse2()
			let (xmin, xmax) = point_x_constraint(s)
			config.curve[s].x = clamp(config.curve[s].x, xmin, xmax)
			config.curve[s].y = clamp(config.curve[s].y, MIN_DB, MAX_DB)
			cp.changed()
		else
		# mouse over?
			hover = get_hover()
		redraw()
	
	func get_hover() -> int?
		for i=>cp in config.curve
			if mouse_over_point2(cp)
				return i
		return nil

	func override on_key_down()
		let k = hui.get_event().key

		# [Delete] -> remove point
		if (k == KEY_DELETE) and bool(selected)
			let s = selected()
			if (s > 0) and (s < len(config.curve) - 1)
				config.curve.remove(s)
				cp.changed()
				hover = nil
				selected = nil
				redraw()

class CompressorPanel extends ConfigPanel
	var override c: Compressor*
	var grid: CompressorGrid
	func override __init__(_fx: Module)
		add_grid("", 0, 0, "table1")
		set_target("table1")
		add_drawing_area("!grabfocus,height=200,expandy\\", 0, 0, "drawing_area")
		add_grid("!noexpandy", 0, 1, "table2")
		set_target("table2")
		add_label("!right,disabled\\Attack", 0, 0, "")
		add_spin_button("!range=0:100:0.1\\", 1, 0, "attack")
		add_label("ms", 2, 0, "")
		add_label("!right,disabled\\Release", 3, 0, "")
		add_spin_button("!range=0:1000:0.1\\", 4, 0, "release")
		add_label("ms", 5, 0, "")
		
		grid.config = &c.config
		grid.cp = &self
		
		event("attack", on_edit)
		event("release", on_edit)
	
		grid.init(self, "drawing_area")
		grid.x_axis.set(MIN_DB, 0, false, "dB")
		grid.y_axis.set(MIN_DB, 0, false, "dB")
	
		update()
	
	func override update()
		grid.redraw()
		set_float("attack", grid.config.attack * 1000)
		set_float("release", grid.config.release * 1000)

	func mut on_edit()
		grid.config.attack = get_float("attack") / 1000.0
		grid.config.release = get_float("release") / 1000.0
		changed()
		
