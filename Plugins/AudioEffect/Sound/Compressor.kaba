// Image = hui:properties
// Title[Deutsch] = Kompressor

use "../../api.kaba"
use "../../helper/grid.kaba"

const float MIN_DB = 0.0 - 60.0

class CompressorConfig extends PluginData
	complex[] curve
	float attack, release

	void fill_inter(FloatInterpolator fi)
		fi.set_type("lerp")
		fi.add(curve[0].y, 0)
		for i in 1:curve.num
			fi.add(curve[i].y, curve[i].x - curve[i - 1].x)
		fi.normalize()

	override void reset()
		curve.clear()
		curve.add(complex(MIN_DB, MIN_DB))
		curve.add(complex(0, 0))
		attack = 0.01
		release = 0.1
		//MouseOver = -1
		//Selected = -1


class Compressor extends AudioEffect
	CompressorConfig config
	
	
	float gain_r, gain_l
	float[] squares_r
	float[] squares_l
	override void reset_state()
		gain_r = 1
		gain_l = 1
		squares_r.clear()
		squares_r.resize(70)
		squares_l.clear()
		squares_l.resize(70)

	float dgain_attack, dgain_release

	void compress(float[] b, float[] squares, float *gain)
		float bmin = pow(10, MIN_DB/20)
		for i in 0:b.num
		
			// in level (filtered)
			squares[i%squares.num] = b[i]*b[i]
			float rms = sqrt(squares.sum() / squares.num * 2)
			if config.attack < 0.00005 // = 0
				rms = abs(b[i])
			float in_level = MIN_DB
			if rms > bmin
				in_level = log(rms) / log(10) * 20
		
			// out level
			float out_level = in_level
			for j in 1:config.curve.num
				if (in_level >= config.curve[j - 1].x) and (in_level <= config.curve[j].x)
					out_level = config.curve[j - 1].y + (config.curve[j].y - config.curve[j - 1].y) * (in_level - config.curve[j - 1].x) / (config.curve[j].x - config.curve[j - 1].x)
					break
			
			// slow gain changes
			float cur_gain = out_level - in_level
			if cur_gain > *gain
				if config.release < 0.00005
					*gain = cur_gain
				else
					*gain += dgain_release
			else if cur_gain < *gain
				if config.attack < 0.00005
					*gain = cur_gain
				else
					*gain -= dgain_attack
			
			// apply gain
			b[i] *= pow(10, *gain / 20)

	override ConfigPanel *create_panel()
		return new CompressorPanel(self)

	override void process(AudioBuffer buf)
		dgain_attack = 10 / (config.attack * session.sample_rate())
		dgain_release = 10 / (config.release * session.sample_rate())
		
		compress(buf.l, squares_l, &gain_l)
		if buf.channels > 1
			compress(buf.r, squares_r, &gain_r)

class CompressorGrid extends Grid
	int hover, selected
	CompressorConfig *config
	ConfigPanel *cp

	override void on_draw(Painter *p)
		FloatInterpolator fi
		config.fill_inter(fi)
	
		// curve
		draw_curve(p, fi, true)
		for i in 1:config.curve.num
			draw_point2(p, config.curve[i], i == selected, i == hover)

	// left button down -> select
	override void on_left_button_down()
		selected = hover
		redraw()

	// right button down -> new point
	override void on_right_button_down()
		complex m = get_mouse2()
		for i in 1:config.curve.num
			complex q = config.curve[i - 1]
			complex p = config.curve[i]
			if (m.x > q.x) and (m.x < p.x)
				config.curve.insert(m, i)
				cp.changed()
				selected = i
				redraw()
				break

	override void on_mouse_move()
		// move
		if HuiGetEvent().button_l and (selected > 0)
			config.curve[selected] = get_mouse2()
			float xmin = config.curve[selected - 1].x
			float xmax = 0
			if selected < config.curve.num - 1
				xmax = config.curve[selected + 1].x
			config.curve[selected].x = clamp(config.curve[selected].x, xmin, xmax)
			if selected == config.curve.num - 1
				config.curve[selected].x = 0
			cp.changed()
		else
		// mouse over?
			hover = -1
			for i in 1:config.curve.num
				if mouse_over_point2(config.curve[i])
					hover = i
		redraw()

	override void on_key_down()
		int k = HuiGetEvent().key

		// [Delete] -> remove point
		if (k == KEY_DELETE) and (selected > 0) and (selected < config.curve.num - 1)
			config.curve.remove(selected)
			cp.changed()
			selected = -1
			redraw()

class CompressorPanel extends ConfigPanel
	override Compressor *c
	CompressorGrid grid
	override void __init__(Module *_fx)
		add_grid("", 0, 0, "table1")
		set_target("table1")
		add_drawing_area("!grabfocus,height=250\\", 0, 0, "drawing_area")
		add_grid("!noexpandy", 0, 1, "table2")
		set_target("table2")
		add_label("Attack", 0, 0, "")
		add_spin_button("!range=0:100:0.1\\", 1, 0, "attack")
		add_label("ms", 2, 0, "")
		add_label("Release", 3, 0, "")
		add_spin_button("!range=0:1000:0.1\\", 4, 0, "release")
		add_label("ms", 5, 0, "")
		
		grid.config = &c.config
		grid.cp = self
		
		event("attack", &on_edit)
		event("release", &on_edit)
	
		grid.init(self, "drawing_area")
		grid.x_axis.set(MIN_DB, 0, false, "dB")
		grid.y_axis.set(MIN_DB, 0, false, "dB")
	
		update()
	
	override void update()
		grid.redraw()
		set_float("attack", grid.config.attack * 1000)
		set_float("release", grid.config.release * 1000)

	void on_edit()
		grid.config.attack = get_float("attack") / 1000.0
		grid.config.release = get_float("release") / 1000.0
		changed()
		