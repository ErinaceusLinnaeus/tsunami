# Image = hui:copy
# Title[Deutsch] = Flanger

use tsunami

const string AUTO_CONFIG_DELAY = "0:0.02:0.1:1000:ms"
const string AUTO_CONFIG_SPEED = "0:2:0.01:1:Hz"
const string AUTO_CONFIG_DEPTH = "0:1:0.1:100:%"


class PluginConfig extends Module.Config
	float delay
	float speed
	float depth
	override void reset()
		depth = 0.5
		speed = 0.3
		delay = 0.01


class Flanger extends AudioEffect
	PluginConfig config
	
	AudioBuffer buf_temp
	int offset
	override void reset_state()
		buf_temp.clear()
		offset = 0

	void do_flanger(out float[] b, out float[] temp)
		int p = offset % len(temp)
		float sample_rate = session.sample_rate()
	
		float f_a = (1 - 0.5 * config.depth) * config.delay
		float f_b = 0.5 * config.depth * config.delay
		float f_c = 1.0 / sample_rate * 2 * pi * config.speed
	
		for bb,i in b
	
			# old value
			temp[p] = bb
		
			# shift
			float dt = f_a - cos((i + offset) * f_c) * f_b
			int dp = dt * sample_rate
			int p2 = p - dp
			if p2 < 0
				p2 += len(temp)
		
			# add echo
			bb += temp[p2]
		
			p ++
			if p >= len(temp)
				p = 0

	
	override void process(out AudioBuffer buf)
		int delay_samples = session.sample_rate() * config.delay + 1
		buf_temp.set_channels(buf.channels)
		buf_temp.resize(delay_samples)
	
		for c, i in buf.c
			do_flanger(buf.c[i], buf_temp.c[i])
	
		offset += len(buf)
