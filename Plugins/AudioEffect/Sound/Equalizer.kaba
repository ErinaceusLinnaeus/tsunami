// Image = hui:properties
// Title[Deutsch] = Equalizer

use "../../api.kaba"
use "../../grid.kaba"



const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int MIN_VOL = 0-45
const int MAX_VOL = 45

class Config extends PluginData
	vector[] curve

	void fill_inter(FloatInterpolator fi)
		fi.set_type("cubic-spline-notang")
		fi.add3(curve[0].y, 0.0, exp(curve[0].z), 0.0)
		for i in 1:curve.num
			fi.add3(curve[i].y, 0.0, exp(curve[i].z), log(curve[i].x / curve[i - 1].x))
		fi.normalize()

	override void reset()
		curve.clear()
		curve.add(vector(MIN_FREQ, 0, 0))
		curve.add(vector(MAX_FREQ, 0, 0))
		//MouseOver = -1
		//Selected = -1

class Equalizer extends AudioEffect

	Config config

	void equalize(float[] b)
		float sample_rate = session.sample_rate()
		complex[] f
	
	
		// transform
		int len2 = b.num / 2 + 1
		f.resize(len2)
		fft_r2c(b, f)
	
		FloatInterpolator fi
		config.fill_inter(fi)
	
		// equalize
		f *= (1.0 / b.num)
		float w = i2f(b.num) / sample_rate
		for i in 1:f.num
			float freq = i2f(i) / w
			float param = lin2log(freq, MIN_FREQ, MAX_FREQ)
			float db = fi.get(param)
			f[i] = f[i] * pow(10, db / 20)
		
		// transform back
		fft_c2r_inv(f, b)

	override void process(AudioBuffer buf)
		equalize(buf.r)
		if buf.channels > 1
			equalize(buf.l)

	override ConfigPanel *create_panel()
		return new EqualizerPanel(self)


class EqualizerGrid extends Grid
	Config *c
	EqualizerPanel *cp
	int hover, selected
	override void on_draw(Painter *p)
		// curve + area below
		FloatInterpolator fi
		c.fill_inter(fi)
		draw_curve(p, fi, true)
	
		// points
		for i in 0:c.curve.num
			draw_point3(p, c.curve[i], i == selected, i == hover)
			

	// left button down -> select
	override void on_left_button_down()
		selected = hover
		redraw()

	override void on_mouse_wheel()
		if hover >= 0
			if HuiGetEvent().scroll_y > 0
				c.curve[hover].z += 0.2
			else
				c.curve[hover].z -= 0.2
			cp.changed()
			redraw()

	// right button down -> new point
	override void on_right_button_down()
		vector m = get_mouse3(0)
		for i in 1:c.curve.num
			if (m.x > c.curve[i - 1].x) and (m.x < c.curve[i].x)
				c.curve.insert(m, i)
				cp.changed()
				selected = i
				hover = i
				redraw()
				break

	override void on_mouse_move()
		// move
		if HuiGetEvent().button_l and (selected >= 0)
			c.curve[selected] = get_mouse3(c.curve[selected].z)
			float xmin = MIN_FREQ
			float xmax = MAX_FREQ
			if selected > 0
				xmin = c.curve[selected - 1].x
			if selected < c.curve.num - 1
				xmax = c.curve[selected + 1].x
			c.curve[selected].x = clamp(c.curve[selected].x, xmin, xmax)
			c.curve[selected].y = clamp(c.curve[selected].y, MIN_VOL, MAX_VOL)
			if selected == c.curve.num - 1
				c.curve[selected].x = MAX_FREQ
			if selected == 0
				c.curve[selected].x = MIN_FREQ
			cp.changed()
		else
		// mouse over?
			hover = -1
			for i in 0:c.curve.num
				if mouse_over_point3(c.curve[i])
					hover = i
		redraw()

	// [Delete] -> remove point
	override void on_key_down()
		if HuiGetEvent().key_code == KEY_DELETE
			if selected > 0 and selected < c.curve.num-1
				c.curve.remove(selected)
				cp.changed()
				selected = -1
				redraw()

class EqualizerPanel extends ConfigPanel
	EqualizerGrid grid
	override void __init__(Equalizer *e)
		super.__init__(e)
		add_drawing_area("!grabfocus,height=250", 0, 0, "drawing")
	
		grid.init(self, "drawing")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp = self
		grid.c = &e.config
	
		grid.redraw()
		
	override void update()
		grid.redraw()

	override void set_large(bool large)
		if large
			set_options("drawing", "height=380")
		else
			set_options("drawing", "height=250")

