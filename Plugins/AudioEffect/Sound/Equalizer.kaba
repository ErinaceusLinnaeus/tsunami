// Image = hui:properties
// Title[Deutsch] = Equalizer

use "../../api.kaba"
use "../../grid.kaba"
use "../../tone.kaba"



const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int MIN_VOL = 0-55
const int MAX_VOL = 35

enum
	POINT_PEAK
	POINT_LOW_PASS
	POINT_HIGH_PASS
	POINT_LOW_SHELF
	POINT_HIGH_SHELF

class Peak
	bool enabled
	int mode
	float pitch
	float gain
	float width
	complex z(float g0)
		complex r
		r.x = pitch_to_freq(pitch)
		r.y = gain + g0
		return r
	float q()
		// ~ (f1 - f0) / f0 = f1/f0 - 1
		return pow(2, width/12) - 1
	float dgain(float _pitch)
		if !enabled
			return 0
		float dpitch = _pitch-pitch
		float d = dpitch / width
		if mode == POINT_PEAK
			return gain * exp(-d*d)
		if mode == POINT_LOW_PASS
			return - log(1 + exp( abs(gain)/12 * d))*width
		if mode == POINT_HIGH_PASS
			return - log(1 + exp(-abs(gain)/12 * d))*width
		if mode == POINT_LOW_SHELF
			return gain / (1+ exp(d))
		if mode == POINT_HIGH_SHELF
			return gain / (1+ exp(-d))
		return 0
Peak _Peak(int mode, float pitch, float gain, float width)
	Peak p
	p.enabled = true
	p.mode = mode
	p.pitch = pitch
	p.gain = gain
	p.width = width
	return p
				

class EqCurve extends Curve
	float gain
	Peak[] peaks
	void set(Config c)
		gain = c.gain
		peaks = c.peaks
	override float get(float f)
		float pitch = freq_to_pitch(f)
		float r = gain
		for p in peaks
			r += p.dgain(pitch)
		return r

class Config extends PluginData
	float gain
	Peak[] peaks

	override void reset()
		gain = 0
		peaks.clear()
	//	peaks.add(_Peak(POINT_HIGH_PASS, 30, -10, 10))
	//	peaks.add(_Peak(POINT_LOW_PASS, 100, -10, 10))
		//for p in peaks
		//	p.enabled = false

class Equalizer extends AudioEffect

	Config config

	void equalize(float[] b)
		float sample_rate = session.sample_rate()
		complex[] f
	
	
		// transform
		int len2 = b.num / 2 + 1
		f.resize(len2)
		fft_r2c(b, f)
	
		EqCurve curve
		curve.set(config)
	
		// equalize
		f *= (1.0 / b.num)
		float w = i2f(b.num) / sample_rate
		for i in 1:f.num
			float freq = i2f(i) / w
			float db = curve.get(freq)
			f[i] = f[i] * pow(10, db / 20)
		
		// transform back
		fft_c2r_inv(f, b)

	override void process(AudioBuffer buf)
		equalize(buf.r)
		if buf.channels > 1
			equalize(buf.l)

	override ConfigPanel *create_panel()
		return new EqualizerPanel(self)


class EqualizerGrid extends Grid
	Config *c
	EqualizerPanel *cp
	int hover, selected
	override void __init__()
		hover = -1
		selected = -1
	override void on_draw(Painter *p)
		// curve + area below
		EqCurve curve
		curve.set(*c)
		draw_curve_c(p, curve, true)
		
		// gain base-line
		float y = y_axis.project(c.gain)
		p.set_line_width(2)
		p.set_color(colors.text_soft2)
		p.set_line_dash([8.0,5.0])
		p.draw_line(0,y, p.width,y)
		p.set_line_dash([8.0,0.0])
	
		// points
		for pk,i in c.peaks
			complex pp = project2(pk.z(c.gain))
			
			p.set_line_width(2)
			color col = point_color(i == selected, i == hover)
			color col2 = col
			col2.a = 0.6
			p.set_color(col2)
			p.draw_line(pp.x, 0, pp.x, p.height)
			
			p.set_font_size(12)
			draw_boxed_str(p, pp.x-5, 10, (i+1), col_text, colors.text_soft3)
			
			draw_point2(p, pk.z(c.gain), i == selected, i == hover)
			if i == hover
				p.set_font_size(8)
				p.set_color(col_hover)
				p.draw_str(pp.x - 20, pp.y - 50, pitch_to_freq(pk.pitch).str2(1) + " Hz")
				p.draw_str(pp.x - 20, pp.y - 35, pk.gain.str2(1) + " dB")
				p.draw_str(pp.x - 20, pp.y - 20, "q " + pk.q().str2(3))
			

	// left button down -> select
	override void on_left_button_down()
		selected = hover
		redraw()

	override void on_mouse_wheel()
		if hover >= 0
			if HuiGetEvent().scroll_y > 0
				c.peaks[hover].width *= 1.04
			else
				c.peaks[hover].width /= 1.04
			cp.changed()
			redraw()

	// right button down -> new point
	override void on_right_button_down()
		vector m = get_mouse3(0)
		c.peaks.add(_Peak(POINT_PEAK, freq_to_pitch(m.x), m.y - c.gain, 10))
		selected = c.peaks.num - 1
		hover = selected
		cp.changed()
		redraw()

	override void on_mouse_move()
		// move
		if HuiGetEvent().button_l and (selected >= 0)
			c.peaks[selected].pitch = freq_to_pitch(get_mouse2().x)
			c.peaks[selected].gain = get_mouse2().y - c.gain
			/*float xmin = MIN_FREQ
			float xmax = MAX_FREQ
			if selected > 0
				xmin = c.curve[selected - 1].x
			if selected < c.curve.num - 1
				xmax = c.curve[selected + 1].x
			c.curve[selected].x = clamp(c.curve[selected].x, xmin, xmax)
			c.curve[selected].y = clamp(c.curve[selected].y, MIN_VOL, MAX_VOL)
			if selected == c.curve.num - 1
				c.curve[selected].x = MAX_FREQ
			if selected == 0
				c.curve[selected].x = MIN_FREQ*/
			cp.changed()
		else
		// mouse over?
			hover = -1
			for i in 0:c.peaks.num
				if mouse_over_point2(c.peaks[i].z(c.gain))
					hover = i
		redraw()

	// [Delete] -> remove point
	override void on_key_down()
		if HuiGetEvent().key_code == KEY_DELETE
			if selected >= 0
				c.peaks.remove(selected)
				cp.changed()
				selected = -1
				hover = -1
				redraw()

class EqualizerPanel extends ConfigPanel
	EqualizerGrid grid
	int num_peaks
	override void __init__(Equalizer *e)
		super.__init__(e)
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_drawing_area("!grabfocus,height=250", 0, 0, "drawing")
		add_grid("", 0, 1, "stuff")
		add_grid("", 0, 2, "peaks")
		set_target("stuff")
		add_label("!width=80\\Gain", 0, 0, "")
		add_spin_button("!range=-40:40:0.1,expandx", 1, 0, "gain")
		add_label("dB", 2, 0, "")
		hide_control("peaks", true)
	
		grid.init(self, "drawing")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp = self
		grid.c = &e.config
		num_peaks = 0
		
		event("*", &on_ui_change)
	
		grid.redraw()
		
	void on_ui_change()
		grid.c.gain = get_float("gain")
		for pk,i in grid.c.peaks
			pk.mode = get_int("mode-" + i)
			pk.enabled = is_checked("enabled-" + i)
		grid.redraw()
		changed()
		
	override void update()
		grid.redraw()
		set_float("gain", grid.c.gain)
		
		for i in num_peaks:grid.c.peaks.num
			set_target("peaks")
			add_grid("", i, 0, "peak-" + i)
			set_target("peak-" + i)
			add_check_box("" + (i+1), 0, 0, "enabled-" + i)
			add_combo_box("Peak\\Low pass\\High pass\\Low shelf\\High shelf", 0, 1, "mode-" + i)
			/*add_spin_button("!range=::0.1", 0, 2, "freq-" + i)
			add_spin_button("!range=::0.1", 0, 2, "gain-" + i)
			add_spin_button("!range=::0.001", 0, 2, "q-" + i)*/
			/*add_label("", 0, 2, "freq-" + i)
			add_label("", 0, 3, "gain-" + i)
			add_label("", 0, 4, "q-" + i)*/
		for i in grid.c.peaks.num:num_peaks
			delete_control("peak-" + i)
		num_peaks = grid.c.peaks.num
		
		for pk,i in grid.c.peaks
			check("enabled-" + i, pk.enabled)
			set_int("mode-" + i, pk.mode)
			/*set_float("freq-" + i, pk.freq)
			set_float("gain-" + i, pk.gain)
			set_float("q-" + i, pk.q)*/
			/*set_string("freq-" + i, pk.freq.str2(1) + " Hz")
			set_string("gain-" + i, pk.gain.str2(1) + " dB")
			set_string("q-" + i, "q: " + pk.q.str2(3))*/

	override void set_large(bool large)
		if large
			set_options("drawing", "height=380")
		else
			set_options("drawing", "height=250")
		hide_control("peaks", !large)

