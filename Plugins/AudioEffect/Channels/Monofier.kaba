# Image = hui:back
# Title[Deutsch] = Monofizieren
use tsunami

let AUTO_CONFIG_PANNING = "range=-1:1:0.01,scale=100,unit=%"
let AUTO_CONFIG_DISTANCE = "range=-2:2:0.001,scale=100,unit=cm"
let AUTO_CONFIG_INVERT = ""

const SPEED_OF_SOUND = 320.0 # m/s


class Monofier extends AudioEffect
	class Config extends Module.Config
		var panning: float
		var invert: bool
		var distance: float
		func override reset()
			panning = 0 # INVERTED.... for historic reasons...
			distance = 0
			invert = false
	

	var config: Config
	var temp: float[]
	var offset: int

	func override reset_state()
		offset = 0

	func override process(out buf: AudioBuffer)
		if buf.channels == 1
			return

		let n = int(session.sample_rate() * abs(config.distance) / SPEED_OF_SOUND)
		temp.resize(n)

		var sl = (1 + config.panning) / 2
		let sr = (1 - config.panning) / 2
		if config.invert
			sl = -sl
		
		if config.distance == 0
			# pure mix
			for i in 0:len(buf)
				let x = sl * buf.c[0][i] + sr * buf.c[1][i]
				buf.c[0][i] = x
				buf.c[1][i] = x
		else if config.distance > 0
			# delay right channel
			for i in 0:len(buf)
				let x = sl * buf.c[0][i] + sr * temp[offset]
				temp[offset] = buf.c[1][i]
				offset ++
				if offset >= n
					offset = 0
				buf.c[0][i] = x
				buf.c[1][i] = x
		else if config.distance < 0
			# delay left channel
			for i in 0:len(buf)
				let x = sl * temp[offset] + sr * buf.c[1][i]
				temp[offset] = buf.c[0][i]
				offset ++
				if offset >= n
					offset = 0
				buf.c[0][i] = x
				buf.c[1][i] = x

