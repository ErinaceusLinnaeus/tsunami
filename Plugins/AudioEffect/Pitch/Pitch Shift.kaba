# Image = hui:properties
# Title[Deutsch] = Pitch Shift

use tsunami

const AutoConfigFactor = "0:2:0.1:100:%"

const CHUNK_SIZE = 1024
const OVERLAP = 512


class PitchShift extends AudioEffect
	class Config extends Module.Config
		var factor: float

		func override reset()
			factor = 1

	var config: Config
	
	var prev_chunk: AudioBuffer[2]
	var prev_no: int
	
	func override reset_state()
		prev_chunk[0].clear()
		prev_chunk[1].clear()
		prev_no = 0
		
	func shift_buf(out b: float[], factor: float)
		complex[] buf1, buf2
		fft_r2c(b, buf1)
		int N = len(b)
		int NN = len(buf1)
		buf2.resize(NN)
		for i in 0:NN
			buf2[i] = complex(0, 0)

		int D = max(100, sqrt(N)*2)
		for i in 0:NN
			float kk = factor * i
			float x0 = pi * kk
			int j0 = max(kk - D, 0)
			int j1 = min(kk + D, NN)
			complex M0 = complex(cos(x0), sin(x0)) * sin(x0)
			for j in j0:j1
				float dk = kk - j
				float x = pi * dk
				if x == 0
					buf2[j] += buf1[i]
				else
					complex M = M0 * (1/x)
					buf2[j] += M * buf1[i]

		fft_c2r_inv(buf2, b)
		b /= N

	func process_chunk(out buf: AudioBuffer)
		for c in buf.c
			shift_buf(c, config.factor)
			
		int other = 1 - prev_no
			
		prev_chunk[prev_no] = buf
		int n = min(OVERLAP, len(prev_chunk[other]))
		print("{{len(buf)}}  {{n}}")
		for i in 0:n
			float t = float(i) / n
			for c,k in buf.c
				buf.c[k][i] = t * buf.c[k][i] + (1-t) * prev_chunk[other].c[k][i]
		
		prev_no = other
		

	func override process(out buf: AudioBuffer)
		for offset in 0:len(buf):CHUNK_SIZE
			int end = min(offset + CHUNK_SIZE, len(buf))
			process_chunk(buf[offset:end])

