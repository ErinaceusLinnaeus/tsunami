# Image = hui:copy
# Title[Deutsch] = Echo
use hui
use tsunami
use helper.grid




class MultiEcho extends AudioEffect
	class Config extends Module.Config
		class Reflector
			var delay: float
			var volume: float
			var feedback: float

		var refl: Reflector[]

		func override reset()
			refl = [[0.15, 0.2, 0.5]]

	var config: Config
	
	class ReflectorState
		var buf: AudioBuffer
		var offset: int
	var refl: ReflectorState[]


	func do_delay(out b: float[], out d: float[], rs: ReflectorState, r: Config.Reflector)
		int p = rs.offset % len(d)
		for bb in b
	
			# old value
			float b0 = bb
		
			# add echo
			bb = bb + d[p] * r.volume
		
			# add to echo
			d[p] = b0 + d[p] * r.feedback
		
			p ++
			if p >= len(d)
				p = 0


	func override process(out buf: AudioBuffer)

		int n = len(config.refl)
		refl.resize(n)
		for r,i in refl
			int delay_samples = session.sample_rate() * config.refl[i].delay
			r.buf.set_channels(buf.channels)
			r.buf.resize(delay_samples)
	
			for c,k in buf.c
				do_delay(c, r.buf.c[k], r, config.refl[i])
	
			r.offset += len(buf)
	
	func override reset_state()
		refl.clear()
		on_config()



	func override create_panel() -> ConfigPanel*
		return new MultiEchoPanel(self)

class MultiEchoGrid extends Grid
	var config: MultiEcho.Config*
	var cp: ConfigPanel*
	var hover = -1
	var selected = -1
	var menu_bg: Menu*
	var menu_point: Menu*
	
	
	func override __init__()
		menu_bg = new Menu()
		menu_bg.add("add reflection", "reflection-add")
		
		menu_point = new Menu()
		menu_point.add("Reflection", "label")
		menu_point.enable("label", false)
		menu_point.add("delete", "reflection-delete")
	func add_events()
		cp.event_o("reflection-add", self, on_add_reflection)
		cp.event_o("reflection-delete", self, on_delete_reflection)

	func draw_hull_curve(c: Painter, r: MultiEcho.Config.Reflector)
		float v = r.volume
		float t = r.delay
		c.set_line_width(2)
		float dt = 0.05
		float dv = pow(r.feedback, dt/r.delay)
		int n = min(100, x_axis.val_max/dt + 1)
		complex[] cc
		for i in 0:n
			cc.add(project2(complex(t, v)))
			v *= dv
			t += dt
		c.set_color(color.interpolate(color.RED, colors.text_soft2, 0.3))
		c.set_line_dash([5.0, 2.0])
		c.draw_lines(cc)
		c.set_line_dash([5.0, 0.0])
	
	func draw_peaks(c: Painter, r: MultiEcho.Config.Reflector)
		float v = r.volume
		float t = r.delay
		int n = min(100, x_axis.val_max/r.delay)
		c.set_line_width(1.5)
		for i in 0:n
			complex p = project2(complex(t, v))
			if i == 0
				c.set_color(colors.text_soft1)
			else
				draw_point2(c, complex(t,v), false, false)
				c.set_color(colors.text_soft2)
			c.draw_line(p.x, c.height, p.x, p.y)
			v *= r.feedback
			t += r.delay
		c.set_line_width(1)

	func override on_draw(c: Painter)
	
		c.set_line_width(1)
		for r in config.refl
			draw_hull_curve(c, r)
			draw_peaks(c, r)
	
		# points
		for r,i in config.refl
			complex z
			z.x = r.delay
			z.y = r.volume
			draw_point2(c, z, i == selected, i == hover)
	
		if hover >= 0
			draw_details(c, config.refl[hover])
			
	func draw_details(p: Painter, r: MultiEcho.Config.Reflector)
		p.set_font_size(8)
		p.set_color(colors.text_soft2)
		float x = x_axis.project(r.delay)
		float y = y_axis.project(r.volume)
		
		p.draw_str(x - 20, y - 50, "delay: {{r.delay * 1000|.0}} ms")
		p.draw_str(x - 20, y - 35, "volume: {{r.volume * 100.0|.0}} %")
		p.draw_str(x - 20, y - 20, "feedback: {{r.feedback * 100|.1}} %")

	# left button down -> select
	func override on_left_button_down()
		selected = hover
		redraw()

	# [Delete] -> remove point
	func override on_key_down()
		if hui.get_event().key == KEY_DELETE
			on_delete_reflection()

	func on_delete_reflection()
		if selected >= 0
			config.refl.remove(selected)
			cp.changed()
			selected = -1
			hover = -1
			redraw()

	func override on_right_button_down()
		hover = get_hover()
		if hover >= 0
			menu_point.popup(panel)
		else
			menu_bg.popup(panel)
	
	func on_add_reflection()
		MultiEcho.Config.Reflector r
		r.delay = max(get_mouse2().x, 0.001)
		r.volume = get_mouse2().y
		r.feedback = 0.5
		config.refl.add(r)
		cp.changed()
		selected = len(config.refl) - 1
		redraw()

	func get_hover() -> int
		for r,i in config.refl
			complex z
			z.x = r.delay
			z.y = r.volume
			complex p = project2(z)
			if (mx > p.x - 5) and (mx < p.x + 5) and (my > p.y - 5) and (my < p.y + 5)
				return i
		return -1

	func override on_mouse_move()
		# move
		if hui.get_event().button_l and (selected >= 0)
			config.refl[selected].delay = max(get_mouse2().x, 0.001)
			config.refl[selected].volume = max(get_mouse2().y, 0)
			cp.changed()
		else
			hover = get_hover()
		redraw()
	
	func override on_mouse_wheel()
		if hover >= 0
			config.refl[hover].feedback *= exp(hui.get_event().scroll_y * 0.02)
			redraw()
			cp.changed()

class MultiEchoPanel extends ConfigPanel
	var override c: MultiEcho*
	var grid: MultiEchoGrid
	func override __init__(_h: Module)
		from_source("
Grid ? ''
	DrawingArea drawing '' grabfocus height=250")
	
		grid.config = &c.config
		grid.cp = &self
		grid.init(self, "drawing")
		grid.x_axis.set(0, 1, false, "s")
		grid.y_axis.set(0, 1, false, "%")
		grid.add_events()
	
		grid.redraw()
	
	func override update()
		redraw("drawing")



