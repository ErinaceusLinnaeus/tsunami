# Image = hui:copy
# Title[Deutsch] = Echo
use hui
use tsunami
use helper.grid
use helper.draw


class MultiEcho extends AudioEffect
	class Config extends Module.Config
		class Reflector
			var delay: float
			var volume: float
			var feedback: float

		var refl: Reflector[]

		func override reset()
			refl = [[0.15, 0.2, 0.5]]

	var config: Config
	
	class ReflectorState
		var buf: AudioBuffer
		var offset: int
	var refl: ReflectorState[]


	func do_delay(out b: float[], out d: float[], rs: ReflectorState, r: Config.Reflector)
		var p = rs.offset % len(d)
		for bb in b
	
			# old value
			let b0 = bb
		
			# add echo
			bb = bb + d[p] * r.volume
		
			# add to echo
			d[p] = b0 + d[p] * r.feedback
		
			p ++
			if p >= len(d)
				p = 0


	func override process(out buf: AudioBuffer)

		let n = len(config.refl)
		refl.resize(n)
		for r,i in refl
			let delay_samples = session.sample_rate() * config.refl[i].delay
			r.buf.set_channels(buf.channels)
			r.buf.resize(delay_samples)
	
			for c,k in buf.c
				do_delay(c, r.buf.c[k], r, config.refl[i])
	
			r.offset += len(buf)
	
	func override reset_state()
		refl.clear()
		on_config()



	func override create_panel() -> ConfigPanel*
		return new MultiEchoPanel(self)

class MultiEchoGrid extends Grid
	var config: MultiEcho.Config*
	var cp: ConfigPanel*
	var hover = -1
	var selected = -1
	var menu_bg: Menu*
	var menu_point: Menu*
	
	
	func mut post_init()
		menu_bg = new Menu(cp)
		menu_bg.add("add reflection", "reflection-add")
		
		menu_point = new Menu(cp)
		menu_point.add("Reflection", "label")
		menu_point.enable("label", false)
		menu_point.add("delete", "reflection-delete")
		
		x_axis.set(0, 1, false, "s")
		y_axis.set(0, 1, false, "%")
		
		cp.event("reflection-add", on_add_reflection)
		cp.event("reflection-delete", on_delete_reflection)

	func draw_hull_curve(p: Painter, r: MultiEcho.Config.Reflector, index: int)
		let col = cool_color(index)
		#if hover
		#	col2 = colors.hoverify(col2)
			
		var v = r.volume
		var t = r.delay
		p.set_line_width(2)
		let dt = 0.02
		let dv = pow(r.feedback, dt/r.delay)
		let n = min(100, int(x_axis.val_max/dt + 1))
		var cc: vec2[]
		for i in 0:n
			cc.add(project2(vec2(t, v)))
			v *= dv
			t += dt
		p.set_color(col)
		p.set_line_dash([5.0, 2.0])
		p.draw_lines(cc)
		p.set_line_dash([5.0, 0.0])
		
		cc.add([p.width,p.height])
		cc.add([cc[0].x,p.height])
		p.set_color(col.with_alpha(0.2))
		p.draw_polygon(cc)
	
	func draw_peaks(c: Painter, r: MultiEcho.Config.Reflector, index: int)
		let col = cool_color(index)
		var v = r.volume
		var t = r.delay
		let n = min(100, int(x_axis.val_max/r.delay))
		c.set_line_width(1.5)
		for i in 0:n
			c.set_color(col)
			let p = project2(vec2(t, v))
			if i == 0
				if index == hover
					c.set_color(colors.hoverify(col))
				c.draw_circle(p, 4.0)
				c.set_line_width(2.0)
			else
				c.draw_circle(p, 3.0)
				c.set_color(col.with_alpha(0.3))
				c.set_line_width(1.5)
			c.draw_line([p.x, c.height], p)
			v *= r.feedback
			t += r.delay
		c.set_line_width(1)

	func override on_draw(c: Painter)
	
		c.set_line_width(1)
		for r,i in config.refl
			draw_hull_curve(c, r, i)
			draw_peaks(c, r, i)
	
		# points
		#for r,i in config.refl
		#	let z = vec2(r.delay, r.volume)
		#	draw_point2(c, z, i == selected, i == hover)
	
		if hover >= 0
			draw_details(c, config.refl[hover])
			
	func draw_details(p: Painter, r: MultiEcho.Config.Reflector)
		p.set_font_size(8)
		p.set_color(colors.text_soft2)
		let x = x_axis.project(r.delay)
		let y = y_axis.project(r.volume)
		
		p.draw_str([x - 20, y - 50], "delay: {{r.delay * 1000|.0}} ms")
		p.draw_str([x - 20, y - 35], "volume: {{r.volume * 100.0|.0}} %")
		p.draw_str([x - 20, y - 20], "feedback: {{r.feedback * 100|.1}} %")

	# left button down -> select
	func override on_left_button_down()
		selected = hover
		redraw()

	# [Delete] -> remove point
	func override on_key_down()
		if hui.get_event().key == KEY_DELETE
			on_delete_reflection()

	func mut on_delete_reflection()
		if selected >= 0
			config.refl.remove(selected)
			cp.changed()
			selected = -1
			hover = -1
			redraw()

	func override on_right_button_down()
		hover = get_hover()
		if hover >= 0
			menu_point.popup(panel)
		else
			menu_bg.popup(panel)
	
	func mut on_add_reflection()
		var r: MultiEcho.Config.Reflector
		r.delay = max(get_mouse2().x, 0.001)
		r.volume = get_mouse2().y
		r.feedback = 0.5
		config.refl.add(r)
		cp.changed()
		selected = len(config.refl) - 1
		redraw()

	func get_hover() -> int
		for r,i in config.refl
			let z = vec2(r.delay, r.volume)
			let p = project2(z)
			if len(m - p) < 5
				return i
		return -1

	func override on_mouse_move()
		# move
		if hui.get_event().button_l and (selected >= 0)
			config.refl[selected].delay = max(get_mouse2().x, 0.001)
			config.refl[selected].volume = max(get_mouse2().y, 0)
			cp.changed()
		else
			hover = get_hover()
		redraw()
	
	func override on_mouse_wheel()
		if hover >= 0
			config.refl[hover].feedback *= exp(hui.get_event().scroll.y * 0.02)
			redraw()
			cp.changed()

class MultiEchoPanel extends ConfigPanel
	var override c: MultiEcho*
	var grid: MultiEchoGrid
	func override __init__(_h: Module)
		from_source("
Grid ? ''
	DrawingArea drawing '' grabfocus expandx expandy")
	
		grid.config = &c.config
		grid.cp = &self
		grid.init(self, "drawing")
		grid.post_init()
	
		grid.redraw()
	
	func override update()
		redraw("drawing")



