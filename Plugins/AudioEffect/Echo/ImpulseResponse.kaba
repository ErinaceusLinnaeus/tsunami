use "../../api.kaba"

const string AUTO_CONFIG_SAMPLE = ""

// TODO: cache FFT(h)...
// needs to be recreated when buf.length changes

void fold(float[] x, float[] h, complex[] HH, float[] result)
	int N = x.num
	int K = h.num
	
	// fft of input
	float[] xx = x
	xx.resize(N + K)
	complex[] XX
	fft_r2c(xx, XX)
	
	// fft of kernel
	if HH.num != (N+K)/2+1
		//print("recalc HH")
		float[] hh = h
		hh.resize(N + K)
		fft_r2c(hh, HH)
	
	// convolution
	XX *= HH
	result.resize(N + K)
	fft_c2r_inv(XX, result)
	result /= N + K
	

void test()
	print("--------test")
	float[] x = [1.0, 1.0, 0.0, 1.0]
	float[] h = [0.5, 0.5, 0.0, 0.0]
	float[] result
	complex[] HH
	fold(x, h, HH, result)
	print(result)

class Config extends PluginData
	SampleRef* sample
	override void __init__()
		sample = nil
	override void reset()
		if sample
			delete sample
		sample = nil


class Folding extends AudioEffect
	Config config

	float[] h
	complex[] HH
	
	float[] overlapr
	float[] overlapl
	
	override void on_config()
		if config.sample
			h = config.sample.buf.r
		else
			h = [1.0]
		reset_state()
	
	override void process(AudioBuffer buf)
		if !config.sample
			return
		
		// apply
		do(buf.r, overlapr)
		if buf.channels > 1
			do(buf.l, overlapl)
	
	override void reset_state()
		overlapr.clear()
		overlapl.clear()
		HH.clear()
	
	void do(float[] buf, float[] overlap)
		float[] y
		int N = buf.num
		int K = h.num
		
		float[] ttt
		fold(buf, h, HH, ttt)
		
		if overlap.num < N
			overlap.resize(N)
		
		buf = ttt[:N]
		buf += overlap // [:N]
		
		// overlap = overlap[:-N]
		for i in N:overlap.num
			overlap[i-N] = overlap[i]
		overlap.resize(overlap.num - N)
		
		overlap.resize(K)
		overlap += ttt[N:]
