# Image = hui:properties
# Title[Deutsch] = Equalizer
use hui
use tsunami
use helper.grid
use helper.tone.kaba
use helper.filter
use helper.curves



const MIN_FREQ = 20.0
const MAX_FREQ = 20000.0
const MIN_VOL = -55
const MAX_VOL = 35


class Peak
	var enabled: bool
	var mode: int
	var pitch: float
	var gain: float
	var q: float
	func __init__(_mode: int, _pitch: float, _gain: float, _q: float)
		enabled = true
		mode = _mode
		pitch = _pitch
		gain = _gain
		q = _q
	
	func const z(g0: float) -> vec2
		return [pitch_to_freq(pitch), gain + g0]
	#float q()
		# ~ (f1 - f0) / f0 = f1/f0 - 1
	#	return pow(2, width/12) - 1
	
	func const create_filter(out f: BiquadFilter, sample_rate: float)
		float freq = pitch_to_freq(pitch)
		f.create(mode, freq, q, gain, sample_rate)


class EqCurve extends Curve
	var gain: float
	var peaks: Peak[]
	var sample_rate: float
	func set(c: Equalizer.Config, _sample_rate: float)
		gain = c.gain
		peaks = c.peaks
		sample_rate = _sample_rate
	func override get(freq: float) -> float
		#float pitch = freq_to_pitch(f)
		float r = gain
		for p in peaks
			if p.enabled
				BiquadFilter f
				p.create_filter(f, sample_rate)
				r += f.params.gain(freq, sample_rate)#p.dgain(pitch)
		return r



class Equalizer extends AudioEffect
	class Config extends Module.Config
		var gain: float
		var peaks: Peak[]

		func override reset()
			gain = 0
			peaks.clear()
			peaks.add(Peak(FILTER_HIGH_PASS, 30, -10, 2))
			peaks.add(Peak(FILTER_LOW_PASS, 100, -10, 2))

	var grid: EqualizerGrid* = nil

	var config: Config

	var filter: BiquadFilter[]
	
	func override on_config()
		filter.clear()
		filter.resize(len(config.peaks))
		for p,stage in config.peaks
			p.create_filter(filter[stage], session.sample_rate())
	
	func override reset_state()
		for f in filter
			f.reset()

	func override process(out buf: AudioBuffer)
		# global gain
		buf.scale(db_to_factor(config.gain))
		
		# eq
		for f in filter
			f.apply(buf)
		
		# visualization
		if grid
			grid.set_buffer(buf)

	func override create_panel() -> ConfigPanel*
		return new EqualizerPanel(self)


const HOVER_NONE = -1
const HOVER_GAIN = -2

class EqualizerGrid extends Grid
	var c: Equalizer.Config*
	var cp: EqualizerPanel*
	var sample_rate: float
	var hover = HOVER_NONE
	var selected = HOVER_NONE
	var spectrum: SpectrumCurve
	
	var menu: Menu* = nil
	
	func override __delete__()
		if menu
			del menu
	func init2()
		panel.event_o("add-peak", self, on_add_peak)
		panel.event_o("add-low-pass", self, on_add_peak)
		panel.event_o("add-high-pass", self, on_add_peak)
		panel.event_o("add-low-shelf", self, on_add_peak)
		panel.event_o("add-high-shelf", self, on_add_peak)
		panel.event_o("peak-toggle-enabled", self, on_peak_toggle_enabled)
		panel.event_o("peak-delete", self, on_peak_delete)

	func override on_draw(p: Painter)
		draw_curve_c(p, spectrum, false)
	
		# curve + area below
		EqCurve curve
		curve.set(*c, sample_rate)
		draw_curve_c(p, curve, true)
		
		# gain base-line
		float y = y_axis.project(c.gain)
		p.set_line_width(2)
		p.set_color(colors.text_soft2)
		p.set_line_dash([8.0,5.0])
		p.draw_line([0,y], [p.width,y])
		p.set_line_dash([8.0,0.0])
	
		# points
		for pk,i in c.peaks
			var pp = project2(pk.z(c.gain))
			
			p.set_line_width(2)
			color col = point_color(i == selected, i == hover)
			color col2 = col
			col2.a = 0.6
			p.set_color(col2)
			p.draw_line([pp.x, 0], [pp.x, p.height])
			
			p.set_font_size(12)
			draw_boxed_str(p, [pp.x-5, 10], str(i+1), col_text, colors.text_soft3)
			
			draw_point2(p, pk.z(c.gain), i == selected, i == hover)
			if i == hover
				p.set_font_size(8)
				p.set_color(col_hover)
				p.draw_str([pp.x - 20, pp.y - 65], filter_name(pk.mode))
				p.draw_str([pp.x - 20, pp.y - 50], "{{pitch_to_freq(pk.pitch)|.1}} Hz")
				p.draw_str([pp.x - 20, pp.y - 35], "{{pk.gain|.1}} dB")
				p.draw_str([pp.x - 20, pp.y - 20], "Q {{pk.q|.1}}")
		if hover == HOVER_GAIN
			p.set_font_size(8)
			p.set_color(col_hover)
			p.draw_str([m.x - 20, y_axis.project(c.gain) - 20], "Gain {{c.gain|.1}} dB")
			

	# left button down -> select
	func override on_left_button_down()
		selected = hover
		redraw()

	func override on_mouse_wheel()
		float dy = hui.get_event().scroll.y
		if hover >= 0
			if dy > 0
				c.peaks[hover].q *= 1.04
			else
				c.peaks[hover].q /= 1.04
			cp.changed()
			redraw()
	
	var right_click_mouse_pos: vector

	# right button down -> new point
	func override on_right_button_down()
		right_click_mouse_pos = get_mouse3(0)
		if menu
			del menu
		
		selected = hover
		
		menu = new Menu(cp)
		if selected >= 0
			if c.peaks[selected].enabled
				menu.add("disable", "peak-toggle-enabled")
			else
				menu.add("enable", "peak-toggle-enabled")
			menu.add("delete", "peak-delete")
		else
			menu.add("add Peak", "add-peak")
			menu.add("add Low Pass", "add-low-pass")
			menu.add("add High Pass", "add-high-pass")
			menu.add("add Low Shelf", "add-low-shelf")
			menu.add("add High Shelf", "add-high-shelf")
		menu.popup(panel)
	
	# hui events
	func on_add_peak()
		string id = hui.get_event().id
		int t = FILTER_PEAK
		if id == "add-low-pass"
			t = FILTER_LOW_PASS
		if id == "add-high-pass"
			t = FILTER_HIGH_PASS
		if id == "add-low-shelf"
			t = FILTER_LOW_SHELF
		if id == "add-high-shelf"
			t = FILTER_HIGH_SHELF
		vector m = right_click_mouse_pos
		c.peaks.add(Peak(t, freq_to_pitch(m.x), m.y - c.gain, 2))
		selected = len(c.peaks) - 1
		hover = selected
		cp.changed()
		redraw()
	
	func on_peak_toggle_enabled()
		if selected >= 0
			c.peaks[selected].enabled = not c.peaks[selected].enabled
			cp.changed()
			redraw()
	func on_peak_delete()
		if selected >= 0
			c.peaks.remove(selected)
			cp.changed()
			hover = HOVER_NONE
			selected = hover
			redraw()

	func override on_mouse_move()
		# move
		if hui.get_event().button_l
			if selected >= 0
				c.peaks[selected].pitch = freq_to_pitch(get_mouse2().x)
				c.peaks[selected].gain = get_mouse2().y - c.gain
				cp.changed()
			else if selected == HOVER_GAIN
				c.gain = get_mouse2().y
				cp.changed()
		else
		# mouse over?
			hover = -1
			if abs(m.y - y_axis.project(c.gain)) < 10
				hover = HOVER_GAIN
			for i in 0:len(c.peaks)
				if mouse_over_point2(c.peaks[i].z(c.gain))
					hover = i
		redraw()

	# [Delete] -> remove point
	func override on_key_down()
		if hui.get_event().key == KEY_DELETE
			on_peak_delete()

	func set_buffer(buf: AudioBuffer)
		spectrum.set(buf, sample_rate)
		redraw()

class EqualizerPanel extends ConfigPanel
	var grid: EqualizerGrid
	var num_peaks: int
	var override c: Equalizer*
	func override __init__(_eq: Module)
		super.__init__(_eq)
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_drawing_area("!grabfocus,height=100,expandy", 0, 0, "drawing")
	
		grid.init(self, "drawing")
		grid.init2()
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp = &self
		grid.c = &c.config
		grid.sample_rate = c.session.sample_rate()
		num_peaks = 0
		
		c.grid = &grid
	
	func override __delete__()
		c.grid = nil
		
	func override update()
		grid.redraw()


