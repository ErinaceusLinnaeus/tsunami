// Image = hui:properties
// Title[Deutsch] = Equalizer

use "../../api.kaba"
use "../../helper/grid.kaba"
use "../../helper/tone.kaba"
use "../../helper/filter.kaba"
use "../../helper/curves.kaba"



const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int MIN_VOL = 0-55
const int MAX_VOL = 35


class Peak
	bool enabled
	int mode
	float pitch
	float gain
	float q
	void __init__(int _mode, float _pitch, float _gain, float _q)
		enabled = true
		mode = _mode
		pitch = _pitch
		gain = _gain
		q = _q
	
	complex z(float g0)
		complex r
		r.x = pitch_to_freq(pitch)
		r.y = gain + g0
		return r
	//float q()
		// ~ (f1 - f0) / f0 = f1/f0 - 1
	//	return pow(2, width/12) - 1
	
	void create_filter(Filter f, float sample_rate)
		float freq = pitch_to_freq(pitch)
		f.create(mode, freq, q, gain, sample_rate)


class EqCurve extends Curve
	float gain
	Peak[] peaks
	float sample_rate
	void set(Config c, float _sample_rate)
		gain = c.gain
		peaks = c.peaks
		sample_rate = _sample_rate
	override float get(float freq)
		/*float pitch = freq_to_pitch(f)*/
		float r = gain
		for p in peaks
			if p.enabled
				Filter f
				p.create_filter(f, sample_rate)
				r += f.l.f.gain(freq)//p.dgain(pitch)
		return r


class Config extends PluginData
	float gain
	Peak[] peaks

	override void reset()
		gain = 0
		peaks.clear()
		peaks.add(Peak(FILTER_HIGH_PASS, 30, -10, 2))
		peaks.add(Peak(FILTER_LOW_PASS, 100, -10, 2))

class Equalizer extends AudioEffect

	EqualizerGrid *grid

	Config config

	Filter[] filter // state
	
	override void __init__()
		grid = nil
	
	override void on_config()
		filter.clear()
		filter.resize(len(config.peaks))
		for p,stage in config.peaks
			p.create_filter(filter[stage], session.sample_rate())
	
	override void reset_state()
		for f in filter
			f.reset()

	override void process(AudioBuffer buf)
		// global gain
		buf.scale(db_to_factor(config.gain))
		
		// eq
		for f in filter
			f.apply(buf)
		
		// visualization
		if grid
			grid.set_buffer(buf)

	override ConfigPanel *create_panel()
		return new EqualizerPanel(self)


const int HOVER_NONE = 0-1
const int HOVER_GAIN = 0-2

class EqualizerGrid extends Grid
	Config *c
	EqualizerPanel *cp
	float sample_rate
	int hover, selected
	SpectrumCurve spectrum
	
	Menu* menu
	
	
	override void __init__()
		hover = HOVER_NONE
		selected = hover
		menu = nil
	override void __delete__()
		if menu
			delete menu
	void init2()
		panel.event_o("add-peak", self, &on_add_peak)
		panel.event_o("add-low-pass", self, &on_add_peak)
		panel.event_o("add-high-pass", self, &on_add_peak)
		panel.event_o("add-low-shelf", self, &on_add_peak)
		panel.event_o("add-high-shelf", self, &on_add_peak)
		panel.event_o("peak-toggle-enabled", self, &on_peak_toggle_enabled)
		panel.event_o("peak-delete", self, &on_peak_delete)

	override void on_draw(Painter *p)
		draw_curve_c(p, spectrum, false)
	
		// curve + area below
		EqCurve curve
		curve.set(*c, sample_rate)
		draw_curve_c(p, curve, true)
		
		// gain base-line
		float y = y_axis.project(c.gain)
		p.set_line_width(2)
		p.set_color(colors.text_soft2)
		p.set_line_dash([8.0,5.0])
		p.draw_line(0,y, p.width,y)
		p.set_line_dash([8.0,0.0])
	
		// points
		for pk,i in c.peaks
			complex pp = project2(pk.z(c.gain))
			
			p.set_line_width(2)
			color col = point_color(i == selected, i == hover)
			color col2 = col
			col2.a = 0.6
			p.set_color(col2)
			p.draw_line(pp.x, 0, pp.x, p.height)
			
			p.set_font_size(12)
			draw_boxed_str(p, pp.x-5, 10, (i+1), col_text, colors.text_soft3)
			
			draw_point2(p, pk.z(c.gain), i == selected, i == hover)
			if i == hover
				p.set_font_size(8)
				p.set_color(col_hover)
				p.draw_str(pp.x - 20, pp.y - 65, filter_name(pk.mode))
				p.draw_str(pp.x - 20, pp.y - 50, pitch_to_freq(pk.pitch).str2(1) + " Hz")
				p.draw_str(pp.x - 20, pp.y - 35, pk.gain.str2(1) + " dB")
				p.draw_str(pp.x - 20, pp.y - 20, "Q " + pk.q.str2(1))
		if hover == HOVER_GAIN
			p.set_font_size(8)
			p.set_color(col_hover)
			p.draw_str(mx - 20, y_axis.project(c.gain) - 20, "Gain " + c.gain.str2(1) + " dB")
			

	// left button down -> select
	override void on_left_button_down()
		selected = hover
		redraw()

	override void on_mouse_wheel()
		float dy = HuiGetEvent().scroll_y
		if hover >= 0
			if dy > 0
				c.peaks[hover].q *= 1.04
			else
				c.peaks[hover].q /= 1.04
			cp.changed()
			redraw()
	
	vector right_click_mouse_pos

	// right button down -> new point
	override void on_right_button_down()
		right_click_mouse_pos = get_mouse3(0)
		if menu
			delete menu
		
		selected = hover
		
		menu = new Menu()
		if selected >= 0
			if c.peaks[selected].enabled
				menu.add("disable", "peak-toggle-enabled")
			else
				menu.add("enable", "peak-toggle-enabled")
			menu.add("delete", "peak-delete")
		else
			menu.add("add Peak", "add-peak")
			menu.add("add Low Pass", "add-low-pass")
			menu.add("add High Pass", "add-high-pass")
			menu.add("add Low Shelf", "add-low-shelf")
			menu.add("add High Shelf", "add-high-shelf")
		menu.popup(panel)
	
	// hui events
	void on_add_peak()
		string id = HuiGetEvent().id
		int t = FILTER_PEAK
		if id == "add-low-pass"
			t = FILTER_LOW_PASS
		if id == "add-high-pass"
			t = FILTER_HIGH_PASS
		if id == "add-low-shelf"
			t = FILTER_LOW_SHELF
		if id == "add-high-shelf"
			t = FILTER_HIGH_SHELF
		vector m = right_click_mouse_pos
		c.peaks.add(Peak(t, freq_to_pitch(m.x), m.y - c.gain, 2))
		selected = c.peaks.num - 1
		hover = selected
		cp.changed()
		redraw()
	
	void on_peak_toggle_enabled()
		if selected >= 0
			c.peaks[selected].enabled = !c.peaks[selected].enabled
			cp.changed()
			redraw()
	void on_peak_delete()
		if selected >= 0
			c.peaks.remove(selected)
			cp.changed()
			hover = HOVER_NONE
			selected = hover
			redraw()

	override void on_mouse_move()
		// move
		if HuiGetEvent().button_l
			if selected >= 0
				c.peaks[selected].pitch = freq_to_pitch(get_mouse2().x)
				c.peaks[selected].gain = get_mouse2().y - c.gain
				cp.changed()
			else if selected == HOVER_GAIN
				c.gain = get_mouse2().y
				cp.changed()
		else
		// mouse over?
			hover = -1
			if abs(my - y_axis.project(c.gain)) < 10
				hover = HOVER_GAIN
			for i in 0:c.peaks.num
				if mouse_over_point2(c.peaks[i].z(c.gain))
					hover = i
		redraw()

	// [Delete] -> remove point
	override void on_key_down()
		if HuiGetEvent().key_code == KEY_DELETE
			on_peak_delete()

	void set_buffer(AudioBuffer buf)
		spectrum.set(buf, sample_rate)
		redraw()

class EqualizerPanel extends ConfigPanel
	EqualizerGrid grid
	int num_peaks
	override Equalizer *c
	override void __init__(Module *_eq)
		super.__init__(_eq)
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_drawing_area("!grabfocus,height=250", 0, 0, "drawing")
	
		grid.init(self, "drawing")
		grid.init2()
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp = self
		grid.c = &c.config
		grid.sample_rate = c.session.sample_rate()
		num_peaks = 0
		
		c.grid = &grid
	
	override void __delete__()
		c.grid = nil
		
	override void update()
		grid.redraw()


