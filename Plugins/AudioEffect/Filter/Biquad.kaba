use hui
use "../../api.kaba"
use "../../helper/grid.kaba"
use "../../helper/tone.kaba"
use "../../helper/filter.kaba"
use "../../helper/curves.kaba"



const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int MIN_VOL = -55
const int MAX_VOL = 35



class Biquad extends AudioEffect
	class Config extends Module.Config
		float a1, a2
		float b0, b1, b2

		override void reset()
			a1 = 0
			a2 = 0
			b0 = 1
			b1 = 0
			b2 = 0

		void create_filter(BiquadFilter.Parameters p)
			p.a[1] = a1
			p.a[2] = a2
			p.b[0] = b0
			p.b[1] = b1
			p.b[2] = b2

		void from_filter(BiquadFilter.Parameters p)
			a1 = p.a[1]
			a2 = p.a[2]
			b0 = p.b[0]
			b1 = p.b[1]
			b2 = p.b[2]
		

	Config config

	BiquadGrid *grid

	BiquadFilter filter # state
	
	override void __init__()
		grid = nil
	
	override void on_config()
		config.create_filter(filter.params)
	
	override void reset_state()
		filter.reset()

	override void process(AudioBuffer buf)
		filter.apply(buf)

	override ConfigPanel *create_panel()
		return new BiquadPanel(self)


class BiquadGrid extends Grid
	Biquad.Config* c
	BiquadPanel* cp
	float sample_rate
	SpectrumCurve spectrum
	
	
	override void __init__()
	override void __delete__()

	override void on_draw(Painter p)
		draw_curve_c(p, spectrum, false)
	
		# curve + area below
		BiquadGainCurve gain
		c.create_filter(gain.filter.params)
		gain.sample_rate = sample_rate
		draw_curve_c(p, gain, true)
	
		# curve + area below
		BiquadPhaseShiftCurve phase
		c.create_filter(phase.filter.params)
		phase.sample_rate = sample_rate
		draw_curve_c(p, phase, false)


	void set_buffer(AudioBuffer buf)
		spectrum.set(buf, sample_rate)
		redraw()

	override void on_right_button_down()
		let dlg = new PresetDialog(cp)
		dlg.run()
		del dlg

class BiquadPanel extends ConfigPanel
	BiquadGrid grid
	override Biquad* c
	override void __init__(Module _biquad)
		super.__init__(_biquad)
		from_source("
Grid ? '' vertical
	DrawingArea drawing '' grabfocus expandy
	Grid ? ''
		Label ? 'a'
		.
		SpinButton a1 '' range=-100:100:0.01
		SpinButton a2 '' range=-100:100:0.01
		---|
		Label ? 'b'
		SpinButton b0 '' range=-100:100:0.01
		SpinButton b1 '' range=-100:100:0.01
		SpinButton b2 '' range=-100:100:0.01")
	
		grid.init(self, "drawing")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
		
		grid.cp = &self
		grid.c = &c.config
		grid.sample_rate = c.session.sample_rate()
		
		c.grid = &grid
		
		let ids = ["a1", "a2", "b0", "b1", "b2"]
		for id in ids
			event(id, on_change)
	
	override void __delete__()
		c.grid = nil
		
	override void update()
		set_float("a1", c.config.a1)
		set_float("a2", c.config.a2)
		set_float("b0", c.config.b0)
		set_float("b1", c.config.b1)
		set_float("b2", c.config.b2)
		grid.redraw()
	
	void on_change()
		c.config.a1 = get_float("a1")
		c.config.a2 = get_float("a2")
		c.config.b0 = get_float("b0")
		c.config.b1 = get_float("b1")
		c.config.b2 = get_float("b2")
		c.changed()

class PresetDialog extends Dialog
	BiquadPanel *bp
	void __init__(BiquadPanel* _p)
		super.__init__("preset", 400, 100, _p.win, false)
		bp = _p
		from_source("
Grid ? '' vertical
	Grid ? ''
		Label ? 'Type'
		ComboBox type 'Low Pass\\Hight Pass\\Low Shelf\\Hight Shelf\\Peak\\All Pass' expandx
		---|
		Label ? 'Frequency'
		SpinButton frequency '440' range=1:10000:0.1
		Label ? Hz
		---|
		Label ? 'Q'
		SpinButton q '10' range=0:100:0.01
		---|
		Label ? 'Gain'
		SpinButton gain '1' range=-30:30:0.1
		Label ? dB
	Grid ? '' buttonbar
		Button apply 'Apply'
")
		event("apply", on_apply)
	void on_apply()
		BiquadFilter.Parameters p
		float sample_rate = bp.c.session.sample_rate()
		int t = get_int("type")
		float freq = get_float("frequency")
		float q = get_float("q")
		float gain = get_float("gain")
		if t == 0
			p.create_low_pass(freq, q, sample_rate)
		else if t == 1
			p.create_high_pass(freq, q, sample_rate)
		else if t == 2
			p.create_low_shelf(freq, q, gain, sample_rate)
		else if t == 3
			p.create_high_shelf(freq, q, gain, sample_rate)
		else if t == 4
			p.create_peak(freq, q, gain, sample_rate)
		else if t == 5
			p.create_all_pass(freq, q, sample_rate)
		bp.c.config.from_filter(p)
		bp.c.changed()
		bp.update()

