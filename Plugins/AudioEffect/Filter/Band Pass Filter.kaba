# Image = hui:properties
# Title[Deutsch] = Band Pass Filter
use tsunami

const AUTO_CONFIG_FREQUENCY = "0:5000:0.1:1:Hz"


class LowPassFilter extends AudioEffect
	class Config extends Module.Config
		var frequency: float
		func override reset()
			frequency = 1000

	var config: Config
	
	
	var _in, _out: float[]
	var used: bool[]
	
	func override reset_state()
		used[0] = false
		used[1] = false


	# y[i] := α * (y[i-1] + x[i] - x[i-1])
	# z[i] := α * x[i] + (1-α) * z[i-1]
	
	func mut do(out buf: float[], c: int)
		float RC = 1 / (2 * pi * config.frequency)
		float dt = 1.0 / session.sample_rate()
		float aa = dt / (RC + dt)
		float bb = 1 - aa
		float prev_in = 0
		if used[c]
			float t = buf[0]
			buf[0] = bb * (buf[0] + _out[c] - _in[c])
			prev_in = t
			#buf.r[0] = aa * buf.r[0] + bb * state.out_r
		
		# y[i] := b * (y[i-1] + x[i] - x[i-1])
		# z[i] := α * y[i] + b * z[i-1]
	
		for i in 1:len(buf)
			float t = buf[i]
			buf[i] = bb * (buf[i] + buf[i-1] - prev_in)
			prev_in = t
			#buf[i] = aa * buf[i] + bb * buf[i-1]
		
		used[c] = true
		_in[c] = prev_in
		_out[c] = buf[len(buf) - 1]
		
	func override process(out buf: AudioBuffer)
		_in.resize(buf.channels)
		_out.resize(buf.channels)
		used.resize(buf.channels)
		for c,i in buf.c
			do(c, i)
