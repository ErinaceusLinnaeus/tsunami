# Image = hui:zoom-in
# Title[Deutsch] = Lautst√§rke

use tsunami


float abs_max(float[] buf)
	float m = 0.0
	for b in buf
		m = max(m, abs(b))
	return m


class Volume extends AudioEffect
	class Config extends Module.Config
		float volume
		bool maximize
	
		override void reset()
			volume = 1
			maximize = false

	Config config

	override ConfigPanel *create_panel()
		return new Volume.Panel(self)

	override void process(out AudioBuffer buf)
		float factor = config.volume
		if config.maximize
			float _max = 0
			for cc in buf.c
				_max = max(_max, abs_max(cc))
			factor = 1 / _max
		for cc in buf.c
			for b in cc
				b = clamp(b * factor, -1, 1)
	
	class Panel extends ConfigPanel
		override Volume *c
		Slider *slider
		override void __init__(Module _v)
			add_grid("!width=400", 0, 0, "table1")
			set_target("table1")
			add_check_box("Maximize", 0, 1, "max")
			add_grid("", 0, 0, "table2")
			set_target("table2")
			add_slider("!expandx", 0, 0, "volume_slider")
			add_spin_button("\\0\\1000\\0.1", 1, 0, "volume")
			add_label("%", 2, 0, "")
		
			slider = new Slider(self, "volume_slider", "volume", 0, 2, 100, on_volume, c.config.volume)
	
			event("max", on_max)
	
		override void __delete__()
			del slider

		override void update()
			slider.set(c.config.volume)
			check("max", c.config.maximize)
			enable("volume", !c.config.maximize)
			enable("volume_slider", !c.config.maximize)

		void on_max()
			c.config.maximize = is_checked("max")
			enable("volume", !c.config.maximize)
			enable("volume_slider", !c.config.maximize)
			changed()

		void on_volume()
			c.config.volume = slider.get()
			changed()

