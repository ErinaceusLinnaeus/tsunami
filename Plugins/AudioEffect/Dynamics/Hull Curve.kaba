# Image = hui:zoom-in
# Title[Deutsch] = HÃ¼llkurve
use hui
use tsunami
use helper.grid



const MIN_VOL = -55
const MAX_VOL = 35



class HullCurve extends AudioEffect
	class Config extends Module.Config
		var curve: complex[]

		func const fill_inter(out fi: FloatInterpolator)
			fi.set_type("cubic-spline-notang")
			fi.add(curve[0].y, 0)
			for i in 1:len(curve)
				fi.add(curve[i].y, curve[i].x - curve[i - 1].x)
			fi.normalize()

		func override reset()
			curve.clear()
			curve.add(complex(0, 0))
			curve.add(complex(1, 0))


	var config: Config

	func hull(out b: float[])
	
		FloatInterpolator fi
		config.fill_inter(fi)
	
		# hull curve
		for i in 1:len(b)
			float param = float(i) / len(b)
			float db = fi.get(param)
			b[i] = b[i] * pow(10, db / 20)

	func override process(out buf: AudioBuffer)
		for c in buf.c
			hull(c)

	func override create_panel() -> ConfigPanel*
		return new HullCurvePanel(self)

class HullGrid extends Grid
	var config: HullCurve.Config*
	var cp: ConfigPanel*
	var hover, selected: int

	func override on_draw(c: Painter)
	
		# curve + area below
		FloatInterpolator fi
		config.fill_inter(fi)
		draw_curve(c, fi, true)
	
		# points
		for i in 0:len(config.curve)
			draw_point2(c, config.curve[i], i == selected, i == hover)

	# left button down -> select
	func override on_left_button_down()
		selected = hover
		redraw()

	# [Delete] -> remove point
	func override on_key_down()
		if hui.get_event().key == KEY_DELETE
			if selected > 0 and selected < len(config.curve)-1
				config.curve.remove(selected)
				cp.changed()
				selected = -1
				redraw()

	# right button down -> new point
	func override on_right_button_down()
		for i in 1:len(config.curve)
			complex q = project2(config.curve[i - 1])
			complex p = project2(config.curve[i])
			if (mx > q.x) and (mx < p.x)
				config.curve.insert(get_mouse2(), i)
				cp.changed()
				selected = i
				redraw()
				i = len(config.curve)
				break

	func override on_mouse_move()
		# move
		if hui.get_event().button_l and (selected >= 0)
			config.curve[selected] = get_mouse2()
			float xmin = 0
			float xmax = 1
			if selected > 0
				xmin = config.curve[selected - 1].x
			if selected < len(config.curve) - 1
				xmax = config.curve[selected + 1].x
			config.curve[selected].x = clamp(config.curve[selected].x, xmin, xmax)
			config.curve[selected].y = clamp(config.curve[selected].y, MIN_VOL, MAX_VOL)
			if selected == len(config.curve) - 1
				config.curve[selected].x = 1
			if selected == 0
				config.curve[selected].x = 0
			cp.changed()
		else
		# mouse over?
			hover = -1
			for c,i in config.curve
				complex p = project2(c)
				if (mx > p.x - 5) and (mx < p.x + 5) and (my > p.y - 5) and (my < p.y + 5)
					hover = i
		redraw()

class HullCurvePanel extends ConfigPanel
	var grid: HullGrid
	var override c: HullCurve*
	func override __init__(_h: Module)
		from_source("
Grid ? '' vertical
	DrawingArea drawing '' grabfocus height=250
	Grid ? '' noexpandy
		ComboBox type 'linear\\log'
		CheckBox preview 'show buffer'")
	
		#EventMX("drawing", "hui:draw", self, &OnDraw)
	
		grid.config = &c.config
		grid.cp = &self
		grid.init(self, "drawing")
		grid.x_axis.set(0, 1, false, "")
		grid.y_axis.set(MIN_VOL, MAX_VOL, false, "db")
	
		grid.redraw()
	
	func override update()
		redraw("drawing")

