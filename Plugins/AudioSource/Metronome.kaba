// Image = hui:add
// Title[Deutsch] = Metronom

use "../api.kaba"
use "../MidiSource/Metronome.kaba"

class MetroConfig extends PluginData
	float beats_per_minute
	float volume
	int beats_per_measure
	override void reset()
		volume = 0.3
		beats_per_minute = 90
		beats_per_measure = 4



class Metronome extends AudioSource
	MetroConfig config
	Synthesizer *synth
	MetronomeSource *source
	
	override void __init__()
		synth = nil
		source = nil
	
	void create_stuff()
		synth = CreateSynthesizer(session, "")
		source = CreateMidiSource(session, "Metronome")
		synth.plug(0, source, 0)
	
	override void __delete__()
		if source
			delete source
			delete synth

	override int read(AudioBuffer buf)
		return synth.out.read_audio(buf)
		
	override ConfigPanel *create_panel()
		//return source.create_panel()
		// how to deal with configuration/string exports...
		
		return new MetronomePanel(self)
	
	override void on_config()
		if !source
			create_stuff()
		source.config.volume = config.volume
		source.set_beats(config.beats_per_measure, 1)
		source.set_bpm(config.beats_per_minute)
	
	override void reset_state()
		if !source
			create_stuff()
		synth.reset_state()
		source.reset_state()

	
class MetronomePanel extends ConfigPanel
	override Metronome *c
	override void __init__(Module *_m)
		add_grid("!width=300", 0, 0, "table2")
		set_target("table2")
		add_label("Geschwindigkeit:", 0, 0, "")
		add_spin_button("!expandx,range=0:1000:0.1\\", 1, 0, "beats_per_minute")
		add_label("/min", 2, 0, "")
		add_label("Schläge pro Takt:", 0, 1, "")
		add_spin_button("!range=1:32:1\\", 1, 1, "beats_per_measure")
		add_label("Lautstärke:", 0, 2, "")
		add_spin_button("!range=0:100:0.1\\", 1, 2, "volume")
		add_label("%", 2, 2, "")
	
		event("beats_per_minute", &on_bpm)
		event("beats_per_measure", &on_beats)
		event("volume", &on_volume)
	
		update()

	override void update()
		set_float("beats_per_minute", c.config.beats_per_minute)
		set_int("beats_per_measure", c.config.beats_per_measure)
		set_float("volume", c.config.volume * 100)
		//SliderSet(self, "volume", c.config.volume)

	void on_bpm()
		c.config.beats_per_minute = get_float("")
		changed()

	void on_beats()
		c.config.beats_per_measure = get_int("")
		changed()

	void on_volume()
		c.config.volume = get_float("") / 100
		//m.config.volume = SliderGet(self, "volume")
		changed()

