# Image = hui:add
# Title[Deutsch] = Metronom

use tsunami
use MidiSource.Metronome




class Metronome extends AudioSource
	class Config extends Module.Config
		var beats_per_minute: float
		var volume: float
		var beats_per_measure: int
		func override reset()
			volume = 0.3
			beats_per_minute = 90
			beats_per_measure = 4

	var config: Config
	var synth: Synthesizer* = nil
	var source: MetronomeSource* = nil
	
	func create_stuff()
		synth = CreateSynthesizer(session, "")
		source = CreateMidiSource(session, "Metronome")
		synth.plug_in(0, source, 0)
	
	func override __delete__()
		if source
			del source
			del synth

	func override read(out buf: AudioBuffer) -> int
		return synth.port_out[0].read_audio(buf)
		
	func override create_panel() -> ConfigPanel*
		#return source.create_panel()
		# how to deal with configuration/string exports...
		
		return new MetronomePanel(self)
	
	func override on_config()
		if !source
			create_stuff()
		source.config.volume = config.volume
		source.set_beats(config.beats_per_measure, 1)
		source.set_bpm(config.beats_per_minute)
	
	func override reset_state()
		if not source
			create_stuff()
		synth.reset_state()
		source.reset_state()

	
class MetronomePanel extends ConfigPanel
	var override c: Metronome*
	func override __init__(_m: Module)
		add_grid("", 0, 0, "table2")
		set_target("table2")
		add_label("!right,disabled\\Speed", 0, 0, "")
		add_spin_button("!expandx,range=0:1000:0.1\\", 1, 0, "beats_per_minute")
		add_label("/min", 2, 0, "")
		add_label("!right,disabled\\Beats per bar", 0, 1, "")
		add_spin_button("!range=1:32:1\\", 1, 1, "beats_per_measure")
		add_label("!right,disabled\\Volume", 0, 2, "")
		add_spin_button("!range=0:100:0.1\\", 1, 2, "volume")
		add_label("%", 2, 2, "")
	
		event("beats_per_minute", on_bpm)
		event("beats_per_measure", on_beats)
		event("volume", on_volume)
	
		update()

	func override update()
		set_float("beats_per_minute", c.config.beats_per_minute)
		set_int("beats_per_measure", c.config.beats_per_measure)
		set_float("volume", c.config.volume * 100)
		#SliderSet(self, "volume", c.config.volume)

	func on_bpm()
		c.config.beats_per_minute = get_float("")
		changed()

	func on_beats()
		c.config.beats_per_measure = get_int("")
		changed()

	func on_volume()
		c.config.volume = get_float("") / 100
		#m.config.volume = SliderGet(self, "volume")
		changed()

