// Title[Deutsch] = Pitch Shift (chunk)

#include "api.kaba"

bool not_first_time

// IDs
enum
	HMM_CANCEL:30000
	HMM_OK
	HMM_PITCH_SLIDER
	HMM_PITCH

window PitchDialog
float Pitch
bool Cancelled

#define BUFFER_SIZE	65536
#define BUFFER_SIZE2	32770
complex buf[BUFFER_SIZE2]
complex buf2[BUFFER_SIZE2]

void PitchDialogFunction(int message)
	if message == HMM_PITCH_SLIDER
		PitchDialog.SetFloat(HMM_PITCH, PitchDialog.GetFloat(HMM_PITCH_SLIDER) * 200)
	if message == HMM_OK
		Pitch = PitchDialog.GetFloat(HMM_PITCH) * 0.01
		Cancelled = false
		HuiWinClose(PitchDialog)
	if message == HMM_CANCEL or message == HuiMsgClose
		Cancelled = true
		HuiWinClose(PitchDialog)

void shift_buf(int b[])
	int i, j, num = (sel_end - sel_start + BUFFER_SIZE - 1) / BUFFER_SIZE
	for j, 0, num
		int i0 = sel_start + BUFFER_SIZE * j
		int len = sel_end - i0
		clamp(len, 0, BUFFER_SIZE)
		fft_i2c(&b[i0], &buf[0], len)
		float f = 1.0 / len
		int i
		int ll = len / 2
		for i, 0, ll + 3
			float i_s = i2f(i) / Pitch
			int ii_s = f2i(i_s)
			float di_s = i_s - i2f(ii_s)
			if i < ll and ii_s < ll
				buf2[i] = f*(buf[ii_s])// * (1 - di_s) + buf[ii_s + 1] * di_s)
			else
				buf2[i] = complex(0, 0)
		fft_c2i_inv(&buf2[0], &b[i0], len)


void main(sTrack *t)
	if !not_first_time
		// dialog
		PitchDialog=HuiCreateDialog("Pitch Shift",305,75,MainWin,false,&PitchDialogFunction)
		PitchDialog.AddButton("Abbrechen",45,40,100,25,HMM_CANCEL)
		PitchDialog.SetImage(HMM_CANCEL,HuiImageCancel)
		PitchDialog.AddDefButton("OK",170,40,100,25,HMM_OK)
		PitchDialog.SetImage(HMM_OK,HuiImageOk)
		PitchDialog.AddSlider("",5,5,205,25,HMM_PITCH_SLIDER)
		PitchDialog.AddEdit("",215,5,50,25,HMM_PITCH)
		PitchDialog.AddText("%",270,5,30,25,-1)
		PitchDialog.Update()
		
		PitchDialog.NumFloatDecimals = 1
		PitchDialog.SetFloat(HMM_PITCH, 100)
		PitchDialog.SetFloat(HMM_PITCH_SLIDER, 0.5)
		
		HuiWaitTillWindowClosed(PitchDialog)


	if !Cancelled
		shift_buf(t.buffer_r)
		shift_buf(t.buffer_l)
		UpdatePeaks(t)
		ChangeTrack(t)
	not_first_time = true

