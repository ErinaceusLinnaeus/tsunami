use hui
use "../api"
use tone

class Curve
	color col, col_below
	void __init__()
		col = colors.text_soft1
		col_below = color(0.3, 0.3, 0.3, 1)
	virtual float get(float x)
	virtual float[] get_list(float[] xx)
		float[] r
		r.resize(xx.num)
		for x,i in xx
			r[i] = get(x)
		return r

float log2lin(float f, float f_min, float f_max)
	return exp(f * log(f_max / f_min)) * f_min

float lin2log(float f, float f_min, float f_max)
	return log(f / f_min) / log(f_max / f_min)

class GridTick
	float value, weight
	string label

class GridPartition
	GridTick[] tick

class GridAxis
	float offset, size
	rect rect
	float min_label_dist
	float val_min, val_max
	float val_min_min, val_max_max
	bool as_log
	bool freq_as_pitch
	string unit
	
	void __init__()
		freq_as_pitch = false
		set(0, 1, false, "")
	
	void set(float _val_min, float _val_max, bool _log, string _unit)
		val_min = _val_min
		val_max = _val_max
		val_min_min = _val_min
		val_max_max = _val_max
		as_log = _log
		unit = _unit
	
	float rel2val(float __v)
		if as_log
			return log2lin(__v, val_min_min, val_max_max)
		return __v * (val_max_max - val_min_min) + val_min_min
		
	float project(float __v)
		if as_log
			return lin2log(__v, val_min, val_max) * size + offset
		return ((__v - val_min) / (val_max - val_min)) * size + offset

	float unproject(float __v)
		if as_log
			return log2lin((__v - offset) / size, val_min, val_max)
		return (__v - offset) / size * (val_max - val_min) + val_min
	
	void zoom(float p, float dz)
		float m = unproject(p)
		if as_log
			val_min = clamp(exp(log(m) + (log(val_min) - log(m)) * pow(0.9, dz)), val_min_min, val_max_max)
			val_max = clamp(exp(log(m) + (log(val_max) - log(m)) * pow(0.9, dz)), val_min_min, val_max_max)
		else
			val_min = clamp(m + (val_min - m) * pow(0.9, dz), val_min_min, val_max_max)
			val_max = clamp(m + (val_max - m) * pow(0.9, dz), val_min_min, val_max_max)
		

	GridPartition get_lin_partition()
		float d = (val_max - val_min) / size * 150
		GridPartition r
		float step = 1
		float e = log(abs(abs(d))) / log(10)
		float e_floor = i2f(f2i(e))
		if e < 0
			e_floor -= 1
		step = pow(10, e_floor)
		float factor = d / step
		int decimals = f2i(max(-e_floor, 0))
		float min = i2f(f2i(val_min / step) * step)
		float max = val_max
		
		float vv = min
		while vv <= max and step > 0
			GridTick tt
			tt.value = vv
			tt.weight = 0.5
			tt.label = vv.str2(decimals)
			tt.label += " "
			tt.label += unit
			r.tick.add(tt)
			if factor < 3
				tt.value = vv + step / 2
				tt.weight = 0.2
				tt.label = ""
				r.tick.add(tt)
			vv += step
		
		return r
		
	GridPartition get_log_partition()
		float pixel_per_decade = abs(size / log(val_max / val_min)) * log(10)
		float size_param = pixel_per_decade / min_label_dist
		GridPartition r
		int e_min = log(abs(abs(val_min))) / log(10)
		int e_max = log(abs(abs(val_max))) / log(10) + 1
		for e in e_min:e_max
			float vv0 = pow(10, e)
			for i in 1:10
				float vv = vv0 * i
				if (vv >= val_min) and (vv <= val_max)
					GridTick tt
					tt.value = vv
					tt.weight = exp(-(i+1)*0.07)
					tt.label = ""
					bool show = false
					if (i == 1)
						show = true
					if (i == 3) and (size_param > 2)
						show = true
					if ((i == 2) or (i == 5)) and (size_param > 4)
						show = true
					if show
						tt.label = vv.str2(0) + " " + unit
					r.tick.add(tt)
				vv = vv0 * 1.5
				if (i == 1) and (vv >= val_min) and (vv <= val_max)
					GridTick tt
					tt.value = vv
					tt.weight = 0.2
					tt.label = ""
					r.tick.add(tt)
		return r
		
	GridPartition get_pitch_partition()
		GridPartition r
		float pitch_min = freq_to_pitch(val_min)
		float pitch_max = freq_to_pitch(val_max)
		int oct_min = pitch_get_octave(pitch_min)
		int oct_max = pitch_get_octave(pitch_max) + 1
		for o in oct_min:oct_max
			int pitch = pitch_from_octave_and_rel(0, o)
			GridTick tt
			tt.value = pitch_to_freq(pitch)
			if (tt.value >= val_min) and (tt.value <= val_max)
				tt.weight = 0.7
				tt.label = pitch_name(pitch)
				r.tick.add(tt)
			pitch = pitch_from_octave_and_rel(6, o)
			tt.value = pitch_to_freq(pitch)
			if (tt.value >= val_min) and (tt.value <= val_max)
				tt.weight = 0.4
				tt.label = ""
				r.tick.add(tt)
		return r
		
	GridPartition get_partition()
		if as_log
			if freq_as_pitch
				return get_pitch_partition()
			return get_log_partition()
		return get_lin_partition()

class GridData
	bool allow_bg
	float x0, y0
	rect plot_rect
	float x, y, w, h
	
	GridAxis x_axis, y_axis
	
	color col_bg
	color col_grid
	color col_line
	color col_text
	color col_hover
	color col_sel
	
	void data_init()
		col_grid = colors.grid
		col_text = colors.text
		col_line = colors.text_soft1
		col_bg = colors.background
		col_hover = colors.hover
		col_sel = colors.selection
		allow_bg = true
		x_axis.min_label_dist = 60
		y_axis.min_label_dist = 30

	complex project2(complex z)
		return complex(x_axis.project(z.x), y_axis.project(z.y))

	vector project3(vector z)
		return vector(x_axis.project(z.x), y_axis.project(z.y), z.z)

	complex unproject2(complex z)
		return complex(x_axis.unproject(z.x), y_axis.unproject(z.y))

	vector unproject3(vector z)
		return vector(x_axis.unproject(z.x), y_axis.unproject(z.y), z.z)
	
	
	void draw_axis_y(Painter c, GridPartition part)
		for t in part.tick
			c.set_color(color.interpolate(col_bg, col_grid, t.weight))
			float yy = y_axis.project(t.value)
			if yy < y_axis.rect.y1 or yy > y_axis.rect.y2
				continue
			c.draw_line(x, yy, x + w, yy)
			if t.label.num > 0
				c.set_color(col_line)
				c.draw_line(x, yy, x + 6, yy)
				c.draw_str(x0 + 2, yy - 3, t.label)
	
	void draw_axis_x(Painter c, GridPartition part)
		for t in part.tick
			c.set_color(color.interpolate(col_bg, col_grid, t.weight))
			float xx = x_axis.project(t.value)
			if xx < x_axis.rect.x1 or xx > x_axis.rect.x2
				continue
			c.draw_line(xx, y, xx, y + h)
			if t.label.num > 0
				c.set_color(col_line)
				c.draw_line(xx, y + h - 6, xx, y + h)
				c.draw_str(xx - 8, y + h + 8, t.label)
	
	rect get_plot_region(float _x0, float _y0, float _w, float _h)
		return rect(_x0 + 40, _x0 + _w - 3, _y0 + 3, _y0 + _h -20)

	void draw_background(Painter c, float _x0, float _y0, float _w, float _h)
	
		x0 = _x0
		y0 = _y0 + 3
	
		plot_rect = get_plot_region(_x0, _y0, _w, _h)
		_y0 += 3
		x = plot_rect.x1
		y = plot_rect.y1
		w = plot_rect.width()
		h = plot_rect.height()
		
		x_axis.offset = x
		x_axis.size = w
		x_axis.rect = rect(x, x+w, y+h, _h)
		y_axis.offset = y + h
		y_axis.size = -h
		y_axis.rect = rect(_x0, x, _y0, y+h)
		
		# background
		if allow_bg
			c.set_color(col_bg)
			c.draw_rect(x, y, w, h)
	
		c.set_line_width(0.9)
		c.set_font_size(7)
		GridPartition part = x_axis.get_partition()
		draw_axis_x(c, part)
		part = y_axis.get_partition()
		draw_axis_y(c, part)
	
	void draw_curve(Painter c, FloatInterpolator fi, bool fill_below)
		float[] tt, yy
		complex[] pp
		tt = rangef(0, 1, 0.003)
		yy = fi.get_list(tt)
		for t,i in tt
			complex zz = project2(complex(x_axis.rel2val(t), yy[i]))
			pp.add(zz)
		if fill_below
			pp.add(complex(x + w, y + h))
			pp.add(complex(x, y + h))
			c.set_color(color(0.3, 0.3, 0.3, 1))
			c.draw_polygon(pp)
			pp.resize(pp.num - 2)
		c.set_line_width(2)
		c.set_color(col_line)
		c.draw_lines(pp)
	
	void draw_curve_c(Painter c, Curve curve, bool fill_below)
		float[] tt, yy
		complex[] pp
		tt = rangef(0, 1, 0.003)
		#yy = curve.get_list(tt)
		for t,i in tt
			float x = x_axis.rel2val(t)
			float y = curve.get(x)
			complex zz = project2(complex(x, y))
			pp.add(zz)
		if fill_below
			pp.add(complex(x + w, y + h))
			pp.add(complex(x, y + h))
			c.set_color(curve.col_below)
			c.draw_polygon(pp)
			pp.resize(pp.num - 2)
		c.set_line_width(2)
		c.set_color(curve.col)
		c.draw_lines(pp)
	
	void draw_curve_b(Painter c, complex[] _p, bool fill_below, color col)
		complex[] pp
		for p in _p
			pp.add(project2(p))
		if fill_below
			pp.add(complex(x + w, y + h))
			pp.add(complex(x, y + h))
			color col2 = col
			col2.a = 0.3
			c.set_color(col2)
			c.draw_polygon(pp)
			pp.resize(pp.num - 2)
		c.set_line_width(0.9)
		c.set_color(col)
		c.draw_lines(pp)
	
	
	color point_color(bool selected, bool hover)
		if hover
			return color.interpolate(col_hover, col_line, 0.0)
		if selected
			return color.interpolate(col_sel, col_line, 0.5)#color(1, 0.7, 0, 0)
		return col_line
	
	void draw_point_xy(Painter c, float x, float y, bool selected, bool hover)
		complex z
		z.x = x
		z.y = y
		draw_point2(c, z, selected, hover)
	
	void draw_point2(Painter c, complex p, bool selected, bool hover)
		complex pp = project2(p)
		c.set_color(point_color(selected, hover))
		float radius = 3
		if hover
			radius = 4
		c.draw_circle(pp.x, pp.y, radius)
	
	void draw_point3(Painter c, vector p, bool selected, bool hover)
		vector pp = project3(p)
		c.set_color(point_color(selected, hover))
		float radius = 3
		if hover
			c.draw_str(pp.x, pp.y - 20, pp.z.str2(1))
			radius = 4
		c.draw_circle(pp.x, pp.y, radius)
	
	void draw_line2(Painter c, complex p0, complex p1, bool selected, bool hover)
		complex pp0 = project2(p0)
		complex pp1 = project2(p1)
		c.set_color(col_line)
		float radius = 3
		if hover
			c.set_color(Red)
			radius = 4
		else if selected
			c.set_color(color(1, 0.7, 0, 0))
		c.draw_line(pp0.x, pp0.y, pp1.x, pp1.y)
	
	complex get_mouse2()
		float mx = GetEvent().mouse_x
		float my = GetEvent().mouse_y
		return unproject2(complex(mx, my))
	
	vector get_mouse3(float z)
		float mx = GetEvent().mouse_x
		float my = GetEvent().mouse_y
		return unproject3(vector(mx, my, z))
		
	bool mouse_over_point2(complex q)
		float mx = GetEvent().mouse_x
		float my = GetEvent().mouse_y
		complex p = project2(q)
		return (mx > p.x - 5) and (mx < p.x + 5) and (my > p.y - 5) and (my < p.y + 5)
		
	bool mouse_over_point3(vector q)
		return mouse_over_point2(complex(q.x, q.y))
		
	virtual void dummy_virtual()
		pass
		

class Grid extends GridData
	Panel *panel
	string id
	float mx, my
	
	void on_draw_all(Painter c)
		float w = c.width
		float h = c.height
	
		draw_background(c, 0, 0, w, h)
		c.clip(plot_rect)
		on_draw(c)
	
	void redraw()
		panel.redraw(id)
	
	void on_left_button_down_all()
		mx = GetEvent().mouse_x
		my = GetEvent().mouse_y
		if plot_rect.inside(mx, my)
			on_left_button_down()
		if x_axis.rect.inside(mx, my)
			x_axis.freq_as_pitch = !x_axis.freq_as_pitch
			redraw()
		if y_axis.rect.inside(mx, my)
			y_axis.freq_as_pitch = !y_axis.freq_as_pitch
			redraw()
	
	void on_left_button_up_all()
		mx = GetEvent().mouse_x
		my = GetEvent().mouse_y
		if plot_rect.inside(mx, my)
			on_left_button_up()
	
	void on_right_button_down_all()
		mx = GetEvent().mouse_x
		my = GetEvent().mouse_y
		if plot_rect.inside(mx, my)
			on_right_button_down()
	
	void on_right_button_up_all()
		mx = GetEvent().mouse_x
		my = GetEvent().mouse_y
		if plot_rect.inside(mx, my)
			on_right_button_up()
	
	void on_mouse_move_all()
		mx = GetEvent().mouse_x
		my = GetEvent().mouse_y
		#if plot_rect.inside(mx, my)
		on_mouse_move()
	
	void on_mouse_wheel_all()
		mx = GetEvent().mouse_x
		my = GetEvent().mouse_y
		if plot_rect.inside(mx, my)
			on_mouse_wheel()
		if panel.win.get_key(KEY_CONTROL)
			if x_axis.rect.inside(mx, my)
				x_axis.zoom(mx, GetEvent().scroll_y)
				redraw()
			if y_axis.rect.inside(mx, my)
				y_axis.zoom(my, GetEvent().scroll_y)
				redraw()
	
	void on_key_down_all()
		on_key_down()

	void init(Panel _panel, string _id)
		data_init()
		panel = &_panel
		id = _id
		panel.event_ox(id, "hui:draw", &self, on_draw_all)
		panel.event_ox(id, "hui:left-button-down", &self, on_left_button_down_all)
		panel.event_ox(id, "hui:left-button-up", &self, on_left_button_up_all)
		panel.event_ox(id, "hui:right-button-down", &self, on_right_button_down_all)
		panel.event_ox(id, "hui:right-button-up", &self, on_right_button_up_all)
		panel.event_ox(id, "hui:mouse-move", &self, on_mouse_move_all)
		panel.event_ox(id, "hui:mouse-wheel", &self, on_mouse_wheel_all)
		panel.event_ox(id, "hui:key-down", &self, on_key_down_all)
	
	virtual void on_draw(Painter c)
	virtual void on_left_button_down()
	virtual void on_left_button_up()
	virtual void on_right_button_down()
	virtual void on_right_button_up()
	virtual void on_mouse_move()
	virtual void on_mouse_wheel()
	virtual void on_key_down()
