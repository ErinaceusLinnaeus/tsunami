use hui
use tsunami
use tone

class Curve
	var col, col_below: color
	func __init__()
		col = colors.text_soft1
		col_below = color(0.3, 0.3, 1, 0.3)
	func virtual const get(x: float) -> float
	func virtual const get_list(xx: float[]) -> float[]
		float[] r
		r.resize(len(xx))
		for x,i in xx
			r[i] = get(x)
		return r

func log2lin(f: float, f_min: float, f_max: float) -> float
	return exp(f * log(f_max / f_min)) * f_min

func lin2log(f: float, f_min: float, f_max: float) -> float
	return log(f / f_min) / log(f_max / f_min)

class GridTick
	var value, weight: float
	var label: string

class GridPartition
	var tick: GridTick[]

#enum
#	UNIT_NONE
#	UNIT_TIME
#	UNIT_PITCH
#	UNIT_NOTE
#	UNIT_DB
#	UNIT_PERCENT

class AxisData extends Object
	var val_min, val_max: float
	var val_min_min, val_max_max: float
	var log_scale: bool
	var unit: string
	

class GridAxis extends AxisData
	var offset, size: float
	var area: rect
	var min_label_dist: float
	var freq_as_pitch: bool
	var grid: Grid*
	var menu: Menu* = nil
	var _id: string
	
	#override void __init__()
	func override __init__()
		_id = p2s(&self)
		freq_as_pitch = false
		set(0, 1, false, "")
		menu = nil
	func override __delete__()
		if menu
			del menu
	
	func set_events()
		grid.panel.event_o("{{_id}}-mode-freq-hz", self, on_mode_freq_hz)
		grid.panel.event_o("{{_id}}-mode-pitch", self, on_mode_pitch)
	
	func set(_val_min: float, _val_max: float, _log: bool, _unit: string)
		val_min = _val_min
		val_max = _val_max
		val_min_min = _val_min
		val_max_max = _val_max
		log_scale = _log
		unit = _unit
	
	func rel2val(__v: float) -> float
		if log_scale
			return log2lin(__v, val_min_min, val_max_max)
		return __v * (val_max_max - val_min_min) + val_min_min
		
	func project(__v: float) -> float
		if log_scale
			return lin2log(__v, val_min, val_max) * size + offset
		return ((__v - val_min) / (val_max - val_min)) * size + offset

	func unproject(__v: float) -> float
		if log_scale
			return log2lin((__v - offset) / size, val_min, val_max)
		return (__v - offset) / size * (val_max - val_min) + val_min
	
	func zoom(p: float, dz: float)
		float m = unproject(p)
		if log_scale
			val_min = clamp(exp(log(m) + (log(val_min) - log(m)) * pow(0.9, dz)), val_min_min, val_max_max)
			val_max = clamp(exp(log(m) + (log(val_max) - log(m)) * pow(0.9, dz)), val_min_min, val_max_max)
		else
			val_min = clamp(m + (val_min - m) * pow(0.9, dz), val_min_min, val_max_max)
			val_max = clamp(m + (val_max - m) * pow(0.9, dz), val_min_min, val_max_max)
		grid.redraw()
		
	func on_left_button_down()
		pass
		
	func on_right_button_down()
		if menu
			del menu
		menu = new Menu()
		if unit == "Hz"
			menu.add("Frequency (Hz)", "{{_id}}-mode-freq-hz")
			menu.add("Pitch", "{{_id}}-mode-pitch")
		else if unit == ""
			menu.add("no unit", "-dummy-")
		else
			menu.add("unit: {{unit}}", "-dummy-")
		menu.popup(grid.panel)
	
	func on_mode_freq_hz()
		freq_as_pitch = false
		grid.redraw()
	func on_mode_pitch()
		freq_as_pitch = true
		grid.redraw()
	
	func on_mouse_wheel(mm: float)
		if grid.panel.win.get_key(KEY_CONTROL)
			zoom(mm, hui.get_event().scroll_y)

	func get_lin_partition() -> GridPartition
		float d = (val_max - val_min) / size * 150
		GridPartition r
		float step = 1
		float e = log(abs(abs(d))) / log(10)
		float e_floor = float(int(e))
		if e < 0
			e_floor -= 1
		step = pow(10, e_floor)
		float factor = d / step
		int decimals = int(max(-e_floor, 0))
		float min = float(int(val_min / step)) * step
		float max = val_max
		
		float vv = min
		while vv <= max and step > 0
			r.tick.add([vv, 0.5, "{{vv.str2(decimals)}} {{unit}}"])
			if factor < 3
				r.tick.add([vv + step / 2, 0.2, ""])
			vv += step
		
		return r
		
	func get_log_partition() -> GridPartition
		float pixel_per_decade = abs(size / log(val_max / val_min)) * log(10)
		float size_param = pixel_per_decade / min_label_dist
		GridPartition r
		int e_min = log(abs(abs(val_min))) / log(10)
		int e_max = log(abs(abs(val_max))) / log(10) + 1
		for e in e_min:e_max
			float vv0 = pow(10, e)
			for i in 1:10
				float vv = vv0 * i
				if (vv >= val_min) and (vv <= val_max)
					string label
					bool show = false
					if (i == 1)
						show = true
					if (i == 3) and (size_param > 2)
						show = true
					if ((i == 2) or (i == 5)) and (size_param > 4)
						show = true
					if show
						label = "{{vv|.0}} {{unit}}"
					r.tick.add([vv, exp(-(i+1)*0.07), label])
				vv = vv0 * 1.5
				if (i == 1) and (vv >= val_min) and (vv <= val_max)
					r.tick.add([vv, 0.2, ""])
		return r
		
	func get_pitch_partition() -> GridPartition
		GridPartition r
		float pitch_min = freq_to_pitch(val_min)
		float pitch_max = freq_to_pitch(val_max)
		float density = (pitch_max - pitch_min) / area.width()
		#print(density)
		
		for p in int(pitch_min):int(pitch_max+1)
			int rp = pitch_to_rel(p)
			GridTick tt
			tt.value = pitch_to_freq(p)
			float xxx = 0.03
			tt.weight = 0.1
			if rp in [2,5,7,11]
				xxx = 0.06
				tt.weight = 0.2
			if rp in [4,9]
				xxx = 0.25
				tt.weight = 0.4
			if rp == 0
				xxx = 10000
				tt.weight = 1.0
			if density < xxx / 1.6
				tt.label = pitch_name(p)
			#else
			#	tt.weight = tt.weight * 0.7
			
			tt.weight = tt.weight * clamp(1 - density / xxx, 0, 1)#min(1.0, pow(xxx, 2))
			#if density < xxx
			r.tick.add(tt)
		return r
		
	func get_partition() -> GridPartition
		if log_scale
			if freq_as_pitch
				return get_pitch_partition()
			return get_log_partition()
		return get_lin_partition()

class Grid extends Object
	var allow_bg: bool
	var x0, y0: float
	var plot_area: rect
	#var x, y, w, h: float
	
	var panel: Panel*
	var id: string
	var mx, my: float
	
	var x_axis, y_axis: GridAxis
	
	var col_bg: color
	var col_grid: color
	var col_line: color
	var col_text: color
	var col_hover: color
	var col_sel: color

	
	func data_init()
		col_grid = colors.grid
		col_text = colors.text
		col_line = colors.text_soft1
		col_bg = colors.background
		col_hover = colors.hover
		col_sel = colors.selection
		allow_bg = true
		x_axis.grid = &self
		y_axis.grid = &self
		x_axis.min_label_dist = 60
		y_axis.min_label_dist = 30

	func project2(z: complex) -> complex
		return complex(x_axis.project(z.x), y_axis.project(z.y))

	func project3(z: vector) -> vector
		return vector(x_axis.project(z.x), y_axis.project(z.y), z.z)

	func unproject2(z: complex) -> complex
		return complex(x_axis.unproject(z.x), y_axis.unproject(z.y))

	func unproject3(z: vector) -> vector
		return vector(x_axis.unproject(z.x), y_axis.unproject(z.y), z.z)
	
	
	func draw_axis_y(c: Painter, part: GridPartition)
		for t in part.tick
			c.set_color(color.interpolate(col_bg, col_grid, t.weight))
			float yy = y_axis.project(t.value)
			if yy < y_axis.area.y1 or yy > y_axis.area.y2
				continue
			c.draw_line(plot_area.x1, yy, plot_area.x2, yy)
			if len(t.label) > 0
				c.set_color(col_line)
				c.draw_line(plot_area.x1, yy, plot_area.x1 + 6, yy)
				c.draw_str(x0 + 2, yy - 3, t.label)
	
	func draw_axis_x(c: Painter, part: GridPartition)
		for t in part.tick
			c.set_color(color.interpolate(col_bg, col_grid, t.weight))
			float xx = x_axis.project(t.value)
			if xx < x_axis.area.x1 or xx > x_axis.area.x2
				continue
			c.draw_line(xx, plot_area.y1, xx, plot_area.y2)
			if len(t.label) > 0
				c.set_color(col_line)
				c.draw_line(xx, plot_area.y2 - 6, xx, plot_area.y2)
				c.draw_str(xx - 8, plot_area.y2 + 8, t.label)
	
	func get_plot_region(_x0: float, _y0: float, _w: float, _h: float) -> rect
		return rect(_x0 + 40, _x0 + _w - 3, _y0 + 3, _y0 + _h -20)

	func draw_background(c: Painter, _x0: float, __y0: float, _w: float, _h: float)
		float _y0 = __y0
	
		x0 = _x0
		y0 = _y0 + 3
	
		plot_area = get_plot_region(_x0, _y0, _w, _h)
		_y0 += 3
		float x = plot_area.x1
		float y = plot_area.y1
		float w = plot_area.width()
		float h = plot_area.height()
		
		x_axis.offset = x
		x_axis.size = w
		x_axis.area = rect(x, x+w, y+h, _h)
		y_axis.offset = y + h
		y_axis.size = -h
		y_axis.area = rect(_x0, x, _y0, y+h)
		
		# background
		if allow_bg
			c.set_color(col_bg)
			c.draw_rect(x, y, w, h)
		c.set_line_width(0.9)
		c.set_font_size(7)
		GridPartition part = x_axis.get_partition()
		draw_axis_x(c, part)
		part = y_axis.get_partition()
		draw_axis_y(c, part)
	
	func draw_curve(c: Painter, fi: FloatInterpolator, fill_below: bool)
		complex[] pp
		var tt = rangef(0, 1, 0.003)
		var yy = fi.get_list(tt)
		for t,i in tt
			complex zz = project2(complex(x_axis.rel2val(t), yy[i]))
			pp.add(zz)
		if fill_below
			pp.add(complex(plot_area.x2, plot_area.y2))
			pp.add(complex(plot_area.x1, plot_area.y2))
			c.set_color(color(0.3, 0.3, 1, 0.3))
			c.draw_polygon(pp)
			pp.resize(len(pp) - 2)
		c.set_line_width(2)
		c.set_color(col_line)
		c.draw_lines(pp)
	
	func draw_curve_c(c: Painter, curve: Curve, fill_below: bool)
		float[] tt, yy
		complex[] pp
		tt = rangef(0, 1, 0.003)
		#yy = curve.get_list(tt)
		for t,i in tt
			float x = x_axis.rel2val(t)
			float y = curve.get(x)
			complex zz = project2(complex(x, y))
			pp.add(zz)
		if fill_below
			pp.add(complex(plot_area.x2, plot_area.y2))
			pp.add(complex(plot_area.x1, plot_area.y2))
			c.set_color(curve.col_below)
			c.draw_polygon(pp)
			pp.resize(len(pp) - 2)
		c.set_line_width(2)
		c.set_color(curve.col)
		c.draw_lines(pp)
	
	func draw_curve_b(c: Painter, _p: complex[], fill_below: bool, col: color)
		complex[] pp
		for p in _p
			pp.add(project2(p))
		if fill_below
			pp.add(complex(plot_area.x2, plot_area.y2))
			pp.add(complex(plot_area.x1, plot_area.y2))
			color col2 = col
			col2.a = 0.3
			c.set_color(col2)
			c.draw_polygon(pp)
			pp.resize(len(pp) - 2)
		c.set_line_width(0.9)
		c.set_color(col)
		c.draw_lines(pp)
	
	
	func point_color(selected: bool, hover: bool) -> color
		if hover
			return color.interpolate(col_hover, col_line, 0.0)
		if selected
			return color.interpolate(col_sel, col_line, 0.5)#color(0.7, 0, 0, 1)
		return col_line
	
	func draw_point_xy(c: Painter, x: float, y: float, selected: bool, hover: bool)
		var z = complex(x, y)
		draw_point2(c, z, selected, hover)
	
	func draw_point2(c: Painter, p: complex, selected: bool, hover: bool)
		complex pp = project2(p)
		c.set_color(point_color(selected, hover))
		float radius = 3
		if hover
			radius = 4
		c.draw_circle(pp.x, pp.y, radius)
	
	func draw_point3(c: Painter, p: vector, selected: bool, hover: bool)
		vector pp = project3(p)
		c.set_color(point_color(selected, hover))
		float radius = 3
		if hover
			c.draw_str(pp.x, pp.y - 20, "{{pp.z|.1}}")
			radius = 4
		c.draw_circle(pp.x, pp.y, radius)
	
	func draw_line2(c: Painter, p0: complex, p1: complex, selected: bool, hover: bool)
		complex pp0 = project2(p0)
		complex pp1 = project2(p1)
		c.set_color(col_line)
		float radius = 3
		if hover
			c.set_color(color.RED)
			radius = 4
		else if selected
			c.set_color(color(0.7, 0, 0, 1))
		c.draw_line(pp0.x, pp0.y, pp1.x, pp1.y)
	
	func get_mouse2() -> complex
		float mx = hui.get_event().mouse_x
		float my = hui.get_event().mouse_y
		return unproject2(complex(mx, my))
	
	func get_mouse3(z: float) -> vector
		float mx = hui.get_event().mouse_x
		float my = hui.get_event().mouse_y
		return unproject3(vector(mx, my, z))
		
	func mouse_over_point2(q: complex) -> bool
		float mx = hui.get_event().mouse_x
		float my = hui.get_event().mouse_y
		complex p = project2(q)
		return (mx > p.x - 5) and (mx < p.x + 5) and (my > p.y - 5) and (my < p.y + 5)
		
	func mouse_over_point3(q: vector) -> bool
		return mouse_over_point2(complex(q.x, q.y))

		

	
	func on_draw_all(c: Painter)
		float w = c.width
		float h = c.height

		draw_background(c, 0, 0, w, h)
		c.clip(plot_area)
		on_draw(c)
	
	func redraw()
		panel.redraw(id)
	
	func update_mouse()
		mx = hui.get_event().mouse_x
		my = hui.get_event().mouse_y
	
	func on_left_button_down_all()
		update_mouse()
		if plot_area.inside(mx, my)
			on_left_button_down()
		if x_axis.area.inside(mx, my)
			x_axis.on_left_button_down()
		if y_axis.area.inside(mx, my)
			y_axis.on_left_button_down()
	
	func on_left_button_up_all()
		update_mouse()
		if plot_area.inside(mx, my)
			on_left_button_up()
	
	func on_right_button_down_all()
		update_mouse()
		if plot_area.inside(mx, my)
			on_right_button_down()
		if x_axis.area.inside(mx, my)
			x_axis.on_right_button_down()
		if y_axis.area.inside(mx, my)
			y_axis.on_right_button_down()
	
	func on_right_button_up_all()
		update_mouse()
		if plot_area.inside(mx, my)
			on_right_button_up()
	
	func on_mouse_move_all()
		update_mouse()
		#if plot_rect.inside(mx, my)
		on_mouse_move()
	
	func on_mouse_wheel_all()
		update_mouse()
		if plot_area.inside(mx, my)
			on_mouse_wheel()
		if x_axis.area.inside(mx, my)
			x_axis.on_mouse_wheel(mx)
		if y_axis.area.inside(mx, my)
			y_axis.on_mouse_wheel(my)
	
	func on_key_down_all()
		on_key_down()

	func init(_panel: Panel, _id: string)
		data_init()
		panel = &_panel
		id = _id
		panel.event_ox(id, "hui:draw", self, on_draw_all)
		panel.event_ox(id, "hui:left-button-down", self, on_left_button_down_all)
		panel.event_ox(id, "hui:left-button-up", self, on_left_button_up_all)
		panel.event_ox(id, "hui:right-button-down", self, on_right_button_down_all)
		panel.event_ox(id, "hui:right-button-up", self, on_right_button_up_all)
		panel.event_ox(id, "hui:mouse-move", self, on_mouse_move_all)
		panel.event_ox(id, "hui:mouse-wheel", self, on_mouse_wheel_all)
		panel.event_ox(id, "hui:key-down", self, on_key_down_all)
		x_axis.set_events()
		y_axis.set_events()
	
	func virtual on_draw(c: Painter)
	func virtual on_left_button_down()
	func virtual on_left_button_up()
	func virtual on_right_button_down()
	func virtual on_right_button_up()
	func virtual on_mouse_move()
	func virtual on_mouse_wheel()
	func virtual on_key_down()
