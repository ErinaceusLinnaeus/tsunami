use tsunami

# pitch is in MIDI notation (69 = A4 = 440Hz)

func pitch_to_freq(pitch: float) -> float
	return 440 * pow(2, (pitch - 69.0) / 12.0)

func freq_to_pitch(freq: float) -> float
	return log(freq / 440.0) / log(2) * 12.0 + 69.0

# "scientific" notation
#   naive MIDI octave is off by 1
func pitch_get_octave(pitch: int) -> int
	return (pitch / 12) - 1

func pitch_from_octave_and_rel(rel: int, octave: int) -> int
	return rel + octave * 12 + 12

func pitch_to_rel(pitch: int) -> int
	return pitch % 12

func char_to_rel_pitch(c: char) -> int
	if c == 'c'
		return 0
	if c == 'd'
		return 2
	if c == 'e'
		return 4
	if c == 'f'
		return 5
	if c == 'g'
		return 7
	if c == 'a'
		return 9
	if c == 'h'
		return 11

func rel_pitch_name(pitch_rel: int) -> string
	if (pitch_rel == 0)
		return "C"
	if (pitch_rel == 1)
		return "C#"
	if (pitch_rel == 2)
		return "D"
	if (pitch_rel == 3)
		return "D#"
	if (pitch_rel == 4)
		return "E"
	if (pitch_rel == 5)
		return "F"
	if (pitch_rel == 6)
		return "F#"
	if (pitch_rel == 7)
		return "G"
	if (pitch_rel == 8)
		return "G#"
	if (pitch_rel == 9)
		return "A"
	if (pitch_rel == 10)
		return "A#"
	if (pitch_rel == 11)
		return "B"
	return "???"

func pitch_name(pitch: int) -> string
	string name_rel = rel_pitch_name(pitch_to_rel(pitch))
	string name_oct = str(pitch_get_octave(pitch))
	return name_rel + name_oct


class Chord
	enum Type
		# 3 tones
		MAJOR as "maj"
		MINOR as "min"
		DIMINISHED as "dim"
		AUGMENTED as "aug"
		# 4 tones
		MINOR_SEVENTH as "min7"
		MAJOR_SEVENTH as "maj7"
		MINOR_MAJOR_SEVENTH as "minmaj7"
		DIMINISHED_SEVENTH as "dim7"
		HALF_DIMINISHED_SEVENTH as "halfdim7"
		DOMINANT_SEVENTH as "dom7"
		AUGMENTED_SEVENTH as "aug7"
		AUGMENTED_MAJOR_SEVENTH as "augmaj7"
		# 1 tone
		SINGLE_TONE as ""
		# 2 tones (intervals > prime)
		INTERVAL0 as "0"
		INTERVAL1 as "1"
		INTERVAL2 as "2"
		INTERVAL3 as "3"
		INTERVAL4 as "4"
		INTERVAL5 as "5"
		INTERVAL6 as "6"
		INTERVAL7 as "7"
		INTERVAL8 as "8"
		INTERVAL9 as "9"
		INTERVAL10 as "10"
		INTERVAL11 as "11"
		
		UNKNOWN = -1

	var base_tone: int
	var type: Type
	func const pitch() -> int[]
		if type == Type.MAJOR
			return [base_tone, base_tone + 4, base_tone + 7]
		if type == Type.MINOR
			return [base_tone, base_tone + 3, base_tone + 7]
		if type == Type.DIMINISHED
			return [base_tone, base_tone + 3, base_tone + 6]
		if type == Type.AUGMENTED
			return [base_tone, base_tone + 4, base_tone + 8]
			
		if type == Type.DOMINANT_SEVENTH
			return [base_tone, base_tone + 4, base_tone + 7, base_tone + 10]
		if type == Type.MAJOR_SEVENTH
			return [base_tone, base_tone + 4, base_tone + 7, base_tone + 11]
		if type == Type.MINOR_SEVENTH
			return [base_tone, base_tone + 3, base_tone + 7, base_tone + 10]
		if type == Type.MINOR_MAJOR_SEVENTH
			return [base_tone, base_tone + 3, base_tone + 7, base_tone + 11]
		if type == Type.DIMINISHED_SEVENTH
			return [base_tone, base_tone + 3, base_tone + 6, base_tone + 9]
		if type == Type.HALF_DIMINISHED_SEVENTH
			return [base_tone, base_tone + 3, base_tone + 6, base_tone + 10]
		if type == Type.AUGMENTED_SEVENTH
			return [base_tone, base_tone + 4, base_tone + 8, base_tone + 10]
		if type == Type.AUGMENTED_MAJOR_SEVENTH
			return [base_tone, base_tone + 4, base_tone + 8, base_tone + 11]
			
		if type == Type.SINGLE_TONE
			return [base_tone]
		if int(type) > int(Type.SINGLE_TONE)
			return [base_tone, base_tone + (int(type) - int(Type.SINGLE_TONE))]
		return []
	func name() -> string
		if int(type) < 0
			return "???"
		return rel_pitch_name(pitch_to_rel(base_tone)) + " " + str(type)

	func static parse(s: string) -> Chord[]
		Chord[] chords
		for a,i in s
			Chord c
			if a >= 'a' and a <= 'h'
				c.type = Type.MINOR
				c.base_tone = char_to_rel_pitch(a) + 48
			else if a >= 'A' and a <= 'H'
				c.type = Type.MAJOR
				c.base_tone = char_to_rel_pitch(a + 32) + 48
			else
				continue
			if i < len(s) - 1
				if s[i + 1] == '#'
					c.base_tone ++
					i ++
			chords.add(c)
		return chords
	
	func const match_pitch(_pitches: int[]) -> bool
		var pp = pitch()
		for _p in _pitches
			bool found = false
			for p in pp
				if (p - _p) % 12 == 0
					found = true
			if not found
				return false
		return true
		


	func static guess(pitches: int[]) -> Chord
		int sig = pitch_signature(pitches)
		Chord c
		for b in 0:12
			for t in Type.all()
				c.base_tone = b
				c.type = t
				int s = pitch_signature(c.pitch())
				if s == sig #c.match_pitch(pitches)
					return c
		c.type = Chord.Type.from_int(-1)
		return c


func pitch_signature(pitches: int[]) -> int
	int s = 0
	for p in pitches
		s = s | (1 << (p % 12))
	return s

#void AddSimpleTone(float sample_rate, AudioBuffer buf, int pos0, int pos1, float f, float vol)
#	float f_w = 1.0 / sample_rate * f * 2.0 * pi
#	int i0 = max(pos0, 0)
#	int i1 = min(pos1, len(buf))
#	for int i, i0, i1
#		float tt = (i - pos0) * f_w
#		float d = sin(tt) * vol
#		if i < pos0 + 1000
#			d *= (i - pos0) * 0.001
#		if i > pos1 - 1000
#			d *= (pos1 - i) * 0.001
#		buf.r[i] += d
#		buf.l[i] += d
#
#void AddRichTone(float sample_rate, AudioBuffer buf, int pos0, int pos1, float f, float vol)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f,     vol * 0.6)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f * 2, vol * 0.5)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f * 4, vol * 0.3)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f * 8, vol * 0.1)

#class RichSynthesizer : DummySynthesizer
#	virtual void AddToneFreq(AudioBuffer buf, Range r, float freq, float volume)

#void AddChord(Synthesizer s, Range r, Chord c, float volume)
#	
#	float[] pitch
#	pitch.add(c.base_tone)
#	if c.type == ChordMinor
#		pitch.add(c.base_tone + 3)
#	else
#		pitch.add(c.base_tone + 4)
#	pitch.add(c.base_tone + 7)
#	pitch.add(c.base_tone + 12)
#	
#	MidiEventBuffer midi
#	for p in pitch
#		midi.addNote(MidiNote(r, p, volume))
#	s.feed(midi)
