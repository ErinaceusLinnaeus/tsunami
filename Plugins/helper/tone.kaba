use "../api.kaba"

# pitch is in MIDI notation (69 = A4 = 440Hz)

float pitch_to_freq(float pitch)
	return 440 * pow(2, (pitch - 69.0) / 12.0)

float freq_to_pitch(float freq)
	return log(freq / 440.0) / log(2) * 12.0 + 69.0

# "scientific" notation
#   naive MIDI octave is off by 1
int pitch_get_octave(int pitch)
	return (pitch / 12) - 1

int pitch_from_octave_and_rel(int rel, int octave)
	return rel + octave * 12 + 12

int pitch_to_rel(int pitch)
	return pitch % 12

int char_to_rel_pitch(char c)
	if c == 'c'
		return 0
	if c == 'd'
		return 2
	if c == 'e'
		return 4
	if c == 'f'
		return 5
	if c == 'g'
		return 7
	if c == 'a'
		return 9
	if c == 'h'
		return 11

string rel_pitch_name(int pitch_rel)
	if (pitch_rel == 0)
		return "C"
	if (pitch_rel == 1)
		return "C#"
	if (pitch_rel == 2)
		return "D"
	if (pitch_rel == 3)
		return "D#"
	if (pitch_rel == 4)
		return "E"
	if (pitch_rel == 5)
		return "F"
	if (pitch_rel == 6)
		return "F#"
	if (pitch_rel == 7)
		return "G"
	if (pitch_rel == 8)
		return "G#"
	if (pitch_rel == 9)
		return "A"
	if (pitch_rel == 10)
		return "A#"
	if (pitch_rel == 11)
		return "B"
	return "???"

string pitch_name(int pitch)
	string name_rel = rel_pitch_name(pitch_to_rel(pitch))
	string name_oct = pitch_get_octave(pitch)
	return name_rel + name_oct

enum
	CHORD_MAJOR
	CHORD_MINOR
	CHORD_DIMINISHED

string chord_type_name(int t)
	if t == CHORD_MAJOR
		return "maj"
	if t == CHORD_MINOR
		return "min"
	if t == CHORD_DIMINISHED
		return "dim"
	return "???"

class Chord
	int base_tone
	int type
	int[] pitch()
		if type == CHORD_MAJOR
			return [base_tone, base_tone + 4, base_tone + 7]
		if type == CHORD_MINOR
			return [base_tone, base_tone + 3, base_tone + 7]
		if type == CHORD_DIMINISHED
			return [base_tone, base_tone + 3, base_tone + 6]
		return []
	string name()
		return rel_pitch_name(pitch_to_rel(base_tone)) + " " + chord_type_name(type)

Chord[]  ParseChords(string str)
	Chord[] chords
	for a,i in str
		Chord c
		if a >= 'a' and a <= 'h'
			c.type = CHORD_MINOR
			c.base_tone = char_to_rel_pitch(a) + 48
		else if a >= 'A' and a <= 'H'
			c.type = CHORD_MAJOR
			c.base_tone = char_to_rel_pitch(a + 32) + 48
		else
			continue
		if i < len(str) - 1
			if str[i + 1] == '#'
				c.base_tone ++
				i ++
		chords.add(c)
	return chords

#void AddSimpleTone(float sample_rate, AudioBuffer buf, int pos0, int pos1, float f, float vol)
#	float f_w = 1.0 / sample_rate * f * 2.0 * pi
#	int i0 = max(pos0, 0)
#	int i1 = min(pos1, len(buf))
#	for int i, i0, i1
#		float tt = (i - pos0) * f_w
#		float d = sin(tt) * vol
#		if i < pos0 + 1000
#			d *= (i - pos0) * 0.001
#		if i > pos1 - 1000
#			d *= (pos1 - i) * 0.001
#		buf.r[i] += d
#		buf.l[i] += d
#
#void AddRichTone(float sample_rate, AudioBuffer buf, int pos0, int pos1, float f, float vol)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f,     vol * 0.6)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f * 2, vol * 0.5)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f * 4, vol * 0.3)
#	AddSimpleTone(sample_rate, buf, pos0, pos1, f * 8, vol * 0.1)

#class RichSynthesizer : DummySynthesizer
#	virtual void AddToneFreq(AudioBuffer buf, Range r, float freq, float volume)

#void AddChord(Synthesizer s, Range r, Chord c, float volume)
#	
#	float[] pitch
#	pitch.add(c.base_tone)
#	if c.type == ChordMinor
#		pitch.add(c.base_tone + 3)
#	else
#		pitch.add(c.base_tone + 4)
#	pitch.add(c.base_tone + 7)
#	pitch.add(c.base_tone + 12)
#	
#	MidiEventBuffer midi
#	for p in pitch
#		midi.addNote(MidiNote(r, p, volume))
#	s.feed(midi)
