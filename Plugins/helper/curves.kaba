use tsunami
use grid
use filter


class BiquadGainCurve extends Curve
	var filter: BiquadFilter
	var sample_rate: float
	func override get(freq: float) -> float
		return filter.params.gain(freq, sample_rate)

class BiquadPhaseShiftCurve extends Curve
	var filter: BiquadFilter
	var sample_rate: float
	func override get(freq: float) -> float
		return filter.params.phase_shift(freq, sample_rate)


class SpectrumCurve extends Curve
	var spec: float[]
	var sample_rate: float
	var ring: RingBuffer*
	var N: int
	func override __init__()
		ring = new RingBuffer(65536)
		N = 4096*2
		sample_rate = DEFAULT_SAMPLE_RATE
		col = colors.text_soft2
	func override __delete__()
		del ring
	func mut set(buf: AudioBuffer, _sample_rate: float)
		sample_rate = _sample_rate
		ring.write(buf)
	
		AudioBuffer b
		while ring.available() >= N
			ring.read_ref(b, N)
			complex[] zr, zl
			N = buf.length
			b.get_spectrum(zr, zl, N)
			spec.resize(len(zr))
			for z,i in zr
				spec[i] = log(z.abs())
			ring.read_ref_done(b)
	func override get(freq: float) -> float
		int i = freq * N / sample_rate
		if i >= len(spec)-2
			return 0
		return spec[i]*10
