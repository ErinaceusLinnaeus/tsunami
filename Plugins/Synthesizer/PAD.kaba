use "../api.kaba"
use "../tone.kaba"
use "../grid.kaba"

const int N = 4096*16

class PitchState
	int pos
	float[] buf
	EnvelopeADSR env

class PADState : PluginData
	PitchState[128] pitch
	void __init__()
		for p in pitch
			p.buf.__init__()
	overwrite void reset()
		for p in pitch
			p.buf.clear()
			p.pos = 0

class PADConfig : PluginData
	float[] A
	float bw
	float bwscale
	float detune
	overwrite void reset()
		A = [1.0, 0.4, 0.2, 0.1, 0.05]
		bw = 0.5
		bwscale = 0.7
		detune = 0.03
	
	void fill_curve(complex[] c, int n0)
		c.clear()
		float n = n0 + 1
		float nn = n + 0.03 * n * n
		float _bw = (pow(2, bw / 12.0) - 1.0) * pow(nn, bwscale)
		for x in 0.5 : 8.5 : 0.01
			float dx = x - n
			float y = exp(-dx*dx/_bw/_bw) * A[n0]
			c.add(complex(x, y))

float gauss(float f, float bw)
	float x = f / bw
	return exp(- x*x) / bw

class PADSynthesizer : Synthesizer
	PADState state
	PADConfig config
	
	overwrite void onConfig()
		state.reset()
		for p in state.pitch
			p.env.set(0.02, 0.02, 0.7, 0.5, sample_rate)
		
	void create(int pitch)
		float freq = pitch_to_freq(pitch)
		PitchState *p = &state.pitch[pitch]
	
		complex[] c
		float[] amp
		c.resize(N / 2 + 1)
		amp.resize(N / 2 + 1)
	
		for a,n0 in config.A
			int n = n0 + 1
			float nn = n + config.detune * n0 * n0
			float bwHz = (pow(2, config.bw / 12.0) - 1.0) * freq * pow(nn, config.bwscale)
			float bwi = bwHz / (2.0 * sample_rate)
			float fi = freq * n / sample_rate
			for i in 0:amp.num
				amp[i] += gauss((i2f(i) / N) - fi, bwi) * a
		
		for i in 0:c.num
			float phi = rand(2 * pi)
			c[i] = complex(cos(phi), sin(phi)) * amp[i]
		
		p.buf.resize(N)
		fft_c2r_inv(c, p.buf)
	
		float m = 0
		for b in p.buf
			m = max(b, m)
		p.buf /= (m * 1.2)

	overwrite void render(BufferBox buf)
			
		for i in 0:buf.num
			for e in events
				if e.pos == i
					int pp = e.pitch + 0.4
					PitchState *ps = &state.pitch[pp]
					if e.volume > 0
						ps.env.start(e.volume)
						enablePitch(pp, true)
					else
						ps.env.end()
			int[] to_del
			for ip in active_pitch
				PitchState *p = &state.pitch[ip]
				
				if p.buf.num == 0
					create(ip)
				
				float d = p.buf[p.pos] * p.env.get()
				buf.r[i] += d
				buf.l[i] += d
				if p.env.just_killed
					to_del.add(ip)
				p.pos ++
				if p.pos >= N
					p.pos = 0
			for ip in to_del
				enablePitch(ip, false)
	
	overwrite ConfigPanel *createPanel()
		return new PADPanel(self)

class PADGrid : Grid
	PADConfig *pc
	ConfigPanel *p
	int Selected, Hover
	
	void __init__()
		Selected = -1
		Hover = -1

	overwrite void onDraw(Painter *c)
		pc.A.resize(8)
	
		// curve + area below
		complex[] curve
		for a,i in pc.A
			pc.fill_curve(curve, i)
			drawCurveB(c, curve, false, Red)
	
		// points
		for a,i in pc.A
			drawPoint2(c, complex(i+1, a), i == Selected, i == Hover)
			
	// left button down -> select
	overwrite void onLeftButtonDown()
		Selected = Hover
		redraw()

	overwrite void onMouseMove()
		// move
		if HuiGetEvent().button_l and (Selected >= 0)
			pc.A[Selected] = clamp(getMouse2().y, 0, 1)
			p.notify()
		else
		// hover?
			Hover = -1
			for a,i in pc.A
				complex p = project2(complex(i+1, a))
				if (mx > p.x - 10) and (mx < p.x + 10)
					Hover = i
		redraw()

class PADPanel : ConfigPanel
	PADConfig *pc
	PADGrid grid
	overwrite PADSynthesizer* c
	void __init__(PADSynthesizer* _s)
		super.__init__(_s)
		pc = &c.config
		fromSource("
Grid ? '' 1 2
	Grid ? '' 2 3
		Text ? 'bw'
		SpinButton bw '0\\0\\10\\0.01'
		Text ? 'bwscale'
		SpinButton bwscale '0\\0\\10\\0.01'
		Text ? 'detune'
		SpinButton detune '0\\-10\\10\\0.01'
	DrawingArea drawing '' grabfocus height=300 noexpandy")
		event("bw", &onChange)
		event("bwscale", &onChange)
		event("detune", &onChange)
		
		grid.pc = pc
		grid.p = self
		grid.init(self, "drawing")
		grid.x_axis.set(0.5, 8.5, false, "")
		grid.y_axis.set(0, 1.05, false, "")
		
	void onChange()
		pc.bw = getFloat("bw")
		pc.bwscale = getFloat("bwscale")
		pc.detune = getFloat("detune")
		grid.redraw()
		notify()
	
	overwrite void update()
		setFloat("bw", pc.bw)
		setFloat("bwscale", pc.bwscale)
		setFloat("detune", pc.detune)
		grid.redraw()
