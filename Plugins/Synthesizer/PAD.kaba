use hui
use tsunami
use helper.tone
use helper.grid

const N = 4096*16


class PADConfig extends Module.Config
	var A: float[]
	var bw: float
	var bwscale: float
	var detune: float
	func override reset()
		A = [1.0, 0.4, 0.2, 0.1, 0.05]
		bw = 0.5
		bwscale = 0.7
		detune = 0.03
	
	func fill_curve(out c: complex[], n0: int)
		c.clear()
		float n = n0 + 1
		float nn = n + 0.03 * n * n
		float _bw = (pow(2, bw / 12.0) - 1.0) * pow(nn, bwscale)
		for x in 0.5 : 8.5 : 0.01
			float dx = x - n
			float y = exp(-dx*dx/_bw/_bw) * A[n0]
			c.add(complex(x, y))

func gauss(f: float, bw: float) -> float
	float x = f / bw
	return exp(- x*x) / bw


class PADRenderer extends PitchRenderer
	var pos = 0
	var prebuf: float[]
	var env: EnvelopeADSR
	var override synth: PADSynthesizer*
		
	func create()
		float freq = pitch_to_freq(pitch)
	
		complex[] c
		float[] amp
		c.resize(N / 2 + 1)
		amp.resize(N / 2 + 1)
		
		float sample_rate = synth.sample_rate
	
		for a,n0 in synth.config.A
			int n = n0 + 1
			float nn = n + synth.config.detune * n0 * n0
			float bwHz = (pow(2, synth.config.bw / 12.0) - 1.0) * freq * pow(nn, synth.config.bwscale)
			float bwi = bwHz / (2.0 * sample_rate)
			float fi = freq * n / sample_rate
			for i in 0:len(amp)
				amp[i] += gauss((float(i) / N) - fi, bwi) * a
		
		for i in 0:len(c)
			float phi = rand(2 * pi)
			c[i] = complex(cos(phi), sin(phi)) * amp[i]
		
		prebuf.resize(N)
		fft_c2r_inv(c, prebuf)
	
		float m = 0
		for b in prebuf
			m = max(b, m)
		prebuf /= (m * 1.2)
	
	func override on_config()
		env.set(0.02, 0.02, 0.7, 0.5, synth.sample_rate)
		create()

	func override on_start(volume: float)
		env.start(volume)
	func override on_end()
		env.end()

	func override render(out buf: AudioBuffer) -> bool
		for i in 0:len(buf)
			float d = prebuf[pos]
				
			buf.c[0][i] += d
			pos ++
			if pos >= N
				pos = 0
		buf.c[0] *= env.read(len(buf))
		buf.auto_generate_channels()
		return !env.just_killed
	

class PADSynthesizer extends Synthesizer
	var config: PADConfig
	
	func override create_panel() -> ConfigPanel*
		return new PADPanel(self)

	func override create_pitch_renderer(pitch: int) -> PitchRenderer*
		return new PADRenderer(self, pitch)

class PADGrid extends Grid
	var pc: PADConfig*
	var p: ConfigPanel*
	var selected = -1
	var hover = -1

	func override on_draw(c: Painter)
		pc.A.resize(8)
	
		# curve + area below
		complex[] curve
		for a,i in pc.A
			pc.fill_curve(curve, i)
			draw_curve_b(c, curve, false, color.RED)
	
		# points
		for a,i in pc.A
			draw_point2(c, complex(i+1, a), i == selected, i == hover)
			
	# left button down -> select
	func override on_left_button_down()
		selected = hover
		redraw()

	func override on_mouse_move()
		# move
		if hui.get_event().button_l and (selected >= 0)
			pc.A[selected] = clamp(get_mouse2().y, 0, 1)
			p.changed()
		else
		# hover?
			hover = -1
			for a,i in pc.A
				complex p = project2(complex(i+1, a))
				if (mx > p.x - 10) and (mx < p.x + 10)
					hover = i
		redraw()

class PADPanel extends ConfigPanel
	var pc: PADConfig*
	var grid: PADGrid
	var override c: PADSynthesizer*
	func override __init__(_s: Module)
		pc = &c.config
		from_source("
Grid ? ''
	Grid ? ''
		Text ? 'BW' right disabled
		SpinButton bw '0' range=0:10:0.01
		---|
		Text ? 'BW Scale' right disabled
		SpinButton bwscale '0' range=0:10:0.01
		---|
		Text ? 'Detune' right disabled
		SpinButton detune '0' range=-10:10:0.01
	---|
	DrawingArea drawing '' grabfocus expandy")
		event("bw", on_change)
		event("bwscale", on_change)
		event("detune", on_change)
		
		grid.pc = pc
		grid.p = &self
		grid.init(self, "drawing")
		grid.x_axis.set(0.5, 8.5, false, "")
		grid.y_axis.set(0, 1.05, false, "")
		
	func on_change()
		pc.bw = get_float("bw")
		pc.bwscale = get_float("bwscale")
		pc.detune = get_float("detune")
		grid.redraw()
		changed()
	
	func override update()
		set_float("bw", pc.bw)
		set_float("bwscale", pc.bwscale)
		set_float("detune", pc.detune)
		grid.redraw()
