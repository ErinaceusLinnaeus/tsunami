use "../api.kaba"
use "../tone.kaba"
use "../grid.kaba"

const int NUM_HARMONICS = 10

class PitchState
	float volume
	float phi
	EnvelopeADSR env

class HarminocState : PluginData
	PitchState[128] pitch
	overwrite void reset()
		for p in pitch
			p.volume = 0
			p.phi = 0
			p.env.reset()

class HarmonicConfig : PluginData
	float[NUM_HARMONICS] intensity
	float release
	overwrite void reset()
		intensity[0] = 0.3
		intensity[1] = 0.1
		for i in 2:NUM_HARMONICS
			intensity[i] = 0
		release = 0.02

class HarmonicGrid : Grid
	HarmonicConfig *hc
	HarmonicPanel *p
	int Selected, Hover

	overwrite void onDraw(Painter *c)
	
		// points
		for i,n in hc.intensity
			drawPoint2(c, complex(n+1, i), n == Selected, n == Hover)
			
	// left button down -> select
	overwrite void onLeftButtonDown()
		Selected = Hover
		redraw()

	overwrite void onMouseMove()
		// move
		if HuiGetEvent().button_l and (Selected >= 0)
			hc.intensity[Selected] = clamp(getMouse2().y, 0, 1)
			p.notify()
		else
		// hover?
			Hover = -1
			for i,n in hc.intensity
				complex p = project2(complex(n+1, i))
				if (mx > p.x - 10) and (mx < p.x + 10)
					Hover = n
		redraw()

class HarmonicPanel : ConfigPanel
	overwrite HarmonicSynthesizer *c
	HarmonicConfig *hc
	HarmonicGrid grid
	void __init__(HarmonicSynthesizer *_s)
		super.__init__(_s)
		addGrid("", 0, 0, 1, 2, "main_table")
		setTarget("main_table", 0)
		addGrid("", 0, 0, 4, 1, "table1")
		addDrawingArea("!grabfocus,width=400", 0, 1, 0, 0, "drawing")
		setTarget("table1", 0)
		addLabel("Release", 0, 0, 0, 0, "")
		addSpinButton("0\\0\\500\\0.1", 1, 0, 0, 0, "release")
		addLabel("ms", 2, 0, 0, 0, "")
		event("release", &onChange)
		hc = &c.config
		
		grid.hc = hc
		grid.p = self
		grid.init(self, "drawing")
		grid.x_axis.set(0.5, NUM_HARMONICS + 0.5, false, "")
		grid.y_axis.set(0, 1.05, false, "")
		
	void onChange()
		hc.release = getFloat("release") / 1000
		notify()
	
	overwrite void update()
		redraw("drawing")
		setFloat("release", hc.release * 1000)
		

class HarmonicSynthesizer : Synthesizer
	HarmonicConfig config
	HarminocState state

	overwrite ConfigPanel *createPanel()
		return new HarmonicPanel(self)
	
	overwrite void onConfig()
		for p in state.pitch
			p.env.set(0.01, 0.01, 0.7, config.release, sample_rate)
		
	overwrite void render(BufferBox buf)
		for i in 0:buf.num

			// current events?
			for e in events
				if e.pos == i
					int pp = e.pitch+0.4
					PitchState *s = &state.pitch[pp]
					if e.volume == 0
						s.env.end()
					else
						s.env.start(e.volume)
						enablePitch(pp, true)

			for p in active_pitch
				s = &state.pitch[p]

				s.volume = s.env.get()

				if s.volume == 0
					enablePitch(p, false)
					continue

				float d = 0
				for j in 0:NUM_HARMONICS
					d += sin(s.phi * (j+1)) * config.intensity[j]
				buf.r[i] += d * s.volume
				buf.l[i] += d * s.volume

				s.phi += delta_phi[p]
				if s.phi > 8*pi
					s.phi = loop(s.phi, 0, 2*pi)
