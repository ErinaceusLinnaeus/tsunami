use "../api.kaba"
use "../tone.kaba"
use "../grid.kaba"

const int NUM_HARMONICS = 10


class HarmonicConfig extends PluginData
	float[NUM_HARMONICS] intensity
	float release
	override void reset()
		intensity[0] = 0.3
		intensity[1] = 0.1
		for i in 2:NUM_HARMONICS
			intensity[i] = 0
		release = 0.02

class HarmonicGrid extends Grid
	HarmonicConfig *hc
	HarmonicPanel *p
	int Selected, Hover

	override void on_draw(Painter *c)
	
		// points
		for i,n in hc.intensity
			complex z0 = complex(n+1, 0)
			complex z1 = complex(n+1, i)
			c.set_line_width(2)
			draw_line2(c, z0, z1, n == Selected, n == Hover)
			draw_point2(c, z1, n == Selected, n == Hover)
			
	// left button down -> select
	override void on_left_button_down()
		Selected = Hover
		redraw()

	override void on_mouse_move()
		// move
		if HuiGetEvent().button_l and (Selected >= 0)
			hc.intensity[Selected] = clamp(get_mouse2().y, 0, 1)
			p.changed()
		else
		// hover?
			Hover = -1
			for i,n in hc.intensity
				complex p = project2(complex(n+1, i))
				if (mx > p.x - 10) and (mx < p.x + 10)
					Hover = n
		redraw()

class HarmonicPanel extends ConfigPanel
	override HarmonicSynthesizer *c
	HarmonicConfig *hc
	HarmonicGrid grid
	override void __init__(Module *_s)
		super.__init__(_s)
		add_grid("", 0, 0, "main_table")
		set_target("main_table")
		add_grid("", 0, 0, "table1")
		add_drawing_area("!grabfocus,width=400", 0, 1, "drawing")
		set_target("table1")
		add_label("Release", 0, 0, "")
		add_spin_button("!range=0:500:0.1\\0", 1, 0, "release")
		add_label("ms", 2, 0, "")
		event("release", &on_change)
		hc = &c.config
		
		grid.hc = hc
		grid.p = self
		grid.init(self, "drawing")
		grid.x_axis.set(0.5, NUM_HARMONICS + 0.5, false, "")
		grid.y_axis.set(0, 1.05, false, "")
		
	void on_change()
		hc.release = get_float("release") / 1000
		changed()
	
	override void update()
		redraw("drawing")
		set_float("release", hc.release * 1000)


class HarmonicRenderer extends PitchRenderer
	float volume
	float phi
	EnvelopeADSR env
	override HarmonicSynthesizer *synth
	override void __init__(Synthesizer *s, int pitch)
		volume = 0
		phi = 0
		env.reset()
	override void on_config()
		env.set(0.01, 0.01, 0.7, synth.config.release, synth.sample_rate)

	override void on_event(MidiEvent e)
		if e.volume == 0
			env.end()
		else
			env.start(e.volume)

	override bool render(AudioBuffer buf)
		for i in 0:buf.length
			volume = env.get()

			if volume == 0
				continue

			float d = 0
			for j in 0:NUM_HARMONICS
				d += sin(phi * (j+1)) * synth.config.intensity[j]
			buf.r[i] += d * volume

			phi += delta_phi
			if phi > 8*pi
				phi = loop(phi, 0, 2*pi)
		
		if buf.channels > 1
			buf.l = buf.r

		return volume > 0

class HarmonicSynthesizer extends Synthesizer
	HarmonicConfig config


	override ConfigPanel *create_panel()
		return new HarmonicPanel(self)
	
	override PitchRenderer* create_pitch_renderer(int pitch)
		return new HarmonicRenderer(self, pitch)
