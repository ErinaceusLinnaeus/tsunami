use hui
use tsunami
use helper.tone
use helper.grid

const NUM_HARMONICS = 10


class HarmonicConfig extends Module.Config
	var intensity: float[NUM_HARMONICS]
	var release: float
	func override reset()
		intensity[0] = 0.3
		intensity[1] = 0.1
		for i in 2:NUM_HARMONICS
			intensity[i] = 0
		release = 0.02

class HarmonicGrid extends Grid
	var hc: HarmonicConfig&
	var p: HarmonicPanel&
	var Selected, Hover: int

	func override on_draw(c: Painter)
	
		# points
		for n=>i in hc.intensity
			var z0 = vec2(n+1, 0)
			var z1 = vec2(n+1, i)
			c.set_line_width(2)
			draw_line2(c, z0, z1, n == Selected, n == Hover)
			draw_point2(c, z1, n == Selected, n == Hover)
			
	# left button down -> select
	func override on_left_button_down()
		Selected = Hover
		redraw()

	func override on_mouse_move()
		# move
		if hui.get_event().button_l and (Selected >= 0)
			hc.intensity[Selected] = clamp(get_mouse2().y, 0, 1)
			p.changed()
		else
		# hover?
			Hover = -1
			for n=>i in hc.intensity
				var p = project2(vec2(n+1, i))
				if (m.x > p.x - 10) and (m.x < p.x + 10)
					Hover = n
		redraw()

class HarmonicPanel extends ConfigPanel
	var override c: HarmonicSynthesizer&
	var hc: HarmonicConfig&
	var grid: HarmonicGrid
	func override __init__(_s: Module)
		add_grid("", 0, 0, "main_table")
		set_target("main_table")
		add_grid("", 0, 0, "table1")
		add_drawing_area("!grabfocus", 0, 1, "drawing")
		set_target("table1")
		add_label("!right,disabled\\Release", 0, 0, "")
		add_spin_button("!range=0:500:0.1,expandx\\0", 1, 0, "release")
		add_label("ms", 2, 0, "")
		event("release", on_change)
		hc := &!c.config
		
		grid.hc := hc
		grid.p := &!self
		grid.init(self, "drawing")
		grid.x_axis.set(0.5, NUM_HARMONICS + 0.5, false, "")
		grid.y_axis.set(0, 1.05, false, "")
		
	func mut on_change()
		hc.release = get_float("release") / 1000
		changed()
	
	func override update()
		redraw("drawing")
		set_float("release", hc.release * 1000)


class HarmonicRenderer extends PitchRenderer
	var volume = 0.
	var phi = 0.
	var env: EnvelopeADSR
	var override synth: HarmonicSynthesizer&
	func override on_config()
		env.set(0.01, 0.01, 0.7, synth.config.release, synth.sample_rate)

	func override on_end()
		env.end()
	func override on_start(volume: float)
		env.start(volume)

	func override render(out buf: AudioBuffer) -> bool
		for i in 0:len(buf)
			volume = env.get()

			if volume == 0
				continue

			var d: float = 0
			for j in 0:NUM_HARMONICS
				d += sin(phi * (j+1)) * synth.config.intensity[j]
			buf.c[0][i] += d * volume

			phi += delta_phi
			if phi > 8*pi
				phi = loop(phi, 0, 2*pi)
		buf.auto_generate_channels()

		return volume > 0

class HarmonicSynthesizer extends Synthesizer
	var config: HarmonicConfig


	func override create_panel() -> xfer[ConfigPanel]
		return new HarmonicPanel(self)
	
	func override create_pitch_renderer(pitch: int) -> xfer[PitchRenderer]
		return new HarmonicRenderer(self, pitch)
