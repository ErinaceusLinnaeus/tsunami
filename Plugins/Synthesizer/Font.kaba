use os
use hui
use tsunami
use helper.tone

# a single file
struct MidiFont
	var name: string
	var song: Song* = nil
	var sub: shared[Session]
	
	func __init__()
	func __init__(_name: string)
		name = _name
	
	func mut load(session: Session)
		if song
			return
		sub = session.create_child()
		for s in sub
			s.song = new Song(s, DEFAULT_SAMPLE_RATE)
			song = weak(s.song)
			s.storage.load(song, hui.app_directory_static | "Midi Fonts/{{name}}.nami")
	
	func mut instruments(session: Session) -> string[]
		load(session)
		var ii: string[]
		for s in song
			for _t in s.tracks
				for t in _t
					if t.type == SignalType.MIDI
						ii.add(t.name)
		return ii
	
	func mut get_synth(session: Session, name: string) -> xfer[Synthesizer]
		load(session)
#		for _s in song
#			# match by name
#			for _t in _s.tracks
#				for t in _t
#					if t.type == SignalType.MIDI and t.name == name
#						var m = t.synth.copy()
#						var s: Synthesizer* = m
#						return s #m as Synthesizer*
#			# fist midi track...
#			for _t in _s.tracks
#				for t in _t
#					if t.type == SignalType.MIDI
#						var m = t.synth.copy()
#						var s: Synthesizer* = m
#						return s #m as Synthesizer*
		return new Synthesizer()

class FontList as @noauto
	var fonts: MidiFont[]
	var dummy: MidiFont
	
	func find(name: string) -> int
		for i=>f in fonts
			if f.name == name
				return i
		return -1
		
	func get_names() -> string[]
		var list: string[]
		for s in fonts
			list.add(s.name)
		return list
		
	func mut instruments(session: Session, name: string) -> string[]
		for f in fonts
			if f.name == name
				return f.instruments(session)
		return []

	#string[] find_drumsets()
	func mut update()
		var list = fs.search(hui.app_directory_static | "Midi Fonts", "*.nami", "f")
		for e in list
			var name = str(e)[:-5]
			if find(name) >= 0
				continue
			fonts.add(MidiFont(name))
	
	func mut get(session: Session, name: string) -> MidiFont&
		update()
		var n = find(name)
		if n < 0
			if len(name) > 0
				session.e("midi font not found: '{{name}}'")
			return &!dummy
		return &!fonts[n]
	
	func mut get_synth(session: Session, name: string, instrument: string) -> xfer[Synthesizer]
		var font = get(session, name)
		return font.get_synth(session, instrument)

var font_list: FontList


class FontConfig extends Module.Config
	var name: string
	var instrument: string
	func override reset()
		name = ""
		instrument = ""

class FontSynthesizer extends Synthesizer
	var config: FontConfig
	var synth: owned[Synthesizer]
	func override on_config()
		synth = font_list.get_synth(session, config.name, config.instrument)
		for s in synth
			s.set_sample_rate(sample_rate)
			s.on_config()
	func override render(out buf: AudioBuffer)
		for s in synth
			s.events = events
			s.render(buf)
	
	func override reset_state()
		for s in synth
			s.reset_state()

	func override create_panel() -> xfer[ConfigPanel]
		return new FontPanel(self)

class FontPanel extends ConfigPanel
	var sc: FontConfig&
	var override c: FontSynthesizer&
	func override __init__(_s: Module)
		#super.__init__(_s)
		sc := &!c.config
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_label("Set", 0 ,0, "")
		add_combo_box("!expandx", 1, 0, "sets")
		add_label("Instrument", 0 ,1, "")
		add_combo_box("!expandx", 1, 1, "instruments")
		event("sets", on_select)
		event("instruments", on_instruments)

	func override update()
		print("update....")
		reset("sets")
		var sets = font_list.get_names()
		if len(sets) > 0
			enable("sets", true)
			set_string("sets", "  - none -")
			set_int("sets", 0)
			for i=>s in sets
				set_string("sets", s)
				if s == sc.name
					set_int("sets", i+1)
		else
			enable("sets", false)
			set_string("sets", "  - no fonts found -")
			set_int("sets", 0)

		reset("instruments")
		var instruments = font_list.instruments(c.session, sc.name)
		var match = false
		for i=>ins in instruments
			add_string("instruments", ins)
			if ins == sc.instrument
				set_int("instruments", i)
				match = true
		if not match
			set_int("instruments", 0)
		
		
	func mut on_select()
		var n = get_int("")-1
		sc.name = ""
		if n >= 0 and n < len(font_list.fonts)
			sc.name = font_list.fonts[n].name
		changed()
		update()
	
	func mut on_instruments()
		var n = get_int("")
		sc.instrument = ""
		var instruments = font_list.instruments(c.session, sc.name)
		if n >= 0 and n < len(instruments)
			sc.instrument = instruments[n]
		changed()
