use os
use hui
use "../api.kaba"
use "../helper/tone.kaba"

class MidiFont
	string name
	Song *song
	Session* sub
	
	void __init__()
	void __init__(string _name)
		name = _name
		song = nil
	
	void load(Session session)
		if song
			return
		sub = session.create_child()
		song = new Song(sub, DEFAULT_SAMPLE_RATE)
		sub.song = song
		sub.storage.load(song, AppDirectoryStatic + "Midi Fonts/{{name}}.nami")

class FontList
	MidiFont[] fonts
	
	int find(string name)
		for f,i in fonts
			if f.name == name
				return i
		return -1
		
	string[] get_names()
		string[] list
		for s in fonts
			list.add(s.name)
		return list

	#string[] find_drumsets()
	void update()
		let list = Filesystem.search(AppDirectoryStatic + "Midi Fonts", "*.nami", false)
		for e in list
			string name = e[:-5]
			if find(name) >= 0
				continue
			fonts.add(MidiFont(name))
	
	Song *get(Session session, string name)
		update()
		int n = find(name)
		if n < 0
			if len(name) > 0
				session.e("midi font not found: '{{name}}'")
			return nil
		let f = &fonts[n]
		f.load(session)
		return f.song

FontList font_list

class FontConfig extends Module.Config
	string name
	override void reset()
		name = ""

class FontSynthesizer extends Synthesizer
	FontConfig config
	Song *song
	Synthesizer *synth
	override void __init__()
		song = nil
		synth = nil
	override void __delete__()
		if synth
			del synth
	override void on_config()
		if synth
			del synth
			synth = nil

		song = font_list.get(session, config.name)
		if song
			synth = song.tracks[0].synth.copy()
		if synth
			synth.set_sample_rate(sample_rate)
			synth.on_config()
	override void render(out AudioBuffer buf)
		if !synth
			return
		synth.events = events
		synth.render(buf)
	
	override void reset_state()
		if synth
			synth.reset_state()

	
	override ConfigPanel *create_panel()
		return new FontPanel(self)

class FontPanel extends ConfigPanel
	FontConfig *sc
	override FontSynthesizer *c
	override void __init__(Module _s)
		#super.__init__(_s)
		sc = &c.config
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_label("Set", 0 ,0, "")
		add_combo_box("!expandx", 1, 0, "sets")
		event("sets", on_select)

	override void update()
		reset("sets")
		let sets = font_list.get_names()
		if len(sets) > 0
			enable("sets", true)
			set_string("sets", "  - none -")
			set_int("sets", 0)
			for s,i in sets
				set_string("sets", s)
				if s == sc.name
					set_int("sets", i+1)
		else
			enable("sets", false)
			set_string("sets", "  - no fonts found -")
			set_int("sets", 0)
		
	void on_select()
		int n = get_int("")-1
		sc.name = ""
		if n >= 0 and n < len(font_list.fonts)
			sc.name = font_list.fonts[n].name
		changed()
