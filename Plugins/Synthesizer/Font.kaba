use "../api.kaba"
use "../tone.kaba"

class MidiFont
	string name
	Song *a
	Session* sub
	
	void load(Session* session)
		if a
			return
		sub = session.create_child()
		a = new Song(sub, DEFAULT_SAMPLE_RATE)
		sub.song = a
		sub.storage.load(a, AppDirectoryStatic + "Midi Fonts/" + name + ".nami")

class FontList
	MidiFont[] fonts
	
	int find(string name)
		if name == "" and fonts.num > 0
			return 0
		for f,i in fonts
			if f.name == name
				return i
		return -1
		
	string[] get_names()
		string[] list
		for s in fonts
			list.add(s.name)
		return list

	//string[] find_drumsets()
	void update()
		DirEntry[] list = DirSearch(AppDirectoryStatic + "Midi Fonts", "*.nami", false)
		for e in list
			string name = e.name.substr(0, -6)
			if find(name) >= 0
				continue
			MidiFont f
			f.name = name
			f.a = nil
			fonts.add(f)
	
	Song *get(Session* session, string name)
		update()
		int n = find(name)
		if n < 0
			if len(fonts) > 0
				n = 0
				session.w("midi font not found: '" + name + "', using '" + fonts[0].name + "' instead")
			else
				session.e("midi font not found: '" + name + "' (none found)")
				return nil
		MidiFont *f = &fonts[n]
		f.load(session)
		return f.a

FontList font_list

class DrumsetConfig extends PluginData
	string name
	override void reset()
		name = ""

class DrumsetSynthesizer extends Synthesizer
	DrumsetConfig config
	Song *a
	Synthesizer *s
	override void __init__()
		a = nil
		s = nil
	override void on_config()
		if s
			//delete s
			s = nil

		a = font_list.get(session, config.name)
		if a
			s = a.tracks[0].synth.copy()
		if s
			s.set_sample_rate(sample_rate)
			s.on_config()
	override void render(AudioBuffer buf)
		if !s
			return
		s.events = events
		s.render(buf)
	
	override void reset_state()
		if s
			s.reset_state()

	
	override ConfigPanel *create_panel()
		return new DrumsetPanel(self)

class DrumsetPanel extends ConfigPanel
	DrumsetConfig *sc
	override DrumsetSynthesizer *c
	override void __init__(Module *_s)
		//super.__init__(_s)
		sc = &c.config
		add_grid("", 0, 0, "grid")
		set_target("grid")
		add_label("Set", 0 ,0, "")
		add_combo_box("!expandx", 1, 0, "sets")
		event("sets", &on_select)

	override void update()
		reset("sets")
		string[] sets = font_list.get_names()
		enable("sets", true)
		for s,i in sets
			set_string("sets", s)
			if s == sc.name
				set_int("sets", i)
		if len(sets) == 0
			enable("sets", false)
			set_string("sets", "  - no fonts found -")
			set_int("sets", 0)
		
	void on_select()
		int n = get_int("")
		sc.name = ""
		if n >= 0 and n < len(font_list.fonts)
			sc.name = font_list.fonts[n].name
		changed()
