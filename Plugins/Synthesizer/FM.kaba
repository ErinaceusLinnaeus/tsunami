use "../api.kaba"
use "../tone.kaba"

const int NUM_OSCILLATORS = 6



class OscillatorState
	float input, output
	float volume
	float phi
	EnvelopeADSR env
	void __init__()
		volume = 0
		input = 0
		output = 0
		phi = 0
		env.reset()

enum
	TYPE_SINE
	TYPE_SQUARE
	TYPE_SAW

class OscillatorConfig
	float factor
	float amplitude
	float initial, peak, sustain
	float attack, decay, release
	int _type
	bool[NUM_OSCILLATORS] target
	bool target_out
	void __init__()
		reset()
	void reset()
		factor = 1
		amplitude = 0
		initial = 0.01
		peak = 1
		sustain = 0.6
		attack = 0.01
		decay = 0.4
		release = 0.4
		_type = TYPE_SINE
		for t in target
			t = false
		target_out = false

class OscillatorLink
	int source, dest

class FMConfig extends PluginData
	OscillatorConfig[NUM_OSCILLATORS] osc
	//OscillatorLink[] link
	override void reset()
		//link.clear()
		for o in osc
			o.reset()
		osc[0].factor = 1
		osc[0].amplitude = 0.5
		/*osc[1].factor = 1.9881
		osc[1].amplitude = 0.7
		osc[2].factor = 3.9821 // 1.72
		osc[2].amplitude = 0.3
		osc[3].factor = 1.00621
		osc[3].amplitude = 0.5
		osc[4].factor = 1.9934
		osc[4].amplitude = 0.7*/
//		OscillatorLink l
//		l.source = 0
//		l.dest = -1
//		link.add(l)
		osc[0].target_out = true
		/*l.source = 1
		l.dest = 0
		link.add(l)
		l.source = 2
		l.dest = 1
		link.add(l)
		l.source = 3
		l.dest = -1
		link.add(l)
		l.source = 4
		l.dest = 3
		link.add(l)*/
	override void __init__()
		reset()
	//void __assign__(FMConfig o)

class FMPanel extends ConfigPanel
	FMConfig *fc
	int chosen
	override FMSynthesizer *c
	override void __init__(Module *_s)
		//super.__init__(_s)
		fc = &c.config
		add_grid("", 0, 0, "outer_table")
		set_target("outer_table")
		add_grid("", 0, 0, "main_table")
		add_separator("!horizontal", 0, 1, "")
		add_grid("", 0, 2, "osc_table")
		set_target("main_table")
		add_label("Frequency", 0, 0, "")
		add_label("Amplitude", 1, 0, "")
		for j in 0:NUM_OSCILLATORS
			add_spin_button("!range=0:32:0.001\\0", 0, j + 1, "factor_" + j)
			add_spin_button("!range=0:1:0.001\\0", 1, j + 1, "amplitude_" + j)
			add_radio_button("", 2, j+1, "chosen:osc_" + j)
			event("chosen:osc_" + j, &on_chosen)
		set_target("osc_table")
		add_label("Initial", 0, 1, "")
		add_label("Peak", 0, 2, "")
		add_label("Sustain", 0, 3, "")
		add_label("Attack (ms)", 0, 4, "")
		add_label("Decay (ms)", 0, 5, "")
		add_label("Release (ms)", 0, 6, "")
		add_spin_button("!range=0:1:0.001\\0", 1, 1, "initial")
		add_spin_button("!range=0:1:0.001\\0", 1, 2, "peak")
		add_spin_button("!range=0:1:0.001\\0", 1, 3, "sustain")
		add_spin_button("!range=0:1000:0.1\\0", 1, 4, "attack")
		add_spin_button("!range=0:1000:0.1\\0", 1, 5, "decay")
		add_spin_button("!range=0:1000:0.1\\0", 1, 6, "release")
		for j in 0:NUM_OSCILLATORS
			add_check_box("" + j, 2, j+1, "link_" + j)
		add_check_box("out", 2, NUM_OSCILLATORS + 1, "link_out")
		add_combo_box("sine\\square\\saw", 3, 1, "type")
		event("*", &on_change)
		chosen = 0
	
	void on_chosen()
		chosen = HuiGetEvent().id.substr(11, -1).int()
		update()
	
	void on_change()
		if HuiGetEvent().id[:6] == "chosen"
			return
		for o,j in fc.osc
			o.factor = get_float("factor_" + j)
			o.amplitude = get_float("amplitude_" + j)
			
		OscillatorConfig *o = &fc.osc[chosen]
		o.initial = get_float("initial")
		o.peak = get_float("peak")
		o.sustain = get_float("sustain")
		o.attack = get_float("attack") / 1000
		o.decay = get_float("decay") / 1000
		o.release = get_float("release") / 1000
		o._type = get_int("type")
		
		/*for l,i in fc.link
			if l.source == chosen
				fc.link.remove(i)
				i --*/
		o.target_out = is_checked("link_out")
		/*if isChecked("link_out")
			OscillatorLink l
			l.source = chosen
			l.dest = -1
			fc.link.add(l)*/
		for j in 0:NUM_OSCILLATORS
			o.target[j] = is_checked("link_" + j)
			/*if isChecked("link_" + j)
				l.dest = j
				fc.link.add(l)*/
		
		changed()
	
	override void update()
		for o,j in fc.osc
			set_float("factor_" + j, o.factor)
			set_float("amplitude_" + j, o.amplitude)
		OscillatorConfig *o = &fc.osc[chosen]
		set_float("initial", o.initial)
		set_float("peak", o.peak)
		set_float("sustain", o.sustain)
		set_float("attack", o.attack * 1000)
		set_float("decay", o.decay * 1000)
		set_float("release", o.release * 1000)
		set_int("type", o._type)
		for j in 0:NUM_OSCILLATORS
			check("link_" + j, o.target[j])
		check("link_out", o.target_out)
		/*for l in fc.link
			if l.source == chosen
				if l.dest == -1
					check("link_out", true)
				else
					check("link_" + l.dest, true)*/



class FMRenderer extends PitchRenderer
	OscillatorState[NUM_OSCILLATORS] osc
	OscillatorConfig[NUM_OSCILLATORS] conf
	int num_osc_active
	override FMSynthesizer *synth
	
	override void __init__(Synthesizer *s, int _pitch)
		//super.__init__(s, _pitch)
		num_osc_active = 0

	override void on_end()
		for o,oi in osc
			o.env.end()
	override void on_start(float _volume)
		num_osc_active = NUM_OSCILLATORS
		for o,oi in osc
			// TODO: volume should only effect "output" oscs
			o.env.start(_volume * conf[oi].amplitude)

	override void on_config()
		for o,i in osc
			conf[i] = synth.config.osc[i]
			OscillatorConfig* c = &conf[i]
			o.env.set(c.attack, c.decay, c.sustain, c.release, synth.sample_rate)
			o.env.set2(c.initial, c.peak)

	override bool render(AudioBuffer buf)
		for i in 0:len(buf)

			for o,oi in osc
				o.volume = o.env.get()
				if o.env.just_killed
					num_osc_active --
					if num_osc_active == 0
						return false
					
				OscillatorConfig *co = &conf[oi]
				o.phi += delta_phi * (1 + o.input) * co.factor
				if co._type == TYPE_SINE
					o.output = sin(o.phi) * o.volume
				else if co._type == TYPE_SQUARE
					if sin(o.phi) > 0
						o.output = o.volume
					else
						o.output = -o.volume
				else if co._type == TYPE_SAW
					o.output = (loop(o.phi, 0, 2*pi) / pi - 1) * o.volume
				o.input = 0
				if o.phi > 8*pi
					o.phi = loop(o.phi, 0, 8*pi)
			
			// transport
			for o,oi in osc
				OscillatorConfig *co = &conf[oi]
				if co.target_out
					buf.r[i] += o.output
				for t,j in co.target
					if t
						osc[j].input += o.output
		return true

class FMSynthesizer extends Synthesizer
	FMConfig config
	
	override void __init__()
		auto_generate_stereo = true
		reset_state()

	override ConfigPanel *create_panel()
		return new FMPanel(self)

	override PitchRenderer* create_pitch_renderer(int pitch)
		return new FMRenderer(self, pitch)

			
	
