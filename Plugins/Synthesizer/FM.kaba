use hui
use "../api.kaba"
use "../helper/tone.kaba"

const int NUM_OSCILLATORS = 6

const float OSCI_RADIUS = 15.0
const float LINK_LENGTH = OSCI_RADIUS * 5.0



enum
	TYPE_SINE
	TYPE_SQUARE
	TYPE_SAW

class OscillatorConfig
	float factor
	float amplitude
	float initial, peak, sustain
	float attack, decay, release
	int _type
	bool[NUM_OSCILLATORS] target
	bool target_out
	void __init__()
		reset()
	void reset()
		factor = 1
		amplitude = 0.1
		initial = 0.01
		peak = 1
		sustain = 0.6
		attack = 0.01
		decay = 0.4
		release = 0.4
		_type = TYPE_SINE
		for t in target
			t = false
		target_out = false
	bool active()
		if target_out
			return true
		for t in target
			if t
				return true
		return false

class OscillatorLink
	int source, dest

class FMConfig extends PluginData
	OscillatorConfig[NUM_OSCILLATORS] osc
	#OscillatorLink[] link
	override void reset()
		#link.clear()
		for o in osc
			o.reset()
		osc[0].factor = 1
		osc[0].amplitude = 0.5
		osc[0].target_out = true
	void clear_links()
		for o in osc
			for t in o.target
				t = false
			o.target_out = false

class FMPanel extends ConfigPanel
	FMConfig *fc
	int chosen
	Menu* menu_top
	Menu* menu_osci
	
	float width, height
	complex[NUM_OSCILLATORS] p_osci
	complex p_out
	
	int moving, hover
	
	void add_top(string label, string id)
		menu_top.add(label, "top-" + id)
		event("top-" + id, &on_topology)
	
	override FMSynthesizer *c
	override void __init__(Module *_s)
		fc = &c.config
		
		from_source("
Grid ? ''
	DrawingArea area '' expandx expandy
	---|
	Grid ? ''
		Label ? 'Freq Multiplier'
		SpinButton factor '' range=0:32:0.001 expandx
		---|
		Label ? 'Amplitude'
		SpinButton amplitude '' range=0:100:0.001")
		
		event_x("area", "hui:draw", &on_draw)
		event_x("area", "hui:left-button-down", &on_left_button_down)
		event_x("area", "hui:left-button-up", &on_left_button_up)
		event_x("area", "hui:right-button-down", &on_right_button_down)
		event_x("area", "hui:mouse-move", &on_mouse_move)
		event("factor", &on_spin_button)
		event("amplitude", &on_spin_button)
		chosen = 0
		hover = -1
		
		menu_top = new Menu
		menu_top.add("Topology", "label-top")
		menu_top.enable("label-top", false)
		add_top("o", "x")
		add_top("o-o", "x0")
		add_top("o   o", "xx")
		add_top("o-o-o", "x01")
		add_top("o-(o   o)", "x00")
		add_top("o-o   o", "x0x")
		add_top("o-o   o-o", "x0x2")
		add_top("o-o-o   o", "x01x")
		add_top("o-(o   o)   o", "x00x")
		add_top("o-o-o   o-o-o", "x01x34")
		add_top("o-o-o   o-o   o", "x01x3x")
		add_top("o-(o   o)   o-(o   o)", "x00x33")

		menu_osci = new Menu
		menu_osci.add("Oscillator", "label")
		menu_osci.enable("label", false)
		menu_osci.add("sine", "type-sine")
		menu_osci.add("square", "type-square")
		menu_osci.add("saw", "type-saw")
		event("type-sine", &on_type_sine)
		event("type-square", &on_type_square)
		event("type-saw", &on_type_saw)
	
	void update_osci_pos()
		# initial
		p_out = complex(40, 60)
		for p,i in p_osci
			p = complex(100+15*i, i*20)#complex((i % 3) * 100 + 100, i * 20 + 10 + pow((i%3),2)*3)
			bool has_links = fc.osc[i].target_out
			for t in fc.osc[i].target
				has_links = has_links or t
			if !has_links
				p += complex(1000,1000)
		for i in 0:2000
			iterate_osci_pos()
	complex _f_link(complex a, complex b)
		float d = (b - a).abs()
		complex dir = (b - a) * (1/d)
		return dir * (d - LINK_LENGTH) * 0.1 + complex(0, (b.y-a.y) * 0.05)
	complex _f_free(complex a, complex b)
		float d = (b - a).abs()
		complex dir = (b - a) * (1/d)
		return dir * min(d - OSCI_RADIUS*3.5, 0) * 0.3
	void iterate_osci_pos()
		complex[NUM_OSCILLATORS] f
		for o,i in fc.osc
			f[i] = complex(0,0)
			for o2,j in fc.osc
				if i == j
					continue
				if linked(i,j)
					f[i] += _f_link(p_osci[i], p_osci[j])
				else
					f[i] += _f_free(p_osci[i], p_osci[j])
			if o.target_out
				f[i] += _f_link(p_osci[i], p_out)
		for o,i in fc.osc
			p_osci[i] += f[i]
	bool linked(int i, int j)
		return fc.osc[i].target[j] or fc.osc[j].target[i]
	
	complex osci_pos(int index)
		if index < 0
			return p_out
		return p_osci[index]

	void draw_type(Painter* p, complex z, int type, float dx, float amp)
		dx /= pi
		float v0 = 0
		float t0 = -pi
		for t in -pi:pi+0.1:0.1
			float v = sin(t)
			if type == TYPE_SQUARE
				if v > 0
					v = 1
				else
					v = -1
			else if type == TYPE_SAW
				v = -1 + 2*loop(t, 0, pi) / pi
			if t > t0
				p.draw_line(z.x + t0*dx, z.y - v0*amp, z.x + t*dx, z.y - v*amp)
			t0 = t
			v0 = v
	
	void draw_osci(Painter* p, int index)
		let z = osci_pos(index)
		let bg = colors.blob_bg
		let col = colors.text_soft1
		if index == chosen
			bg = colors.blob_bg_selected
			col = colors.text
		if index == hover
			bg = colors.hoverify(bg)
		p.set_color(bg)
		p.draw_circle(z.x, z.y, 15)
	
		let o = fc.osc[index]
		p.set_color(col)
		draw_type(p, z - complex(0,2), o._type, 9, 5.5)
		int f = o.factor + 0.5
		p.set_font_size(7)
		#p.set_color(colors.text_soft1)
		p.draw_str(z.x-4, z.y+6, "x" + f)
	
	void draw_link(Painter* p, int a, int b)
		p.set_color(colors.text_soft1)
		let z1 = osci_pos(a)
		let z2 = osci_pos(b)
		p.draw_line(z1.x - 18, z1.y, z2.x + 18, z2.y)
	
	float t2x(float t)
		return width*0.7 * sqrt(t)
	float v2y(float v)
		return height - 100*v
	float x2t(float x)
		return sqr(max(x,0) / width / 0.7)
	float y2v(float y)
		return max((height - y), 0) / 100
	void draw_curve_exp(Painter *p, float t0, float v0, float t1, float v1, color col)
		float e = log(v1/v0)
		complex[] cc
		for a in 0:1.01:0.05
			float t = t0+a*(t1-t0)
			float v = v0 * exp(a * e)
			cc.add(complex(t2x(t), v2y(v)))
		let col2 = color.interpolate(col, colors.text_soft2, 0.3)
		p.set_color(col2)
		p.set_line_dash([5.0,2.0])
		p.draw_lines(cc)
		p.set_line_dash([2.0,0.0])
		cc.add(complex(t2x(t1), v2y(0)))
		cc.add(complex(t2x(t0), v2y(0)))
		col2.a = 0.2
		p.set_color(col2)
		p.draw_polygon(cc)
	void draw_curve_lin(Painter *p, float t0, float v0, float t1, float v1, color col)
		complex[] cc
		cc.add(complex(t2x(t0), v2y(v0)))
		cc.add(complex(t2x(t1), v2y(v1)))
		let col2 = color.interpolate(col, colors.text_soft2, 0.3)
		p.set_color(col2)
		p.set_line_dash([5.0,2.0])
		p.draw_lines(cc)
		p.set_line_dash([2.0,0.0])
		cc.add(complex(t2x(t1), v2y(0)))
		cc.add(complex(t2x(t0), v2y(0)))
		col2.a = 0.2
		p.set_color(col2)
		p.draw_polygon(cc)
	
	void draw_grabber(Painter *p, float t0, float v0, float t1, float v1, color col, bool hover)
		let col2 = color.interpolate(col, colors.text_soft2, 0.3)
		if hover
			col2 = colors.hoverify(col2)
		p.set_color(col2)
		p.set_line_width(2.0)
		p.draw_line(t2x(t0), v2y(v0), t2x(t1), v2y(v1))
		p.set_line_width(1)
	
	void draw_envelope(Painter* p, OscillatorConfig o)
		float t0 = 0
		float t1 = t0 + o.attack
		float t2 = t1 + o.decay
		float t3 = t2 + o.release
		draw_curve_lin(p, t0, o.initial, t1, o.peak, Red)
		draw_curve_lin(p, t1, o.peak, t2, o.sustain, Orange)
		draw_curve_exp(p, t2, o.sustain, t3, 0.01, Green)
		
		
		draw_grabber(p, t1, 0, t1, 1, Red, hover == -10)
		draw_grabber(p, t2, 0, t2, 1, Orange, hover == -11)
		draw_grabber(p, t3, 0, t3, 1, Green, hover == -12)
		draw_grabber(p, t1, o.sustain, t3, o.sustain, Yellow, hover == -13)
		p.set_color(colors.text_soft1)
		p.set_font_size(9)
		if hover == -10
			p.draw_str(width - 100, height - 20, "attack " + (o.attack * 1000).str2(1) + " ms")
		else if hover == -11
			p.draw_str(width - 100, height - 20, "decay " + (o.decay * 1000).str2(0) + " ms")
		else if hover == -12
			p.draw_str(width - 100, height - 20, "release " + (o.release * 1000).str2(0) + " ms")
		else if hover == -13
			p.draw_str(width - 100, height - 20, "sustain " + (o.sustain * 100).str2(0) + " %")
		
	void on_draw(Painter* p)
		width = p.width
		height = p.height
		p.set_color(colors.background)
		p.draw_rect(0, 0, width, height)
		
		p.set_roundness(5)
		p.set_color(colors.blob_bg_hidden)
		p.draw_rect(0, p_out.y-20, p_out.x+15, 40)
		p.set_roundness(0)
		p.set_color(colors.text_soft1)
		p.draw_str(p_out.x-32, p_out.y-10, "out")
		
		for j in 0:NUM_OSCILLATORS
			draw_osci(p, j)
		for o,j in fc.osc
			for k in 0:NUM_OSCILLATORS
				if o.target[k]
					draw_link(p, j, k)
			if o.target_out
				draw_link(p, j, -1)
		
		draw_envelope(p, fc.osc[chosen])
	
	int get_hover()
		let e = HuiGetEvent()
		float mx = e.mouse_x
		float my = e.mouse_y
		for i in 0:NUM_OSCILLATORS
			let z = osci_pos(i)
			if abs(mx - z.x) + abs(my - z.y) < 20
				return i
		if my > v2y(1.1) and chosen >= 0
			let o = &fc.osc[chosen]
			if abs(mx - t2x(o.attack)) < 10
				return -10
			if abs(mx - t2x(o.attack + o.decay)) < 10
				return -11
			if abs(mx - t2x(o.attack + o.decay + o.release)) < 10
				return -12
			if mx > t2x(o.attack) and mx < t2x(o.attack + o.decay + o.release) and abs(my - v2y(o.sustain)) < 10
				return -13
		return -1
	
	void on_left_button_down()
		hover = get_hover()
		moving = -1
		if hover >= 0
			set_chosen(hover)
		else if hover < -5
			moving = hover
	void on_left_button_up()
		moving = -1
	void on_mouse_move()
		let e = HuiGetEvent()
		float mx = e.mouse_x
		float my = e.mouse_y
		if moving < -5 and chosen >= 0
			let o = &fc.osc[chosen]
			if moving == -10
				o.attack = clamp(x2t(mx), 0.0002, 2)
			if moving == -11
				o.decay = clamp(x2t(mx) - o.attack, 0.001, 2)
			if moving == -12
				o.release = clamp(x2t(mx) - o.attack - o.decay, 0.001, 2)
			if moving == -13
				o.sustain = clamp(y2v(my), 0.001, 1.0)
			update()
			changed()
		else
			hover = get_hover()
		redraw("area")
				
		
	void on_right_button_down()
		hover = get_hover()
		if hover >= 0
			set_chosen(hover)
			menu_osci.popup(self)
		else
			menu_top.popup(self)
	
	void set_chosen(int i)
		chosen = i
		redraw("area")
		update()
	
	void on_topology()
		let code = HuiGetEvent().id[4:]
		fc.clear_links()
		for i in 0:len(code)
			if code[i] == 'x'
				fc.osc[i].target_out = true
			else
				int t = code[i:i+1].int()
				fc.osc[i].target[t] = true
		update_osci_pos()
		redraw("area")
		changed()
	
	void on_type_sine()
		fc.osc[chosen]._type = TYPE_SINE
		redraw("area")
		changed()
	
	void on_type_square()
		fc.osc[chosen]._type = TYPE_SQUARE
		redraw("area")
		changed()
		
	void on_type_saw()
		fc.osc[chosen]._type = TYPE_SAW
		redraw("area")
		changed()

	void on_spin_button()
		if chosen < 0
			return
		let o = &fc.osc[chosen]
		o.factor = get_float("factor")
		o.amplitude = get_float("amplitude")
		changed()
	
	override void update()
		if chosen >= 0
			let o = &fc.osc[chosen]
			set_float("factor", o.factor)
			set_float("amplitude", o.amplitude)
		update_osci_pos()
		redraw("area")


class OscillatorState
	float input, output
	float volume
	float phi
	EnvelopeADSR env
	OscillatorConfig conf
	void __init__()
		volume = 0
		input = 0
		output = 0
		phi = 0
		env.reset()

class FMRenderer extends PitchRenderer
	OscillatorState[] osc
	int num_osc_active
	override FMSynthesizer *synth
	
	override void __init__(Synthesizer *s, int _pitch)
		#super.__init__(s, _pitch)
		num_osc_active = 0

	override void on_end()
		for o,oi in osc
			o.env.end()

	override void on_start(float _volume)
		num_osc_active = len(osc)
		for o in osc
			# TODO: volume should only effect "output" oscs
			o.env.start(_volume * o.conf.amplitude)

	override void on_config()
		osc.clear()
		for c in synth.config.osc
			OscillatorState o
			o.conf = c
			o.env.set(c.attack, c.decay, c.sustain, c.release, synth.sample_rate)
			o.env.set2(c.initial, c.peak)
			if c.active()
				osc.add(o)

	override bool render(AudioBuffer buf)
		for i in 0:len(buf)

			for o in osc
				o.volume = o.env.get()
				if o.env.just_killed
					num_osc_active --
					if num_osc_active == 0
						return false
					
				o.phi += delta_phi * (1 + o.input) * o.conf.factor
				if o.conf._type == TYPE_SINE
					o.output = sin(o.phi) * o.volume
				else if o.conf._type == TYPE_SQUARE
					if sin(o.phi) > 0
						o.output = o.volume
					else
						o.output = -o.volume
				else if o.conf._type == TYPE_SAW
					o.output = (loop(o.phi, 0, 2*pi) / pi - 1) * o.volume
				o.input = 0
				if o.phi > 16*pi
					o.phi = loop(o.phi, 0, 2*pi)
			
			# transport
			for o in osc
				if o.conf.target_out
					buf.l[i] += o.output
				for t,j in o.conf.target
					if t
						osc[j].input += o.output
		buf.auto_generate_channels()
		return true

class FMSynthesizer extends Synthesizer
	FMConfig config

	override ConfigPanel *create_panel()
		return new FMPanel(self)

	override PitchRenderer* create_pitch_renderer(int pitch)
		return new FMRenderer(self, pitch)

			
	
