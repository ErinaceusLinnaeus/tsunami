use "../api.kaba"
use "../tone.kaba"

const int NUM_OSCILLATORS = 6

enum
	MODE_OFF
	MODE_ATTACK
	MODE_DECAY
	MODE_HOLD
	MODE_RELEASE


class PitchOscillatorState
	float input, output
	float volume
	float phi
	int mode
	float mode_step
	int mode_ttl

class PitchState
	PitchOscillatorState[NUM_OSCILLATORS] osc
	float volume
	int num_osc_active


class OscillatorConfig
	float factor
	float amplitude
	float initial, peak, sustain
	float attack, decay, release

class OscillatorLink
	int source, dest

class FMConfig : PluginData
	OscillatorConfig[NUM_OSCILLATORS] osc
	OscillatorLink[] link
	overwrite void reset()
		link.clear()
		for o in osc
			o.factor = 1
			o.amplitude = 0
			o.attack = 0.01
			o.decay = 0.4
			o.release = 0.4
			o.initial = 0.01
			o.peak = 1
			o.sustain = 0.6
		osc[0].factor = 1
		osc[0].amplitude = 0.5
		/*osc[1].factor = 1.9881
		osc[1].amplitude = 0.7
		osc[2].factor = 3.9821 // 1.72
		osc[2].amplitude = 0.3
		osc[3].factor = 1.00621
		osc[3].amplitude = 0.5
		osc[4].factor = 1.9934
		osc[4].amplitude = 0.7*/
		OscillatorLink l
		l.source = 0
		l.dest = -1
		link.add(l)
		/*l.source = 1
		l.dest = 0
		link.add(l)
		l.source = 2
		l.dest = 1
		link.add(l)
		l.source = 3
		l.dest = -1
		link.add(l)
		l.source = 4
		l.dest = 3
		link.add(l)*/
	void __init__()
		reset()
	void __assign__(FMConfig o)

class FMState : PluginData
	PitchState[128] pitch
	overwrite void reset()
		for p in pitch
			p.num_osc_active = 0
			for o in p.osc
				o.volume = 0
				o.input = 0
				o.output = 0
				o.phi = 0
				o.mode = MODE_OFF
	void __init__()
		reset()

class FMPanel : ConfigPanel
	FMConfig *fc
	overwrite FMSynthesizer *c
	void __init__(FMSynthesizer *_s)
		super.__init__(_s)
		fc = &c.config
		addGrid("", 0, 0, 8, NUM_OSCILLATORS + 1, "main_table")
		setTarget("main_table", 0)
		addText("Frequency", 0, 0, 0, 0, "")
		addText("Amplitude", 1, 0, 0, 0, "")
		addText("Initial", 2, 0, 0, 0, "")
		addText("Peak", 3, 0, 0, 0, "")
		addText("Sustain", 4, 0, 0, 0, "")
		addText("Attack (ms)", 5, 0, 0, 0, "")
		addText("Decay (ms)", 6, 0, 0, 0, "")
		addText("Release (ms)", 7, 0, 0, 0, "")
		for j in 0:NUM_OSCILLATORS
			addSpinButton("0\\0\\32\\0.001", 0, j + 1, 0, 0, "factor_" + j)
			addSpinButton("0\\0\\32\\0.001", 1, j + 1, 0, 0, "amplitude_" + j)
			addSpinButton("0\\0\\1\\0.001", 2, j + 1, 0, 0, "initial_" + j)
			addSpinButton("0\\0\\1\\0.001", 3, j + 1, 0, 0, "peak_" + j)
			addSpinButton("0\\0\\1\\0.001", 4, j + 1, 0, 0, "sustain_" + j)
			addSpinButton("0\\0\\1000\\0.1", 5, j + 1, 0, 0, "attack_" + j)
			addSpinButton("0\\0\\1000\\0.1", 6, j + 1, 0, 0, "decay_" + j)
			addSpinButton("0\\0\\1000\\0.1", 7, j + 1, 0, 0, "release_" + j)
		event("*", &onChange)
	
	void onChange()
		for o,j in fc.osc
			o.factor = getFloat("factor_" + j)
			o.amplitude = getFloat("amplitude_" + j)
			o.initial = getFloat("initial_" + j)
			o.peak = getFloat("peak_" + j)
			o.sustain = getFloat("sustain_" + j)
			o.attack = getFloat("attack_" + j) / 1000
			o.decay = getFloat("decay_" + j) / 1000
			o.release = getFloat("release_" + j) / 1000
		notify()
	
	overwrite void update()
		for o,j in fc.osc
			setFloat("factor_" + j, o.factor)
			setFloat("amplitude_" + j, o.amplitude)
			setFloat("initial_" + j, o.initial)
			setFloat("peak_" + j, o.peak)
			setFloat("sustain_" + j, o.sustain)
			setFloat("attack_" + j, o.attack * 1000)
			setFloat("decay_" + j, o.decay * 1000)
			setFloat("release_" + j, o.release * 1000)
		

class FMSynthesizer : Synthesizer
	FMConfig config
	FMState state

	overwrite ConfigPanel *createPanel()
		return new FMPanel(self)

	overwrite void render(BufferBox buf)

		for i in 0:buf.num

			// current events?
			for e in events
				if e.pos == i
					int pp = e.pitch + 0.4
					PitchState *s = &state.pitch[pp]
					if e.volume == 0
						for o,oi in s.osc
							o.mode = MODE_RELEASE
							o.mode_ttl = config.osc[oi].release * sample_rate
							o.mode_step = -o.volume / o.mode_ttl
					else
						s.volume = e.volume
						s.num_osc_active = NUM_OSCILLATORS
						for o,oi in s.osc
							OscillatorConfig *oc = &config.osc[oi]
							o.mode = MODE_ATTACK
							o.mode_ttl = oc.attack * sample_rate
							o.mode_step = (oc.amplitude * oc.peak - o.volume) / o.mode_ttl
						enablePitch(pp, true)

			int[] del_me
			for p in active_pitch
				PitchState *s = &state.pitch[p]
				for o,oi in s.osc
					oc = &config.osc[oi]
					if o.mode == MODE_ATTACK
						o.volume += o.mode_step
						o.mode_ttl --
						if o.mode_ttl < 0
							o.mode = MODE_DECAY
							o.mode_ttl = oc.decay * sample_rate
							o.mode_step = (oc.sustain * oc.amplitude - o.volume) / o.mode_ttl
					else if o.mode == MODE_DECAY
						o.volume += o.mode_step
						o.mode_ttl --
						if o.mode_ttl < 0
							o.mode = MODE_HOLD
					else if o.mode == MODE_RELEASE
						o.volume += o.mode_step
						o.mode_ttl --
						if o.mode_ttl < 0
							o.mode = MODE_OFF
							s.num_osc_active --
							if s.num_osc_active == 0
								del_me.add(p)
								
					o.phi += delta_phi[p] * oc.factor * (1 + o.input)
					o.output = sin(o.phi) * o.volume
					o.input = 0
					if o.phi > 8*pi
						o.phi = loop(o.phi, 0, 8*pi)
			
				// transport
				for l in config.link
					if l.dest >= 0
						s.osc[l.dest].input += s.osc[l.source].output
					else
						// output
						float d = s.osc[l.source].output * s.volume
						buf.r[i] += d
						buf.l[i] += d
			
	