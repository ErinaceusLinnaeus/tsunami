use "../api.kaba"
use "../tone.kaba"

const int NUM_OSCILLATORS = 6



class PitchOscillatorState
	float input, output
	float volume
	float phi
	EnvelopeADSR env

class PitchState
	PitchOscillatorState[NUM_OSCILLATORS] osc
	float volume
	int num_osc_active

enum
	TYPE_SINE
	TYPE_SQUARE
	TYPE_SAW

class OscillatorConfig
	float factor
	float amplitude
	float initial, peak, sustain
	float attack, decay, release
	int type
	bool[NUM_OSCILLATORS] target
	bool target_out

class OscillatorLink
	int source, dest

class FMConfig : PluginData
	OscillatorConfig[NUM_OSCILLATORS] osc
	//OscillatorLink[] link
	override void reset()
		//link.clear()
		for o in osc
			o.type = TYPE_SINE
			o.factor = 1
			o.amplitude = 0
			o.attack = 0.01
			o.decay = 0.4
			o.release = 0.4
			o.initial = 0.01
			o.peak = 1
			o.sustain = 0.6
			for t in o.target
				t = false
			o.target_out = false
		osc[0].factor = 1
		osc[0].amplitude = 0.5
		/*osc[1].factor = 1.9881
		osc[1].amplitude = 0.7
		osc[2].factor = 3.9821 // 1.72
		osc[2].amplitude = 0.3
		osc[3].factor = 1.00621
		osc[3].amplitude = 0.5
		osc[4].factor = 1.9934
		osc[4].amplitude = 0.7*/
//		OscillatorLink l
//		l.source = 0
//		l.dest = -1
//		link.add(l)
		osc[0].target_out = true
		/*l.source = 1
		l.dest = 0
		link.add(l)
		l.source = 2
		l.dest = 1
		link.add(l)
		l.source = 3
		l.dest = -1
		link.add(l)
		l.source = 4
		l.dest = 3
		link.add(l)*/
	override void __init__()
		reset()
	void __assign__(FMConfig o)

class FMState : PluginData
	PitchState[MAX_PITCH] pitch
	override void reset()
		for p in pitch
			p.num_osc_active = 0
			for o in p.osc
				o.volume = 0
				o.input = 0
				o.output = 0
				o.phi = 0
				o.env.reset()
	override void __init__()
		reset()

class FMPanel : ConfigPanel
	FMConfig *fc
	int chosen
	override FMSynthesizer *c
	override void __init__(FMSynthesizer *_s)
		super.__init__(_s)
		fc = &c.config
		addGrid("", 0, 0, 1, 3, "outer_table")
		setTarget("outer_table", 0)
		addGrid("", 0, 0, 2, NUM_OSCILLATORS + 1, "main_table")
		addSeparator("!horizontal", 0, 1, 0, 0, "")
		addGrid("", 0, 2, 7, NUM_OSCILLATORS + 1, "osc_table")
		setTarget("main_table", 0)
		addLabel("Frequency", 0, 0, 0, 0, "")
		addLabel("Amplitude", 1, 0, 0, 0, "")
		for j in 0:NUM_OSCILLATORS
			addSpinButton("0\\0\\32\\0.001", 0, j + 1, 0, 0, "factor_" + j)
			addSpinButton("0\\0\\1\\0.001", 1, j + 1, 0, 0, "amplitude_" + j)
			addRadioButton("", 2, j+1, 0, 0, "chosen:osc_" + j)
			event("chosen:osc_" + j, &onChosen)
		setTarget("osc_table", 0)
		addLabel("Initial", 0, 1, 0, 0, "")
		addLabel("Peak", 0, 2, 0, 0, "")
		addLabel("Sustain", 0, 3, 0, 0, "")
		addLabel("Attack (ms)", 0, 4, 0, 0, "")
		addLabel("Decay (ms)", 0, 5, 0, 0, "")
		addLabel("Release (ms)", 0, 6, 0, 0, "")
		addSpinButton("0\\0\\1\\0.001", 1, 1, 0, 0, "initial")
		addSpinButton("0\\0\\1\\0.001", 1, 2, 0, 0, "peak")
		addSpinButton("0\\0\\1\\0.001", 1, 3, 0, 0, "sustain")
		addSpinButton("0\\0\\1000\\0.1", 1, 4, 0, 0, "attack")
		addSpinButton("0\\0\\1000\\0.1", 1, 5, 0, 0, "decay")
		addSpinButton("0\\0\\1000\\0.1", 1, 6, 0, 0, "release")
		for j in 0:NUM_OSCILLATORS
			addCheckBox("" + j, 2, j+1, 0, 0, "link_" + j)
		addCheckBox("out", 2, NUM_OSCILLATORS + 1, 0, 0, "link_out")
		addComboBox("sine\\square\\saw", 3, 1, 0, 0, "type")
		event("*", &onChange)
		chosen = 0
	
	void onChosen()
		chosen = HuiGetEvent().id.substr(11, -1).int()
		update()
	
	void onChange()
		if HuiGetEvent().id.substr(0, 6) == "chosen"
			return
		for o,j in fc.osc
			o.factor = getFloat("factor_" + j)
			o.amplitude = getFloat("amplitude_" + j)
			
		OscillatorConfig *o = &fc.osc[chosen]
		o.initial = getFloat("initial")
		o.peak = getFloat("peak")
		o.sustain = getFloat("sustain")
		o.attack = getFloat("attack") / 1000
		o.decay = getFloat("decay") / 1000
		o.release = getFloat("release") / 1000
		o.type = getInt("type")
		
		/*for l,i in fc.link
			if l.source == chosen
				fc.link.remove(i)
				i --*/
		o.target_out = isChecked("link_out")
		/*if isChecked("link_out")
			OscillatorLink l
			l.source = chosen
			l.dest = -1
			fc.link.add(l)*/
		for j in 0:NUM_OSCILLATORS
			o.target[j] = isChecked("link_" + j)
			/*if isChecked("link_" + j)
				l.dest = j
				fc.link.add(l)*/
		
		notify()
	
	override void update()
		for o,j in fc.osc
			setFloat("factor_" + j, o.factor)
			setFloat("amplitude_" + j, o.amplitude)
		OscillatorConfig *o = &fc.osc[chosen]
		setFloat("initial", o.initial)
		setFloat("peak", o.peak)
		setFloat("sustain", o.sustain)
		setFloat("attack", o.attack * 1000)
		setFloat("decay", o.decay * 1000)
		setFloat("release", o.release * 1000)
		setInt("type", o.type)
		for j in 0:NUM_OSCILLATORS
			check("link_" + j, o.target[j])
		check("link_out", o.target_out)
		/*for l in fc.link
			if l.source == chosen
				if l.dest == -1
					check("link_out", true)
				else
					check("link_" + l.dest, true)*/
		

class FMSynthesizer : Synthesizer
	FMConfig config
	FMState state

	override ConfigPanel *createPanel()
		return new FMPanel(self)
	
	override void onConfig()
		for p in state.pitch
			for o,i in p.osc
				OscillatorConfig *c = &config.osc[i]
				o.env.set(c.attack, c.decay, c.sustain, c.release, sample_rate)
				o.env.set2(c.initial, c.peak)

	override void render(BufferBox buf)

		for i in 0:buf.length

			// current events?
			for e in events
				if e.pos == i
					int pp = e.pitch + 0.4
					PitchState *s = &state.pitch[pp]
					if e.volume == 0
						for o,oi in s.osc
							o.env.end()
					else
						s.num_osc_active = NUM_OSCILLATORS
						for o,oi in s.osc
							// TODO: e.volume should only effect "output" oscs
							o.env.start(e.volume * config.osc[oi].amplitude)
						enablePitch(pp, true)

			int[] del_me
			del_me.clear()
			for p in active_pitch
				PitchState *s = &state.pitch[p]
				for o,oi in s.osc
					o.volume = o.env.get()
					if o.env.just_killed
						s.num_osc_active --
						if s.num_osc_active == 0
							del_me.add(p)
					
					OscillatorConfig *co = &config.osc[oi]
					o.phi += delta_phi[p] * (1 + o.input) * co.factor
					if co.type == TYPE_SINE
						o.output = sin(o.phi) * o.volume
					else if co.type == TYPE_SQUARE
						if sin(o.phi) > 0
							o.output = o.volume
						else
							o.output = -o.volume
					else if co.type == TYPE_SAW
						o.output = (loop(o.phi, 0, 2*pi) / pi - 1) * o.volume
					o.input = 0
					if o.phi > 8*pi
						o.phi = loop(o.phi, 0, 8*pi)
			
				// transport
				for o,oi in s.osc
					OscillatorConfig *co = &config.osc[oi]
					if co.target_out
						float d = o.output
						buf.r[i] += d
						buf.l[i] += d
					for t,j in co.target
						if t
							s.osc[j].input += o.output
				/*for l in config.link
					if l.dest >= 0
						s.osc[l.dest].input += s.osc[l.source].output
					else
						// output
						float d = s.osc[l.source].output
						buf.r[i] += d
						buf.l[i] += d*/
			
			for p in del_me
				enablePitch(p, false)
			
	