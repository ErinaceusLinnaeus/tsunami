use hui
use tsunami
use helper.tone
use helper.grid
use helper.filter

const NUM_HARMONICS = 9
const HARMONIC_FREQS = [0.5, 1.0, 1.498823530, 2.0, 2.997647060, 4.0, 5.040941178, 5.995294120, 8.0]

const DECAY = 0.01
const SUSTAIN = 0.7


func RA(f: float) -> float
	return 12194.0^2 * f^4 / ((f^2 + 20.6^2) * sqrt((f^2 + 107.7^2) * (f^2 + 737.9^2)) * (f^2 + 12194.0^2))

class HammondConfig extends Module.Config
	var intensity: float[NUM_HARMONICS]
	var attack: float
	var release: float
	var key_stutter: float
	func override reset()
		for i in intensity
			i = 0
		intensity[0] = 0.2
		intensity[1] = 0.3
		intensity[2] = 0.1
		intensity[3] = 0.1
		attack = 0.005
		release = 0.1
		key_stutter = 0.5

class HammondGrid extends Grid
	var hc: HammondConfig*
	var p: HammondPanel*
	var selected, hover: int

	func override on_draw(c: Painter)
	
		# points
		for i,n in hc.intensity
			var z0 = vec2(n+1, 0)
			var z1 = vec2(n+1, i)
			c.set_line_width(2)
			draw_line2(c, z0, z1, n == selected, n == hover)
			draw_point2(c, z1, n == selected, n == hover)
			
	# left button down -> select
	func override on_left_button_down()
		selected = hover
		redraw()

	func override on_mouse_move()
		# move
		if hui.get_event().button_l and (selected >= 0)
			hc.intensity[selected] = clamp(get_mouse2().y, 0, 1)
			p.changed()
		else
		# hover?
			hover = -1
			for i,n in hc.intensity
				var p = project2(vec2(n+1, i))
				if (m.x > p.x - 10) and (m.x < p.x + 10)
					hover = n
		redraw()

class HammondPanel extends ConfigPanel
	var override c: HammondSynthesizer*
	var hc: HammondConfig*
	var grid: HammondGrid
	func override __init__(_s: Module)
		from_source("
Grid ? '' vertical
	Grid ? ''
		Label ? 'Attack'
		SpinButton attack '0' range=0:500:0.1 expandx
		Label ? 'ms'
		---|
		Label ? 'Release'
		SpinButton release '0' range=0:500:0.1 expandx
		Label ? 'ms'
		---|
		Label ? 'Key stutter'
		SpinButton stutter '0' range=0:100:1 expandx
		Label ? '%'
	DrawingArea drawing '' grabfocus")
		event("attack", on_change)
		event("release", on_change)
		event("stutter", on_change)
		hc = &c.config
		
		grid.hc = hc
		grid.p = &self
		grid.init(self, "drawing")
		grid.x_axis.set(0.5, NUM_HARMONICS + 0.5, false, "")
		grid.y_axis.set(0, 1.05, false, "")
		
	func on_change()
		hc.key_stutter = get_float("stutter") / 100
		hc.attack = get_float("attack") / 1000
		hc.release = get_float("release") / 1000
		changed()
	
	func override update()
		redraw("drawing")
		set_float("stutter", hc.key_stutter * 100)
		set_float("attack", hc.attack * 1000)
		set_float("release", hc.release * 1000)

func create_stutter(intensity: float) -> float[]
	float[] stutter
	stutter.resize(440) # 10ms
	stutter = 1
	for i in 0:10
		int offset = 40 + rand(200)
		for j in 0:3
			stutter[offset + j] = (1 - intensity)
	for i in 0:10
		int offset = 240 + rand(200)
		for j in 0:3
			stutter[offset + j] = (1 - intensity)
	return stutter

class SineGenerator
	var phi = 0.
	var delta_phi = 0.
	func set_omega(omega: float)
		delta_phi = omega
	func read(n: int) -> float[]
		float[] f
		f.resize(n)
		for i in 0:n
			f[i] = sin(phi)
			phi += delta_phi
		phi = loop(phi, 0, 2*pi)
		return f

class HammondRenderer extends PitchRenderer
	var volume = 0.
	var phi: float[NUM_HARMONICS]
	var A: float[NUM_HARMONICS]
	var osci: SineGenerator[NUM_HARMONICS]
	var stutter: float[]
	var stutter_offset: int
	var env: EnvelopeADSR
	var filter: BiquadFilter
	var override synth: HammondSynthesizer*
	func override __init__(s: Synthesizer, pitch: int)
		for o,i in osci
			o.set_omega(delta_phi * HARMONIC_FREQS[i])
		for x in phi
			x = 0
		for a,i in A
			a = RA(1000) / RA(pitch_to_freq(pitch) * HARMONIC_FREQS[i])
			
		#print(str(A))
		filter.create(FILTER_LOW_PASS_LINEAR, 2500, -10, 2, synth.sample_rate)
	func override on_config()
		stutter = create_stutter(synth.config.key_stutter)
		env.set(synth.config.attack, DECAY, SUSTAIN, synth.config.release, synth.sample_rate)

	func override on_end()
		env.end()
	func override on_start(volume: float)
		env.start(volume)
		stutter_offset = 0
		#filter.reset()

	func override render(out buf: AudioBuffer) -> bool
		int n = len(buf)
		
		float[] b = osci[0].read(n) * (synth.config.intensity[0] * A[0])
		for i in 1:NUM_HARMONICS
			b += osci[i].read(n) * (synth.config.intensity[i] * A[i])

		buf.c[0] += b * env.read(n)
		#for i in 0:len(buf)
#
#			float d = 0
#			for x,j in phi
#				d += sin(x) * synth.config.intensity[j] * A[j]
#				
#				x += delta_phi * HARMONIC_FREQS[j]
#				if x > 8*pi
#					x = loop(x, 0, 2*pi)
#			buf.l[i] += d * env.get()
		#buf.l *= env.read(len(buf))
		#env.read(len(buf))

		if stutter_offset < len(stutter)
			buf.c[0] *= stutter[stutter_offset:]
			stutter_offset += len(buf)
		buf.auto_generate_channels()
		filter.apply(buf)

		return !env.just_killed

class HammondSynthesizer extends Synthesizer
	var config: HammondConfig


	func override create_panel() -> ConfigPanel*
		return new HammondPanel(&self)
	
	func override create_pitch_renderer(pitch: int) -> PitchRenderer*
		return new HammondRenderer(self, pitch)
