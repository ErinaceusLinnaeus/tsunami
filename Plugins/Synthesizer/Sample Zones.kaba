use tsunami
use helper.tone


class SampleConfig extends Module.Config
	class Zone
		var sample: SampleRef shared
		var pitch_original: int
		var pitch_min, pitch_max: int
		var start_loop, end_loop: int
		var vel_min, vel_max: float
		var attack, sustain, release: float
	var zones: Zone[]
	func override __delete__()
		reset()
	func override reset()
		zones.clear()


class SampleRenderer extends PitchRenderer
	var zone: SampleConfig.Zone*
	var data: AudioBuffer
	var env: EnvelopeADSR
	var offset: int
	var start_loop, end_loop: int
	var allow_loop: bool
	
	var override synth: SampleSynthesizer*
	func override on_config()
		synth.render_by_ref = false
		zone = nil
		offset = 0
		for z in synth.config.zones
			if pitch >= z.pitch_min and pitch <= z.pitch_max
				if true#z.vel_max > 0.95 #volume >= z.volume_min and volume <= z.volume_max
					zone = &z
				#	print(str(z))
					let factor = pow(2, float(z.pitch_original - pitch) / 12)
					data.resize(int(z.sample.origin.buf.length * factor))
					start_loop = int(zone.start_loop * factor)
					end_loop = int(zone.end_loop * factor)
					allow_loop = true
					interpolate_buffer(z.sample.origin.buf, data, 0)
					env.set(z.attack, 1, z.sustain, z.release, synth.session.sample_rate())
#					print("++++++   {{start_loop}}:{{end_loop}}  ({{len(data)}})   {{pitch}}")
					if end_loop < start_loop + 8 or end_loop < 8
						allow_loop = false
						end_loop = len(data)
					else
						start_loop = clamp(start_loop, 0, len(data))
						end_loop = clamp(end_loop, start_loop + 1, len(data))
#					print("   {{allow_loop}}   {{start_loop}}:{{end_loop}}")
#					print("   {{z.attack}}  {{z.sustain}}  {{z.release}}")
					break
				
	func override on_start(volume: float)
		env.start(volume)
		offset = 0
	func override on_end()
		env.end()
	func override render(out buf: AudioBuffer) -> bool
		if not zone
			return false
		var done = 0
		var todo = len(buf)
		while todo > 0
			let avail = end_loop - offset
			let chunk = min(avail, todo)
			buf[done:].set(data[offset:end_loop], 0, 1)
			
			done += chunk
			todo -= chunk
			offset += chunk
			if offset >= end_loop
				if not allow_loop
					offset = 0
					buf *= env.read(len(buf))
					env.reset()
					return false
				offset = start_loop
		buf *= env.read(len(buf))
		return not env.just_killed
			
	
	
class SampleSynthesizer extends Synthesizer
	var config: SampleConfig
	
	func override create_pitch_renderer(pitch: int) -> PitchRenderer*
		return new SampleRenderer(self, pitch)
	
	func override create_panel() -> ConfigPanel*
		return new SamplePanel(self)

class SamplePanel extends ConfigPanel
	var sc: SampleConfig*
	var override c: SampleSynthesizer*
	func override __init__(_s: Module)
		sc = &c.config
		add_list_view("!expandx\\Note range\\Sample", 0, 0, "list")
		#event("list", on_select)

	func override update()
		reset("list")
		for z in sc.zones
			var name = ""
			if weak(z.sample)
				name = z.sample.origin.name
			set_string("list", pitch_name(z.pitch_min) + " - " + pitch_name(z.pitch_max) + "\\" + name)
