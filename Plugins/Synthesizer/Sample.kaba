use tsunami
use helper.tone


class SampleConfig extends Module.Config
	var samples: SampleRef shared[]
	func override __delete__()
		reset()
	func override reset()
		samples.clear()


class SampleRenderer extends PitchRenderer
	var sample: SampleRef shared
	var events: MidiEventBuffer
	var override synth: SampleSynthesizer*
	func override on_config()
		sample = nil
		if pitch < len(synth.config.samples)
			sample = synth.config.samples[pitch]
	func override on_start(volume: float)
		events.add(MidiEvent(0, 0, volume))
	func override render(out buf: AudioBuffer) -> bool
		if not weak(sample) or (len(events) == 0)
			return false
		int[] to_del
		for e,i in events
			buf.add(*sample.origin.buf, e.pos, e.volume)
			e.pos -= buf.length
			if e.pos + len(*sample.origin.buf) < 0
				to_del.add(i)
		for i in 0:len(to_del)
			events.remove(to_del[len(to_del)-1-i])
		return len(events) > 0
	

class SampleSynthesizer extends Synthesizer
	var config: SampleConfig
	
	func override create_pitch_renderer(pitch: int) -> PitchRenderer*
		return new SampleRenderer(self, pitch)
	
	func override create_panel() -> ConfigPanel*
		return new SamplePanel(self)

class SamplePanel extends ConfigPanel
	var sc: SampleConfig*
	var override c: SampleSynthesizer*
	func override __init__(_s: Module)
		sc = &c.config
		add_list_view("!expandx\\Note\\Sample", 0, 0, "list")
		event("list", on_select)

	func override update()
		reset("list")
		for i in 0:MAX_PITCH
			string name = ""
			if i < len(sc.samples)
				if weak(sc.samples[i])
					name = sc.samples[i].origin.name
			set_string("list", pitch_name(i) + "\\" + name)
		
	func mut on_select()
		int n = get_int("")
		if n < 0
			return
		if n >= len(sc.samples)
			sc.samples.resize(n + 1)
		var old: Sample* = nil
		if weak(sc.samples[n])
			old = weak(sc.samples[n].origin)
		let f = func(ss: Sample*)
			var s = ss
			if s != old
				sc.samples[n] = nil
				if s
					sc.samples[n] = s.create_ref()
				changed()
				update()
		SelectSample(c.session, self, old, f)
