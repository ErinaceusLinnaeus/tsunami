use "../api.kaba"
use "../helper/tone.kaba"


class SampleConfig extends Module.Config
	SampleRef*[] samples
	override void __delete__()
		reset()
	override void reset()
		for s in samples
			if s
				del s
		samples.clear()


class SampleRenderer extends PitchRenderer
	SampleRef* sample
	MidiEventBuffer events
	override SampleSynthesizer *synth
	override void on_config()
		sample = nil
		if pitch < len(synth.config.samples)
			sample = synth.config.samples[pitch]
	override void on_start(float volume)
		events.add(MidiEvent(0, 0, volume))
	override bool render(AudioBuffer buf)
		if not sample or (len(events) == 0)
			return false
		int[] to_del
		for e,i in events
			buf.add(*sample.origin.buf, e.pos, e.volume)
			e.pos -= buf.length
			if e.pos + len(*sample.origin.buf) < 0
				to_del.add(i)
		for i in 0:len(to_del)
			events.remove(to_del[len(to_del)-1-i])
		return len(events) > 0
	

class SampleSynthesizer extends Synthesizer
	SampleConfig config
	
	override PitchRenderer* create_pitch_renderer(int pitch)
		return new SampleRenderer(self, pitch)
	
	override ConfigPanel *create_panel()
		return new SamplePanel(self)

class SamplePanel extends ConfigPanel
	SampleConfig *sc
	override SampleSynthesizer *c
	override void __init__(Module _s)
		sc = &c.config
		add_list_view("!expandx\\Note\\Sample", 0, 0, "list")
		event("list", on_select)

	override void update()
		reset("list")
		for i in 0:MAX_PITCH
			string name = ""
			if i < len(sc.samples)
				if sc.samples[i]
					name = sc.samples[i].origin.name
			set_string("list", pitch_name(i) + "\\" + name)
		
	void on_select()
		int n = get_int("")
		if n < 0
			return
		if n >= len(sc.samples)
			sc.samples.resize(n + 1)
		Sample *old = nil
		if sc.samples[n]
			old = sc.samples[n].origin
		let s = SelectSample(c.session, self, old)
		if s != old
			if sc.samples[n]
				del sc.samples[n]
				sc.samples[n] = nil
			if s
				sc.samples[n] = s.create_ref()
			changed()
