use "../api.kaba"
use "../tone.kaba"


class SampleConfig extends PluginData
	SampleRef*[] samples
	override void __delete__()
		reset()
	override void reset()
		for s in samples
			if s
				delete s
		samples.clear()


class SampleRenderer extends PitchRenderer
	SampleRef* sample
	MidiEventBuffer events
	override SampleSynthesizer *synth
	override void on_config()
		sample = nil
		if synth.config.samples.num >= pitch
			sample = synth.config.samples[pitch]
	override void on_start(float volume)
		MidiEvent e
		e.pos = 0
		e.volume = volume
		e.pitch = 0
		events.add(e)//MidiEvent(0, 0, volume))
	override bool render(AudioBuffer buf)
		print("RR")
		if !sample or events.num == 0
			print("/RR 0")
			return false
		print("a")
		print(str(events))
		int[] del
		for e,i in events
			print(i)
			print(str(e))
			print(len buf)
			print(len *sample.buf)
			raise(new Exception("xxx"))
			buf.add(*sample.buf, e.pos, e.volume, 0)
			print("ok")
			e.pos -= buf.length
			if e.pos + sample.buf.length < 0
				del.add(i)
			print("x")
		print("y")
		for i in 0:del.num
			events.remove(del[del.num-1-i])
		print("/RR")
		return events.num > 0
	

class SampleSynthesizer extends Synthesizer
	SampleConfig config
	
	override PitchRenderer* create_pitch_renderer(int pitch)
		return new SampleRenderer(self, pitch)
	
	override ConfigPanel *create_panel()
		return new SamplePanel(self)

class SamplePanel extends ConfigPanel
	SampleConfig *sc
	override SampleSynthesizer *c
	override void __init__(Module *_s)
		//super.__init__(_s)
		sc = &c.config
		add_list_view("!width=300\\Note\\Sample", 0, 0, "list")
		event("list", &on_select)

	override void update()
		reset("list")
		for i in 0:MAX_PITCH
			string name = ""
			if i < sc.samples.num
				if sc.samples[i]
					name = sc.samples[i].origin.name
			set_string("list", pitch_name(i) + "\\" + name)
		
	void on_select()
		int n = get_int("")
		if n < 0
			return
		if n >= sc.samples.num
			sc.samples.resize(n + 1)
		Sample *old = nil
		if sc.samples[n]
			old = sc.samples[n].origin
		Sample *s = SelectSample(c.session, self, old)
		if s != old
			if sc.samples[n]
				delete sc.samples[n]
				sc.samples[n] = nil
			if s
				sc.samples[n] = s.create_ref()
			changed()
