use tsunami
use helper.tone


class SampleConfig extends Module.Config
	var samples: shared[SampleRef][]
	func override reset()
		samples.clear()


class SampleRenderer extends PitchRenderer
	var sample: shared[SampleRef]
	var events: MidiEventBuffer
	var override synth: SampleSynthesizer&
	func override on_config()
		sample = nil
		if pitch < len(synth.config.samples)
			sample = synth.config.samples[pitch]
	func override on_start(volume: float)
		events.add(MidiEvent(0, 0, volume))
	func override render(out buf: AudioBuffer) -> bool
		for s in sample
			var to_del: int[]
			for i=>e in events
				buf.add(s.origin.buf, e.pos, e.volume)
				e.pos -= buf.length
				if e.pos + len(s.origin.buf) < 0
					to_del.add(i)
			for i in 0:len(to_del)
				events.remove(to_del[len(to_del)-1-i])
			return len(events) > 0
		return false
	

class SampleSynthesizer extends Synthesizer
	var config: SampleConfig
	
	func override create_pitch_renderer(pitch: int) -> xfer[PitchRenderer]
		return new SampleRenderer(self, pitch)
	
	func override create_panel() -> xfer[ConfigPanel]
		return new SamplePanel(self)

class SamplePanel extends ConfigPanel
	var sc: SampleConfig&
	var override c: SampleSynthesizer&
	func override __init__(_s: Module)
		sc := &c.config
		add_list_view("!expandx\\Note\\Sample", 0, 0, "list")
		event("list", on_select)

	func override update()
		reset("list")
		for i in 0:MAX_PITCH
			var name = ""
			if i < len(sc.samples)
				for s in sc.samples[i]
					name = s.origin.name
			set_string("list", pitch_name(i) + "\\" + name)
		
	func mut on_select()
		var n = get_int("")
		if n < 0
			return
		if n >= len(sc.samples)
			sc.samples.resize(n + 1)
		var old: Sample* = nil
		for s in sc.samples[n]
			old = &s.origin
		let f = func(ss: shared[Sample])
			var s = ss
			if weak(s) != old
				sc.samples[n] = nil
				for _s in s
					sc.samples[n] = _s.create_ref()
				changed()
				update()
		SelectSample(c.session, self, old, f)
