use "../api.kaba"
use "../tone.kaba"


class SampleConfig : PluginData
	SampleRef*[] samples
	virtual void __delete__()
		reset()
	overwrite void reset()
		for s in samples
			if s
				delete s
		samples.clear()

class SampleState : PluginData
	MidiEvent[] events
	

class SampleSynthesizer : Synthesizer
	SampleConfig config
	SampleState state
	overwrite void render(BufferBox buf)
		for e in events
			if e.volume > 0
				state.events.add(e)
		
		for e in state.events
			int n = e.pitch + 0.4
			if n < 0 or n >= config.samples.num
				e.pitch = -1
				continue
			SampleRef *s = config.samples[n]
			if !s
				e.pitch = -1
				continue
			buf.add(*s.buf, e.pos, e.volume, 0)
			e.pos -= buf.length
			if e.pos < -s.buf.length
				e.pitch = -1
			
		for e,i in state.events
			if e.pitch < 0
				state.events.remove(i)
				i --
			
	
	overwrite ConfigPanel *createPanel()
		return new SamplePanel(self)

class SamplePanel : ConfigPanel
	SampleConfig *sc
	overwrite SampleSynthesizer *c
	void __init__(SampleSynthesizer *_s)
		super.__init__(_s)
		sc = &c.config
		addListView("!width=300\\Note\\Sample", 0, 0, 0, 0, "list")
		event("list", &onSelect)

	overwrite void update()
		reset("list")
		for i in 0:MAX_PITCH
			string name = ""
			if i < sc.samples.num
				if sc.samples[i]
					name = sc.samples[i].origin.name
			setString("list", pitch_name(i) + "\\" + name)
		
	void onSelect()
		int n = getInt("")
		if n < 0
			return
		if n >= sc.samples.num
			sc.samples.resize(n + 1)
		Sample *old = nil
		if sc.samples[n]
			old = sc.samples[n].origin
		Sample *s = SelectSample(self, song, old)
		if s != old
			if sc.samples[n]
				delete sc.samples[n]
				sc.samples[n] = nil
			if s
				sc.samples[n] = s.createRef()
			notify()
