use "api.kaba"
//use "tone.kaba"


class ToneRenderer
	int pitch
	float freq
	float delta_phi
	PluginData* config
	
	virtual int read(AudioBuffer buf, float volume)

class SynthesizerX extends Synthesizer
	ToneRenderer*[MAX_PITCH] tone
	int[MAX_PITCH] last
	float[MAX_PITCH] volume
	
	override void __init__()
		for t in tone
			t = nil
		for v in volume
			v = 0
	
	//override void reset_state()
	
	virtual ToneRenderer* create_tone()
	
	ToneRenderer* get_tone(int pitch)
		if pitch < 0 or pitch > MAX_PITCH
			return nil
		if tone[pitch]
			return tone[pitch]
		ToneRenderer* tr = create_tone()
		tr.pitch = pitch
		tr.delta_phi = delta_phi[pitch]
		tr.freq = freq[pitch]
		tr.config = get_config()
		tone[pitch] = tr
		return tr
	
	void start_note(int pitch, int pos, float volume)
	
	void end_note(int pitch, int pos)
	
	void render_note(AudioBuffer buf, int pitch, Range r, float volume)
		//print("render " + pitch + " " + r + " " + volume)
		ToneRenderer* tr = get_tone(pitch)
		
		AudioBuffer b
		b.set_as_ref(buf, r.offset, r.length)
		int n = tr.read(b, volume)
		if n < 0
			enable_pitch(pitch, false)
			//print("--END END END--")
	
	bool is_active(int pitch)
		for a in active_pitch
			if a == pitch
				return true
		return false

	override void render(AudioBuffer buf)
		for l in last
			l = 0
		
		
		for e in events
			int p = f2i(e.pitch)
			if e.volume > 0
				if is_active(p)
					//print("PRE")
					render_note(buf, p, RangeTo(last[p], e.pos), 0)
				// start
				//print("--START--")
				last[p] = e.pos
				volume[p] = e.volume
				enable_pitch(p, true)
			else
				// end
				//print("--END--")
				render_note(buf, p, RangeTo(last[p], e.pos), volume[p])
				volume[p] = 0
				last[p] = 0
		
		for p in active_pitch
			render_note(buf, p, RangeTo(last[p], buf.length), volume[p])
