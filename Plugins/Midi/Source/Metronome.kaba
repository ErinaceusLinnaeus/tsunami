use "../../api.kaba"

class MetronomeSource extends MidiSource

	// sound
	float length
	float freq
	float volume
	
	// rhythm
	float bpm
	int num_beats
	int num_sub_beats
	
	bool pause
	
	// state/output
	int cur_beat
	int cur_sub_beat

	int offset_sub_beat
	float fraction_beat
	//float fraction_sub_beat
	int samples_beat
	int samples_sub_beat
	
	
	float sample_rate
	Window* win
	
	void __init__(float _bpm, int _beats, int _sample_rate)
		win = nil
		sample_rate = _sample_rate
		
		freq = 880.0
		length = 0.02
		volume = 1
		bpm = _bpm
		num_beats = _beats
		num_sub_beats = 1

		offset_sub_beat = 0
		cur_beat = 0
		cur_sub_beat = -1
		fraction_beat = 0
//		fraction_sub_beat = 0
		
		pause = false
		
		update()
		
	override int read(MidiRawData midi)
		if pause
			return midi.samples
	
		// render clicks
		while offset_sub_beat < midi.samples
			cur_sub_beat ++
			if cur_sub_beat >= num_sub_beats
				cur_sub_beat = 0
				cur_beat ++
			if cur_beat >= num_beats
				cur_beat = 0
			
			// render
			if cur_sub_beat == 0
				if cur_beat == 0
					midi.addMetronomeClick(offset_sub_beat, 0, volume)
				else
					midi.addMetronomeClick(offset_sub_beat, 1, volume)
			else
				midi.addMetronomeClick(offset_sub_beat, 2, volume)

			offset_sub_beat += samples_sub_beat
		offset_sub_beat -= midi.samples
		float fraction_sub_beat = 1 - i2f(offset_sub_beat) / i2f(samples_sub_beat)
		fraction_beat = (i2f(cur_sub_beat) + fraction_sub_beat) / i2f(num_sub_beats)
		
		if win
			win.redraw("area")
		return midi.samples
	
	void setBpm(float _bpm)
		bpm = _bpm
		update()
	
	void setBeats(int _beats, int _sub_beats)
		num_beats = _beats
		num_sub_beats = _sub_beats
		update()
	
	void setPause(bool _pause)
		pause = _pause
	
	void update()
		float dt_b = 60.0 / bpm
		float dt_s = dt_b / num_sub_beats
		samples_beat = dt_b * sample_rate
		samples_sub_beat = dt_s * sample_rate
		
		//offset = (1 - fraction) * sm_m

