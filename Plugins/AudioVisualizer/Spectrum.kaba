// Image = hui:media-play
// Title[Deutsch] = Oszilloskop
use "../api.kaba"
use "../helper/grid.kaba"

const int NUM_SAMPLES = 4096
const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int N = 512

enum
	TYPE_LINEAR
	TYPE_LOGARITHM

float todb(float v)
	if v <= 0.000000001
		return -100
	return log(v) / log(10) * 10

class SpecGrid extends Grid
	int type
	complex[] pr, pl
	float[] ffr, ffl
	
	override void __init__()
		set_type(TYPE_LOGARITHM)
	
	void set(float[] _ffl, float[] _ffr)
		ffl = _ffl
		ffr = _ffr
		
		create_lines()
		//print(str(pr))
		

	void create_lines()
		pr.resize(ffr.num)
		pl.resize(ffl.num)
		for i in 0:len(ffr)
			float x = log2lin(i2f(i) / i2f(N), MIN_FREQ, MAX_FREQ)
			pr[i].x = x
			pl[i].x = x
			if type == TYPE_LINEAR
				pr[i].y = ffr[i]
				pl[i].y = ffl[i]
			else //if type == TypeLogarithm
				//float db_max = todb(peak_max)
				//float db_min = db_max - 80
				pr[i].y = todb(ffr[i])//clamp(todb(ffr[i]), db_min, db_max)
				pl[i].y = todb(ffl[i])//clamp(todb(ffl[i]), db_min, db_max)
	void set_type(int t)
		type = t
		if type == TYPE_LINEAR
			y_axis.set(0, 1, false, "")
		else //if type == TypeLogarithm
			float db_max = 0//todb(peak_max)
			float db_min = db_max - 80
			y_axis.set(db_min, db_max, false, "db")
		create_lines()

	override void on_draw(Painter *c)
		draw_curve_b(c, pr, true, Red)
		draw_curve_b(c, pl, true, Blue)

class SpectrumPanel extends ConfigPanel
	override Spectrum* c
	SpecGrid grid
	
	override void __init__(Module *_sp)
		from_source("
DrawingArea area '' height=200")
		
		c.panels.add(self)
		
		grid.init(self, "area")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
	
	override void __delete__()
		for p,i in c.panels
			if p == self
				c.panels.remove(i)

class Spectrum extends AudioVisualizer
	SpectrumPanel*[] panels
	
	float[] ffr, ffl
	float peak_max
	
	override void __init__()
		set_chunk_size(NUM_SAMPLES)
		
	
	void do(AudioBuffer buf)
		complex[] fl, fr
		buf.get_spectrum(fl, fr, 4096)
		ffl.clear()
		ffr.clear()
	
		float ww = i2f(len(buf)) / session.sample_rate()
		for i in 0:N
			float fmin = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * i)
			float fmax = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * (i + 1))
			int j0 = fmin * ww
			int j1 = fmax * ww + 1
			j0 = clamp(j0, 0, fr.num)
			j1 = clamp(j1, 0, fr.num)
			float bmaxr = 0
			float bmaxl = 0
			for j in j0:j1
				float amp = fr[j].x * fr[j].x + fr[j].y * fr[j].y
				if bmaxr < amp
					bmaxr = amp
				amp = fl[j].x * fl[j].x + fl[j].y * fl[j].y
				if bmaxl < amp
					bmaxl = amp
			ffl.add(bmaxl)
			ffr.add(bmaxr)

		float mmax = sqr(len(buf)) / 4
		if mmax > 0
			ffl /= mmax
			ffr /= mmax
		peak_max = max(ffr.max(), ffl.max())
		peak_max = 0.01
	
	override void process(AudioBuffer buf)
		do(buf)
		for p in panels
			p.grid.set(ffl, ffr)
			p.redraw("area")
		
	override ConfigPanel* create_panel()
		return new SpectrumPanel(self)


