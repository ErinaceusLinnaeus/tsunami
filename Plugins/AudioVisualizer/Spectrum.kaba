// Image = hui:media-play
// Title[Deutsch] = Oszilloskop
use "../api.kaba"
use "../grid.kaba"

const int NUM_SAMPLES = 4096
const float MIN_FREQ = 20.0
const float MAX_FREQ = 20000.0
const int N = 512

enum
	TYPE_LINEAR
	TYPE_LOGARITHM

float todb(float v)
	return log(v) / log(10) * 10

class SpecGrid extends Grid
	int type
	complex[] pr, pl
	float[] ffr, ffl
	float peak_max
	
	void set(AudioBuffer buf, int sample_rate)
		complex[] fr, fl
		
		ffr.clear()
		ffl.clear()
	
		int len2 = buf.r.num / 2 + 1
		fr.resize(len2)
		fl.resize(len2)
		//ff.clear()
		//fft_r2c(buf.r, fr)
		//fft_r2c(buf.l, fl)
		buf.get_spectrum(fr, fl, 4096)
	
		float ww = i2f(buf.length) / sample_rate
		for i in 0:N
			float fmin = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * i)
			float fmax = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * (i + 1))
			int j0 = fmin * ww
			int j1 = fmax * ww + 1
			j0 = clamp(j0, 0, len2)
			j1 = clamp(j1, 0, len2)
			float bmaxr = 0
			float bmaxl = 0
			for j in j0:j1
				float amp = fr[j].x * fr[j].x + fr[j].y * fr[j].y
				if bmaxr < amp
					bmaxr = amp
				amp = fl[j].x * fl[j].x + fl[j].y * fl[j].y
				if bmaxl < amp
					bmaxl = amp
			ffr.add(bmaxr)
			ffl.add(bmaxl)

		float mmax = sqr(buf.length) / 4
		if mmax > 0
			ffr /= mmax
			ffl /= mmax
		peak_max = max(ffr.max(), ffl.max())
		peak_max = 0.01
		

		set_type(TYPE_LOGARITHM)

	void create_lines()
		pr.resize(N)
		pl.resize(N)
		for i in 0:N
			float x = log2lin(i2f(i) / i2f(N), MIN_FREQ, MAX_FREQ)
			pr[i].x = x
			pl[i].x = x
			if type == TYPE_LINEAR
				pr[i].y = ffr[i]
				pl[i].y = ffl[i]
			else //if type == TypeLogarithm
				float db_max = todb(peak_max)
				float db_min = db_max - 60
				pr[i].y = clamp(todb(ffr[i]), db_min, db_max)
				pl[i].y = clamp(todb(ffl[i]), db_min, db_max)
	void set_type(int t)
		type = t
		if type == TYPE_LINEAR
			y_axis.set(0, 1, false, "")
		else //if type == TypeLogarithm
			float db_max = todb(peak_max)
			float db_min = db_max - 60
			y_axis.set(db_min, db_max, false, "db")
		create_lines()

	override void on_draw(Painter *c)
		draw_curve_b(c, pr, true, Red)
		draw_curve_b(c, pl, true, Blue)

class SpectrumPanel extends ConfigPanel
	Spectrum* sp
	SpecGrid grid
	
	override void __init__(Spectrum *_sp)
		super.__init__(_sp)
		from_source("
DrawingArea area '' height=300")
		
		sp = _sp
		sp.panel = self
		
		grid.init(self, "area")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
	
		//eventX("area", "hui:draw", &onDraw)
	
	override void __delete__()
		sp.panel = nil
	
	/*void onDraw(Painter *p)
		float w = p.width
		float h = p.height
		
		p.setColor(colors.background)
		p.drawRect(0, 0, w, h)
		
		AudioBuffer *buf = &sp.buffer
		
		complex[] z
		fft_r2c(buf.r, z)
		
		p.setColor(colors.text_soft1)
		//p.setLineWidth(0.5)
		float f = h / sqrt(NUM_SAMPLES)
		float x0, y0
		for i in 0:z.num
			float x = i*2
			float y = h - z[i].abs() * f
			if i > 0
				p.drawLine(x0, y0, x, y)
			x0 = x
			y0 = y
			if x > w
				break*/

class Spectrum extends AudioVisualizer
	int n
	//AudioBuffer buffer
	SpectrumPanel *panel
	
	override void __init__()
		set_chunk_size(NUM_SAMPLES)
		panel = nil
	
	override void reset_state()
		n = 0
	
	override void process(AudioBuffer buf)
		//buffer = buf
		if panel
			panel.grid.set(buf, session.sample_rate())
			panel.redraw("area")
		
	override ConfigPanel* create_panel()
		return new SpectrumPanel(self)

