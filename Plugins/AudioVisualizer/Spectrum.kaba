# Image = hui:media-play
# Title[Deutsch] = Oszilloskop
use hui
use tsunami
use helper.grid

const NUM_SAMPLES = 4096
const MIN_FREQ = 20.0
const MAX_FREQ = 20000.0
const N = 512

enum
	TYPE_LINEAR
	TYPE_LOGARITHM

func todb(v: float) -> float
	if v <= 0.000000001
		return -100
	return log(v) / log(10) * 10

class SpecGrid extends Grid
	var type: int
	var pr, pl: complex[]
	var ffr, ffl: float[]
	
	func override __init__()
		set_type(TYPE_LOGARITHM)
	
	func set(_ffl: float[], _ffr: float[])
		ffl = _ffl
		ffr = _ffr
		
		create_lines()
		#print(str(pr))
		

	func create_lines()
		pr.resize(len(ffr))
		pl.resize(len(ffl))
		for i in 0:len(ffr)
			float x = log2lin(float(i) / float(N), MIN_FREQ, MAX_FREQ)
			pr[i].x = x
			pl[i].x = x
			if type == TYPE_LINEAR
				pr[i].y = ffr[i]
				pl[i].y = ffl[i]
			else #if type == TypeLogarithm
				#float db_max = todb(peak_max)
				#float db_min = db_max - 80
				pr[i].y = todb(ffr[i])#clamp(todb(ffr[i]), db_min, db_max)
				pl[i].y = todb(ffl[i])#clamp(todb(ffl[i]), db_min, db_max)
	func set_type(t: int)
		type = t
		if type == TYPE_LINEAR
			y_axis.set(0, 1, false, "")
		else #if type == TypeLogarithm
			float db_max = 0#todb(peak_max)
			float db_min = db_max - 80
			y_axis.set(db_min, db_max, false, "db")
		create_lines()

	func override on_draw(c: Painter)
		draw_curve_b(c, pr, true, color.RED)
		draw_curve_b(c, pl, true, color.BLUE)

class SpectrumPanel extends ConfigPanel
	var override c: Spectrum*
	var grid: SpecGrid
	
	func override __init__(_sp: Module)
		from_source("
DrawingArea area '' height=200 expandy")
		
		grid.init(self, "area")
		grid.x_axis.set(MIN_FREQ, MAX_FREQ, true, "Hz")
		
		c.subscribe(self, on_update, "Change")
	
	func override __delete__()
		c.unsubscribe(self)
	
	func on_update()
		c.lock()
		grid.set(c.ffl[c.current_reading], c.ffr[c.current_reading])
		c.unlock()
		redraw("area")

class Spectrum extends AudioVisualizer
	
	var ffr, ffl: float[][2]
	var peak_max: float
	
	func override __init__()
		set_chunk_size(NUM_SAMPLES)
		
	
	func do(buf: AudioBuffer)
		complex[] fl, fr
		buf.get_spectrum(fl, fr, 4096)
		float[] tffl, tffr
		tffl.clear()
		tffr.clear()
	
		float ww = float(len(buf)) / session.sample_rate()
		for i in 0:N
			float fmin = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * i)
			float fmax = MIN_FREQ * exp( log(MAX_FREQ / MIN_FREQ) / (N - 1) * (i + 1))
			int j0 = fmin * ww
			int j1 = fmax * ww + 1
			j0 = clamp(j0, 0, len(fr))
			j1 = clamp(j1, 0, len(fr))
			float bmaxr = 0
			float bmaxl = 0
			for j in j0:j1
				float amp = fr[j].x * fr[j].x + fr[j].y * fr[j].y
				if bmaxr < amp
					bmaxr = amp
				amp = fl[j].x * fl[j].x + fl[j].y * fl[j].y
				if bmaxl < amp
					bmaxl = amp
			tffl.add(bmaxl)
			tffr.add(bmaxr)

		float mmax = sqr(len(buf)) / 4
		if mmax > 0
			tffl /= mmax
			tffr /= mmax
		peak_max = max(tffr.max(), tffl.max())
		peak_max = 0.01
		ffl[next_writing] = tffl
		ffr[next_writing] = tffr
	
	func override process(buf: AudioBuffer)
		do(buf)
		flip()
		
	func override create_panel() -> ConfigPanel*
		return new SpectrumPanel(self)


