# Image = hui:media-play
# Title[Deutsch] = Oszilloskop
use hui
use tsunami

const NUM_SAMPLES = 4096

class OscilloscopePanel extends ConfigPanel
	var override c: Oscilloscope*
	
	func override __init__(_osci: Module)
		from_source("
DrawingArea area '' height=200 expandy")
	
		event_x("area", "hui:draw", on_draw)
		
		c.subscribe(self, on_update, "Change")
	
	func override __delete__()
		c.unsubscribe(self)
	
	func on_update()
		redraw("area")
	
	func mut on_draw(p: Painter)
		float w = p.width
		float h = p.height
		
		p.set_color(colors.background)
		p.draw_rect([0, w, 0, h])
		
		AudioBuffer buf
		c.ring_buffer.peek(buf, NUM_SAMPLES, RingBuffer.PeekMode.BACKWARD_COPY_WRAP)
		p.set_color(color(0,1,0, 0.2))
		#p.set_line_width(0.5)
		float x0, y0, x1, y1
		for i in 0:len(buf)
			x1 = w * (buf.c[0][i] / 2 + 0.5)
			y1 = h * (buf.c[1][i] / 2 + 0.5)
			p.set_color(color(0,1,0, float(i) / NUM_SAMPLES))
			if i > 0
				p.draw_line([x0, y0], [x1, y1])
			x0 = x1
			y0 = y1

class Oscilloscope extends AudioVisualizer
	#AudioBuffer buffer
	
	func override reset_state()
		#buffer.clear()
	
	func override process(buf: AudioBuffer)
		#buffer = buf
		
	func override create_panel() -> ConfigPanel*
		return new OscilloscopePanel(self)

