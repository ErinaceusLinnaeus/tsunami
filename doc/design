== data ==

-- basics --

 * mostly pointer arrays
	* can use addresses as UUIDs

-- ownership --

 * 

-- audio buffers --

 * buffers can be slices (references to other buffers)
 



== actions ==

 * keep instances (don't delete/new)




== signal chains ==

-- signals --

 * sucking protocol (data is always read)
    * the consumer owns the buffer and sends a reference to the producer to fill
    * the producer returns the number of samples really written
    * can return END_OF_STREAM ...

-- modules --

module commands
 * reset_state
	reset internal data/buffers (not affecting accum)
 * start
 * stop
	"unpause/pause" mostly for streams
 * prepare_start
	mostly for OutputStream... prebuf
 * accumulation_start/stop/reset
	mostly for recorders




== gui ==

* AudioView.cur_vlayer
	* always trying to be valid, as long as there are valid tracks/vlayers
	* determines cur_layer, cur_track





== threads ==

-- layout --

* GUI thread
	* editing (Actions)
	* Observer messages
* PeakThread
* in/out signal chains having their own threads
	* SongRenderer might become multi-threaded...

* Observer messages from other threads must be forwarded via hui::RunLater()

-- safety --

???
Song.StructureReader

RingBuffer
 * safe for single consumer + single producer

-- false positives --

OutputStream.paused
AudioSucker.running
RingBuffer
 * reading/writing: locks before and after, but not during mem access
                    still safe because of these locks



== observer ==

* InputStreamAudio sends in main thread
* InputStreamMidi sends in main thread (well, does not send at all...)
* OutputStream sends in main thread
but needs to be controlled from main thread



== plugins ==



